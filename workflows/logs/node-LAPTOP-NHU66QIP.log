[INFO ] 2021-06-06T06:07:20,066Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:07:20,368Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:07:23,967Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:07:27,134Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:07:27,159Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:07:27,160Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:07:27,788Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:27,817Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:07:28,333Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:28,333Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:28,333Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:07:28,516Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:28,531Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:07:29,112Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:07:29,800Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:07:29,816Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:07:29,848Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:07:29,849Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:07:29,849Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:07:30,832Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:30,832Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:07:30,973Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:30,973Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:07:31,019Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:31,019Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:07:31,142Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:07:31,142Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:31,298Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:31,314Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:31,314Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:31,314Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:31,314Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:31,330Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:31,331Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:31,331Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:31,346Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:31,378Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:31,378Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:31,379Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:31,456Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:31,456Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:31,456Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:31,456Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:31,456Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:07:31,706Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:31,708Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:07:31,736Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,188Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:07:32,188Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,252Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:32,252Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,284Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,284Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:07:32,284Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,285Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:07:32,363Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,363Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:07:32,378Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,378Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:07:32,378Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,379Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:07:32,379Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,394Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,394Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:07:32,426Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,426Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:07:32,426Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,426Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,426Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:07:32,427Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,441Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:32,441Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,442Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:32,442Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,442Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:07:32,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,487Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:07:32,502Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,502Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:07:32,502Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,502Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:07:32,502Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,518Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:07:32,549Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,549Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:07:32,549Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:07:32,550Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,551Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:07:32,596Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:32,596Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:07:35,063Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:07:35,079Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:35,079Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:07:35,080Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:07:35,087Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:07:35,110Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:07:35,110Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:07:35,150Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:07:41,307Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-060717.723-6A1F0A132AB8E04C\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:07:41,317Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:07:41,334Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:07:41,455Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:07:42,858Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:07:43,538Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:07:43,623Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:07:43,786Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:07:43,787Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:07:43,787Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:07:43,983Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:07:17.573Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:07:51,392Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:07:51,537Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:07:51,546Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:07:55,228Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:07:55,642Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:07:55,642Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:55,651Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:07:55,911Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:55,985Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:07:56,008Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:07:56,011Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:07:56,019Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:56,058Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:56,183Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:07:56,194Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:07:56,940Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:56,958Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:56,962Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:56,962Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:56,962Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:56,984Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-060717.723-6A1F0A132AB8E04C\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:07:56,986Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:07:56,986Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:07:57,020Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:07:57,074Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:07:57,075Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:07:57,077Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:07:57,129Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:07:57,130Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:07:57,130Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:07:57,135Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:07:17.573Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:07:58,020Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:07:58,025Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:58,025Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:58,265Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:58,267Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:07:58,317Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:07:58,317Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,320Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:58,333Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,364Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:07:58,364Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:07:58,364Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:07:58,371Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,377Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:58,422Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:07:58,451Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,451Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:58,453Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:07:58,467Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,468Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:58,484Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,484Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:58,484Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:58,485Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:58,499Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-060717.723-6A1F0A132AB8E04C\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:07:58,500Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:07:58,500Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:07:58,522Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-060717.723-6A1F0A132AB8E04C/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:07:58,566Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:07:58,567Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:07:58,568Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:07:58,618Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:07:58,618Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:07:58,619Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:07:58,623Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:07:17.573Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:07:59,139Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:07:59,142Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:59,143Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:59,331Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:07:59,333Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:07:59,362Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:07:59,362Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,364Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:59,375Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,384Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:07:59,385Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:07:59,385Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:07:59,389Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,396Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:59,432Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:07:59,455Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,456Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959675642) {}
[INFO ] 2021-06-06T06:07:59,458Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:07:59,473Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,474Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:59,487Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959678317) {}
[INFO ] 2021-06-06T06:07:59,488Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:59,500Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,502Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:07:59,511Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,511Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:07:59,512Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959679362) {}
[INFO ] 2021-06-06T06:07:59,512Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:07:59,841Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252}
[WARN ] 2021-06-06T06:07:59,841Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252}
[INFO ] 2021-06-06T06:08:00,367Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,367Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,542Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,774Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,831Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,893Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,893Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=becabe6b-eaa5-42de-b856-2321d517e82f, invocation_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, invocation_timestamp=2021-06-06T06:07:59.557Z, origin=Only For Testing, session_id=ca614924-9901-44c1-9bfe-fbc8cf0635aa, session_timestamp=2021-06-06T06:07:59.557Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,923Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,948Z [Mock network] statemachine.StaffedFlowHospital. - Flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@6543b894, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@395a711b[Permits = 0]) {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[INFO ] 2021-06-06T06:08:00,951Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:08:00,959Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:08:00,995Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] errored, dumping all transitions:

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.743Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5CF7864B55F1B72F6AA305D39128F74E4CA5B50308DC5B16B094D1EF96213E7C), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b])
    SignalFlowHasStarted(flowId=[143af851-dd9f-4e15-86fa-3ecee37c3b09])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914515028333496940), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2202357341847088213), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4914515028333496940-3158168024366042844-0-0), senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.717Z
    2021-06-06T06:08:00.721Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.751Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.721Z
    2021-06-06T06:08:00.751Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.754Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.751Z
    2021-06-06T06:08:00.754Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.768Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), maySkipCheckpoint=false, fiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.754Z
    2021-06-06T06:08:00.763Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5CF7864B55F1B72F6AA305D39128F74E4CA5B50308DC5B16B094D1EF96213E7C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853)
checkpoint.flowIoRequest: 
    null
    Receive


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.772Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.763Z
    2021-06-06T06:08:00.772Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.781Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.772Z
    2021-06-06T06:08:00.781Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.792Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.781Z
    2021-06-06T06:08:00.792Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.797Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.792Z
    2021-06-06T06:08:00.797Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.799Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.797Z
    2021-06-06T06:08:00.799Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.799Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.826Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.799Z
    2021-06-06T06:08:00.822Z
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853
    C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.831Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914515028333496940), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4914515028333496940-3158168024366042844-2-0), senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.831Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.828Z
    2021-06-06T06:08:00.831Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.872Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.831Z
    2021-06-06T06:08:00.872Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.877Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), maySkipCheckpoint=false, fiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.872Z
    2021-06-06T06:08:00.875Z
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowState.frozenFiber.hash: 
    C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE
    5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))])
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.878Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.921Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2202357341847088213), payload=net.corda.node.services.statemachine.EndSessionMessage@19341cd6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420]
checkpoint.timestamp: 
    2021-06-06T06:08:00.878Z
    2021-06-06T06:08:00.921Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2202357341847088213)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@19341cd6]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.922Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2202357341847088213)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.921Z
    2021-06-06T06:08:00.922Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2202357341847088213)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@19341cd6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)
    null


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.922Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.963Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.922Z
    2021-06-06T06:08:00.947Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2454682114714316157, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.968Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.970Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.947Z
    2021-06-06T06:08:00.970Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[WARN ] 2021-06-06T06:08:00,995Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] error {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:08:00,997Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[WARN ] 2021-06-06T06:08:01,051Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] errored, dumping all transitions:

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.743Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5CF7864B55F1B72F6AA305D39128F74E4CA5B50308DC5B16B094D1EF96213E7C), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b])
    SignalFlowHasStarted(flowId=[143af851-dd9f-4e15-86fa-3ecee37c3b09])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914515028333496940), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2202357341847088213), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4914515028333496940-3158168024366042844-0-0), senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@16acba9b]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.717Z
    2021-06-06T06:08:00.721Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.751Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.721Z
    2021-06-06T06:08:00.751Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.754Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.751Z
    2021-06-06T06:08:00.754Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.768Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), maySkipCheckpoint=false, fiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.754Z
    2021-06-06T06:08:00.763Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5CF7864B55F1B72F6AA305D39128F74E4CA5B50308DC5B16B094D1EF96213E7C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853)
checkpoint.flowIoRequest: 
    null
    Receive


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.772Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.763Z
    2021-06-06T06:08:00.772Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.781Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.772Z
    2021-06-06T06:08:00.781Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.792Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.781Z
    2021-06-06T06:08:00.792Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.797Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.792Z
    2021-06-06T06:08:00.797Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.799Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.797Z
    2021-06-06T06:08:00.799Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.799Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.826Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.799Z
    2021-06-06T06:08:00.822Z
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    87DF478791AB45B8DA541A0417D3C1395B2E59534BC6F5BD58BC880DC7461853
    C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.831Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914515028333496940), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4914515028333496940-3158168024366042844-2-0), senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.831Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.828Z
    2021-06-06T06:08:00.831Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.872Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.831Z
    2021-06-06T06:08:00.872Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.877Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), maySkipCheckpoint=false, fiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2202357341847088213)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.872Z
    2021-06-06T06:08:00.875Z
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowState.frozenFiber.hash: 
    C13F539CEFF11FF1727FC1146677661A7C6FB05FC3DEA0833B998EBA5E1A5AAE
    5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))])
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.878Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.921Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2202357341847088213), payload=net.corda.node.services.statemachine.EndSessionMessage@19341cd6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420]
checkpoint.timestamp: 
    2021-06-06T06:08:00.878Z
    2021-06-06T06:08:00.921Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2202357341847088213)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@19341cd6]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.922Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2202357341847088213)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.921Z
    2021-06-06T06:08:00.922Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2202357341847088213)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2202357341847088213): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@19341cd6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4914515028333496940), deduplicationSeed=D--4914515028333496940-3158168024366042844)
    null


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.922Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)]


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.963Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:08:00.922Z
    2021-06-06T06:08:00.947Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2454682114714316157, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.968Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:00.970Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:08:00.947Z
    2021-06-06T06:08:00.970Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] ---
  Timestamp: 2021-06-06T06:08:01.032Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-2454682114714316157)], sessions=[], senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82)
    CreateTransaction
    RemoveCheckpoint(id=[143af851-dd9f-4e15-86fa-3ecee37c3b09], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420])
    ReleaseSoftLocks(uuid=143af851-dd9f-4e15-86fa-3ecee37c3b09)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[143af851-dd9f-4e15-86fa-3ecee37c3b09], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2454682114714316157, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Invocation, sessionId=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, timestamp: 2021-06-06T06:08:00.715Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=D52D008A46F4C13C3F471C1EC03136A040BC730796F9BCA6447801CDFB8FEE37), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@3a3a0211, errorState=Errored(errors=[FlowError(errorId=-2454682114714316157, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@6543b894, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=52291a5f-cae9-494f-989d-7b01d8435e82, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@395a711b[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@24e13420]
    []
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:08:00.970Z
    2021-06-06T06:08:00.996Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2202357341847088213))]), frozenFiber=5158EA71F3A3B5EBE457D765F4F536462557A34915F13ED35E6F88049E55308D)
    net.corda.node.services.statemachine.FlowState$Finished@3a3a0211
 {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
[WARN ] 2021-06-06T06:08:01,051Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [143af851-dd9f-4e15-86fa-3ecee37c3b09] error {fiber-id=10000002, flow-id=143af851-dd9f-4e15-86fa-3ecee37c3b09, invocation_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, invocation_timestamp=2021-06-06T06:08:00.715Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8b6b3dbb-92d0-4d9c-9d99-61cf42ba7a64, session_timestamp=2021-06-06T06:08:00.715Z, thread-id=252, tx_id=8BDA30621B22533BC8B863F1246DE791091EC8C3E0DF98E8E3C0318677699272}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:11:28,000Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:11:28,321Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:11:31,406Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:11:34,528Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:11:34,551Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:11:34,553Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:11:35,174Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:35,190Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:11:35,647Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:35,663Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:35,663Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:11:35,836Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:35,852Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:11:36,436Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:11:37,104Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:11:37,104Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:11:37,149Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:11:37,150Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:11:37,150Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:11:38,145Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:38,145Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:11:38,269Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:38,269Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:11:38,315Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:38,315Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:11:38,453Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:11:38,453Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:38,656Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:38,656Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:38,657Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:38,657Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:38,672Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:38,688Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:38,689Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:38,689Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:38,703Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:38,733Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:38,749Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:38,749Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:38,810Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:38,826Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:38,827Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:38,827Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:38,827Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,097Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,112Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,607Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,607Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,670Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:39,670Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,700Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,700Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:11:39,716Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,716Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:11:39,716Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,717Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:11:39,717Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,717Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,717Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:11:39,798Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,798Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:11:39,812Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,813Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:11:39,814Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,815Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:11:39,815Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,815Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,815Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:11:39,843Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,843Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:11:39,876Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,876Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,877Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:11:39,877Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,878Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:39,878Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,879Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:39,879Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,879Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:11:39,937Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:11:39,953Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,954Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:11:39,954Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,954Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:11:39,955Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,955Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:11:39,955Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:39,955Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,955Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:11:39,985Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:39,985Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:40,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:11:40,046Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:40,046Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:11:42,546Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:11:42,560Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:42,561Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:11:42,561Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:11:42,587Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:11:42,592Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:11:42,592Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:11:42,645Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:11:48,383Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061126.222-31DD3B90B4C97FE2\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:11:48,394Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:11:48,412Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:11:48,520Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:11:49,749Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:11:50,387Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:11:50,466Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:11:50,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:11:50,607Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:11:50,608Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:11:50,769Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:11:26.136Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:11:57,093Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:11:57,248Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:11:57,255Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:12:00,718Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:12:01,139Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:12:01,139Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:01,147Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:12:01,381Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:01,488Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:12:01,506Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:12:01,509Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:12:01,518Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:01,559Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:01,681Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:12:01,693Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:12:02,407Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:02,426Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:02,430Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:02,431Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:02,431Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:02,457Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061126.222-31DD3B90B4C97FE2\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:12:02,458Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:12:02,458Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:12:02,487Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:12:02,534Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:12:02,536Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:12:02,539Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:12:02,598Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:12:02,598Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:12:02,598Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:12:02,604Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:11:26.136Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:12:03,442Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:12:03,475Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:03,476Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:03,708Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:03,710Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:12:03,735Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:12:03,735Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,737Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:03,747Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,758Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:12:03,758Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:12:03,758Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:12:03,763Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,770Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:03,823Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:12:03,857Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,858Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:03,859Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:12:03,875Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,877Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:03,892Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,892Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:03,892Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:03,892Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:03,906Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061126.222-31DD3B90B4C97FE2\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:12:03,907Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:12:03,907Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:12:03,924Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061126.222-31DD3B90B4C97FE2/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:12:03,964Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:12:03,966Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:12:03,968Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:12:04,009Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:12:04,009Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:12:04,009Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:12:04,014Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:11:26.136Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:12:04,477Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:12:04,479Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:04,479Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:04,689Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:12:04,691Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:12:04,742Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:12:04,742Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,746Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:04,756Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,764Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:12:04,764Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:12:04,764Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:12:04,769Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,775Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:04,827Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:12:04,849Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,849Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959921139) {}
[INFO ] 2021-06-06T06:12:04,851Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:12:04,864Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,866Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:04,880Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959923735) {}
[INFO ] 2021-06-06T06:12:04,882Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:04,893Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,894Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:12:04,905Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,905Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:12:04,905Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959924742) {}
[INFO ] 2021-06-06T06:12:04,905Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:12:05,225Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247}
[WARN ] 2021-06-06T06:12:05,225Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247}
[INFO ] 2021-06-06T06:12:05,661Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:05,661Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:05,840Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,093Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,151Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,241Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,241Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3a66a982-c8ad-43ea-9bd3-d2d41bae4d03, invocation_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, invocation_timestamp=2021-06-06T06:12:04.947Z, origin=Only For Testing, session_id=6ae3b8da-6fa1-40e2-a4b4-c21ee9d95193, session_timestamp=2021-06-06T06:12:04.947Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,272Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,278Z [Mock network] statemachine.StaffedFlowHospital. - Flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@59a684b8, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@1356470c[Permits = 0]) {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[INFO ] 2021-06-06T06:12:06,282Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:12:06,289Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:12:06,330Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] errored, dumping all transitions:

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.062Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4AFA2BA925895306F7022FB0EF1093473F643662FCB5AAC614629AC211CEAAB8), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c])
    SignalFlowHasStarted(flowId=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9217996759123914654), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8797289754573020714), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9217996759123914654-612542204072991825-0-0), senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.038Z
    2021-06-06T06:12:06.043Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.070Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.043Z
    2021-06-06T06:12:06.070Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.073Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.070Z
    2021-06-06T06:12:06.073Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.085Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), maySkipCheckpoint=false, fiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.073Z
    2021-06-06T06:12:06.081Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4AFA2BA925895306F7022FB0EF1093473F643662FCB5AAC614629AC211CEAAB8)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.089Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.081Z
    2021-06-06T06:12:06.089Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.101Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.089Z
    2021-06-06T06:12:06.101Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.111Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.101Z
    2021-06-06T06:12:06.111Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.117Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.111Z
    2021-06-06T06:12:06.117Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.120Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.117Z
    2021-06-06T06:12:06.120Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.120Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.147Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.120Z
    2021-06-06T06:12:06.144Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B
    3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.151Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9217996759123914654), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9217996759123914654-612542204072991825-2-0), senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.151Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.148Z
    2021-06-06T06:12:06.151Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.218Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.151Z
    2021-06-06T06:12:06.218Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.224Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), maySkipCheckpoint=false, fiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.218Z
    2021-06-06T06:12:06.221Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27
    EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))])
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.225Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.271Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8797289754573020714), payload=net.corda.node.services.statemachine.EndSessionMessage@21b221d6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.225Z
    2021-06-06T06:12:06.271Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@21b221d6]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8797289754573020714)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.272Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8797289754573020714)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.271Z
    2021-06-06T06:12:06.272Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@21b221d6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8797289754573020714)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.272Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.294Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.272Z
    2021-06-06T06:12:06.277Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-1594735953262815861, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.300Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.301Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.277Z
    2021-06-06T06:12:06.301Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[WARN ] 2021-06-06T06:12:06,330Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] error {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:12:06,333Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[WARN ] 2021-06-06T06:12:06,389Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] errored, dumping all transitions:

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.062Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4AFA2BA925895306F7022FB0EF1093473F643662FCB5AAC614629AC211CEAAB8), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c])
    SignalFlowHasStarted(flowId=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9217996759123914654), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8797289754573020714), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9217996759123914654-612542204072991825-0-0), senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.038Z
    2021-06-06T06:12:06.043Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@66d29b6c]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.070Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.043Z
    2021-06-06T06:12:06.070Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.073Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.070Z
    2021-06-06T06:12:06.073Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.085Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), maySkipCheckpoint=false, fiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.073Z
    2021-06-06T06:12:06.081Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4AFA2BA925895306F7022FB0EF1093473F643662FCB5AAC614629AC211CEAAB8)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.089Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.081Z
    2021-06-06T06:12:06.089Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.101Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.089Z
    2021-06-06T06:12:06.101Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.111Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.101Z
    2021-06-06T06:12:06.111Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.117Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.111Z
    2021-06-06T06:12:06.117Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.120Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.117Z
    2021-06-06T06:12:06.120Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.120Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.147Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.120Z
    2021-06-06T06:12:06.144Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    9131C3A86438FACA4BE3196A66062E9572295041C820CA23B062D6AA77A0DD0B
    3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.151Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9217996759123914654), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9217996759123914654-612542204072991825-2-0), senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.151Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.148Z
    2021-06-06T06:12:06.151Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.218Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.151Z
    2021-06-06T06:12:06.218Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.224Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), maySkipCheckpoint=false, fiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8797289754573020714)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.218Z
    2021-06-06T06:12:06.221Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    3EDA46FEA6EA34221A2E279FE70158C8B7B1C31C5E55B892112F28D5FA38CC27
    EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))])
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.225Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.271Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8797289754573020714), payload=net.corda.node.services.statemachine.EndSessionMessage@21b221d6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.225Z
    2021-06-06T06:12:06.271Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@21b221d6]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8797289754573020714)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.272Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8797289754573020714)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.271Z
    2021-06-06T06:12:06.272Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8797289754573020714): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@21b221d6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-9217996759123914654), deduplicationSeed=D--9217996759123914654-612542204072991825)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8797289754573020714)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.272Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.294Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.272Z
    2021-06-06T06:12:06.277Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-1594735953262815861, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.300Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.301Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:12:06.277Z
    2021-06-06T06:12:06.301Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] ---
  Timestamp: 2021-06-06T06:12:06.356Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-1594735953262815861)], sessions=[], senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76)
    CreateTransaction
    RemoveCheckpoint(id=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84])
    ReleaseSoftLocks(uuid=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-1594735953262815861, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Invocation, sessionId=7935c106-ab98-40bf-b4cd-664f36fd7b9b, timestamp: 2021-06-06T06:12:06.036Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@7776fe82, errorState=Errored(errors=[FlowError(errorId=-1594735953262815861, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@59a684b8, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=bf94a0e0-7f6f-438c-b75c-c3eace83ce76, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@1356470c[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:12:06.301Z
    2021-06-06T06:12:06.331Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8797289754573020714))]), frozenFiber=EC7F7A5B6CC4F702D04895D6B9D56913030628825D8CFD95F8BFBB260C0E450E)
    net.corda.node.services.statemachine.FlowState$Finished@7776fe82
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@fd55b84]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
[WARN ] 2021-06-06T06:12:06,390Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0] error {fiber-id=10000002, flow-id=72cb8dd8-ce83-4a94-a2fc-8bd2ba7fcad0, invocation_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, invocation_timestamp=2021-06-06T06:12:06.036Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7935c106-ab98-40bf-b4cd-664f36fd7b9b, session_timestamp=2021-06-06T06:12:06.036Z, thread-id=247, tx_id=41A535FAF65AEBC19B6B0A50F1D6F35F24EEFE3B7B778D41BACF173DC2FE379C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:12:06,677Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=8577d3e5-fed6-44fd-9f5a-d5dd140fb29f, invocation_id=014adf1e-6ff7-4969-ae36-f03a8402ef72, invocation_timestamp=2021-06-06T06:12:06.671Z, origin=Only For Testing, session_id=014adf1e-6ff7-4969-ae36-f03a8402ef72, session_timestamp=2021-06-06T06:12:06.671Z, thread-id=247}
[INFO ] 2021-06-06T06:12:06,700Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:12:06,887Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:12:06,887Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:12:06,893Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:12:07,050Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:12:07,050Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:12:07,052Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:12:07,185Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:12:07,186Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:12:45,931Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:12:46,316Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:12:49,590Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:12:52,594Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:12:52,617Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:12:52,619Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:12:53,249Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:53,264Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:12:53,735Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:53,750Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:53,750Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:12:53,938Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:53,953Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:12:54,537Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:12:55,287Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:12:55,288Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:12:55,335Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:12:55,336Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:12:55,336Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:12:56,313Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:56,313Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:12:56,439Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:56,439Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:12:56,470Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:56,470Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:12:56,581Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:12:56,597Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:56,769Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:56,769Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:56,769Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:56,769Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:56,786Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:56,805Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:56,805Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:56,805Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:56,831Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:56,847Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:56,847Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:56,847Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:56,940Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:56,940Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:56,940Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:56,940Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:56,941Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,189Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,189Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,221Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,663Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,663Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,726Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:57,726Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,757Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,757Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:12:57,757Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,757Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:12:57,773Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,773Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:12:57,773Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,773Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,773Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:12:57,837Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,837Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:12:57,837Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,837Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:12:57,837Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,838Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:12:57,838Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,855Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,855Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:12:57,869Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,869Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:12:57,869Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,886Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,886Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:12:57,886Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,901Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:57,901Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,901Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:57,901Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,901Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,947Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,947Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,947Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,962Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:12:57,962Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,962Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:12:57,963Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:12:57,963Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,963Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:12:57,963Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,978Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:12:57,979Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,979Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:12:57,979Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:57,979Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:57,979Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:12:58,009Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:58,010Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:12:58,025Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:58,025Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:12:58,025Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:58,025Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:12:58,025Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:58,026Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:12:58,057Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:12:58,073Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:58,073Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:12:58,074Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:12:58,095Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:12:58,104Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:12:58,104Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:12:58,141Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:13:04,024Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061244.021-42876CFA5FC834D1\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:13:04,034Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:13:04,052Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:13:04,164Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:13:05,293Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:13:05,852Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:13:05,915Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:13:06,038Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:13:06,039Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:13:06,040Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:13:06,197Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:12:43.912Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:13:11,407Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:13:11,541Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:13:11,550Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:13:14,942Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:13:15,338Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:13:15,338Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:15,347Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:13:15,575Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:15,644Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:13:15,663Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:13:15,666Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:13:15,673Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:15,714Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:15,835Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:13:15,847Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:13:16,520Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:16,537Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:16,541Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:16,541Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:16,541Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:16,559Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061244.021-42876CFA5FC834D1\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:13:16,559Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:13:16,560Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:13:16,576Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:13:16,619Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:13:16,621Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:13:16,627Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:13:16,675Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:13:16,675Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:13:16,675Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:13:16,679Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:12:43.912Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:13:17,497Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:13:17,503Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:17,503Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:17,723Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:17,725Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:13:17,764Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:13:17,764Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,766Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:17,774Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,783Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:13:17,783Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:13:17,783Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:13:17,788Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,794Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:17,829Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:13:17,853Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,853Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:17,855Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:13:17,868Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,869Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:17,881Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,881Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:17,881Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:17,881Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:17,894Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061244.021-42876CFA5FC834D1\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:13:17,895Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:13:17,895Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:13:17,911Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061244.021-42876CFA5FC834D1/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:13:17,956Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:13:17,957Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:13:17,958Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:13:18,003Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:13:18,004Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:13:18,004Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:13:18,008Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:12:43.912Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:13:18,436Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:13:18,439Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:18,440Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:18,627Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:13:18,629Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:13:18,657Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:13:18,657Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,659Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:18,671Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,681Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:13:18,682Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:13:18,682Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:13:18,695Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,704Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:18,738Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:13:18,762Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,762Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622959995338) {}
[INFO ] 2021-06-06T06:13:18,764Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:13:18,780Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,782Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:18,798Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622959997764) {}
[INFO ] 2021-06-06T06:13:18,800Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:18,815Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,817Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:13:18,831Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,832Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:13:18,832Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622959998657) {}
[INFO ] 2021-06-06T06:13:18,832Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:13:19,145Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245}
[WARN ] 2021-06-06T06:13:19,145Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245}
[INFO ] 2021-06-06T06:13:19,673Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:19,674Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:19,837Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,058Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,110Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,198Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,198Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6cdb7c9-4842-4613-8e9b-50a4a74543ae, invocation_id=16580f64-5f57-4849-b1a1-45040ff888ba, invocation_timestamp=2021-06-06T06:13:18.897Z, origin=Only For Testing, session_id=16580f64-5f57-4849-b1a1-45040ff888ba, session_timestamp=2021-06-06T06:13:18.897Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,235Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,241Z [Mock network] statemachine.StaffedFlowHospital. - Flow [1ae4b116-c283-4653-998c-981c6b55439d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@391435c6, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@1ad88254[Permits = 0]) {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[INFO ] 2021-06-06T06:13:20,245Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:13:20,254Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:13:20,295Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1ae4b116-c283-4653-998c-981c6b55439d] errored, dumping all transitions:

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.028Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8F60D66E0856750C0720A3A8A6EE8A449150F3FBE353A26FD149A3938278C9D5), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a])
    SignalFlowHasStarted(flowId=[1ae4b116-c283-4653-998c-981c6b55439d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6380970902070300425), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6469300228171311108), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6380970902070300425-6256455435117301737-0-0), senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.005Z
    2021-06-06T06:13:20.009Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.035Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.009Z
    2021-06-06T06:13:20.035Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.039Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.035Z
    2021-06-06T06:13:20.038Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.050Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), maySkipCheckpoint=false, fiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.038Z
    2021-06-06T06:13:20.047Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8F60D66E0856750C0720A3A8A6EE8A449150F3FBE353A26FD149A3938278C9D5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.054Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.047Z
    2021-06-06T06:13:20.054Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.064Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.054Z
    2021-06-06T06:13:20.064Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.074Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.064Z
    2021-06-06T06:13:20.074Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.079Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.074Z
    2021-06-06T06:13:20.079Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.081Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.079Z
    2021-06-06T06:13:20.081Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.081Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.105Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.081Z
    2021-06-06T06:13:20.103Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02
    E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.110Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6380970902070300425), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6380970902070300425-6256455435117301737-2-0), senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.110Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.107Z
    2021-06-06T06:13:20.110Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.176Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.110Z
    2021-06-06T06:13:20.176Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.181Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), maySkipCheckpoint=false, fiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.176Z
    2021-06-06T06:13:20.178Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))])
checkpoint.flowState.frozenFiber.hash: 
    E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16
    35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.181Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.233Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6469300228171311108), payload=net.corda.node.services.statemachine.EndSessionMessage@1ec896f3), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731]
checkpoint.timestamp: 
    2021-06-06T06:13:20.181Z
    2021-06-06T06:13:20.233Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1ec896f3]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6469300228171311108)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.234Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6469300228171311108)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.233Z
    2021-06-06T06:13:20.234Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1ec896f3], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6469300228171311108)]
    []


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.235Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.234Z
    2021-06-06T06:13:20.235Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.259Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.235Z
    2021-06-06T06:13:20.240Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6029100429537794179, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.264Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.265Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.240Z
    2021-06-06T06:13:20.265Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[WARN ] 2021-06-06T06:13:20,295Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1ae4b116-c283-4653-998c-981c6b55439d] error {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:13:20,297Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[WARN ] 2021-06-06T06:13:20,353Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1ae4b116-c283-4653-998c-981c6b55439d] errored, dumping all transitions:

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.028Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8F60D66E0856750C0720A3A8A6EE8A449150F3FBE353A26FD149A3938278C9D5), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a])
    SignalFlowHasStarted(flowId=[1ae4b116-c283-4653-998c-981c6b55439d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6380970902070300425), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6469300228171311108), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6380970902070300425-6256455435117301737-0-0), senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4dcfd24a]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.005Z
    2021-06-06T06:13:20.009Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.035Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.009Z
    2021-06-06T06:13:20.035Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.039Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.035Z
    2021-06-06T06:13:20.038Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.050Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), maySkipCheckpoint=false, fiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.038Z
    2021-06-06T06:13:20.047Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8F60D66E0856750C0720A3A8A6EE8A449150F3FBE353A26FD149A3938278C9D5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.054Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.047Z
    2021-06-06T06:13:20.054Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.064Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.054Z
    2021-06-06T06:13:20.064Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.074Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.064Z
    2021-06-06T06:13:20.074Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.079Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.074Z
    2021-06-06T06:13:20.079Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.081Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.079Z
    2021-06-06T06:13:20.081Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.081Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.105Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.081Z
    2021-06-06T06:13:20.103Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    9783E54C070262AB97FF412CEEAB440B75BAB8B84C81830A3961F97AB365FB02
    E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.110Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6380970902070300425), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6380970902070300425-6256455435117301737-2-0), senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.110Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.107Z
    2021-06-06T06:13:20.110Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.176Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.110Z
    2021-06-06T06:13:20.176Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.181Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), maySkipCheckpoint=false, fiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6469300228171311108)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.176Z
    2021-06-06T06:13:20.178Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))])
checkpoint.flowState.frozenFiber.hash: 
    E3EE5BD362FC7E3FABDB95499277F137994148CB51C34EFC534F913D07285A16
    35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.181Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.233Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6469300228171311108), payload=net.corda.node.services.statemachine.EndSessionMessage@1ec896f3), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731]
checkpoint.timestamp: 
    2021-06-06T06:13:20.181Z
    2021-06-06T06:13:20.233Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1ec896f3]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6469300228171311108)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.234Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6469300228171311108)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:13:20.233Z
    2021-06-06T06:13:20.234Z
checkpoint.checkpointState.sessions.SessionId(toLong=6469300228171311108): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1ec896f3], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6380970902070300425), deduplicationSeed=D-6380970902070300425-6256455435117301737)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6469300228171311108)]
    []


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.235Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.234Z
    2021-06-06T06:13:20.235Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.259Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:13:20.235Z
    2021-06-06T06:13:20.240Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6029100429537794179, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.264Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.265Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:13:20.240Z
    2021-06-06T06:13:20.265Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1ae4b116-c283-4653-998c-981c6b55439d] ---
  Timestamp: 2021-06-06T06:13:20.335Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6029100429537794179)], sessions=[], senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b)
    CreateTransaction
    RemoveCheckpoint(id=[1ae4b116-c283-4653-998c-981c6b55439d], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731])
    ReleaseSoftLocks(uuid=1ae4b116-c283-4653-998c-981c6b55439d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[1ae4b116-c283-4653-998c-981c6b55439d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6029100429537794179, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Invocation, sessionId=12992527-221e-440a-8e82-72490e9317aa, timestamp: 2021-06-06T06:13:20.004Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@53d018fc, errorState=Errored(errors=[FlowError(errorId=6029100429537794179, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@391435c6, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=7b1c75d6-3827-4683-b475-3ed2364e727b, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@1ad88254[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@50cc1731]
    []
checkpoint.timestamp: 
    2021-06-06T06:13:20.265Z
    2021-06-06T06:13:20.295Z
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6469300228171311108))]), frozenFiber=35729FA70FBF45D76E97F93B5A917CF00C254466DBA7B8B4CD8C5E49E75BAFC6)
    net.corda.node.services.statemachine.FlowState$Finished@53d018fc
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
[WARN ] 2021-06-06T06:13:20,353Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1ae4b116-c283-4653-998c-981c6b55439d] error {fiber-id=10000002, flow-id=1ae4b116-c283-4653-998c-981c6b55439d, invocation_id=12992527-221e-440a-8e82-72490e9317aa, invocation_timestamp=2021-06-06T06:13:20.004Z, origin=O=Mock Company 1, L=London, C=GB, session_id=12992527-221e-440a-8e82-72490e9317aa, session_timestamp=2021-06-06T06:13:20.004Z, thread-id=245, tx_id=4903709D173FE0A13A8D857E5EF39FDD1FE6810BE8ECBD7B6B6E5F31A0278D46}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:13:48,021Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=1293ed35-a778-4403-ab6d-ff1a5964e810, invocation_id=d645b37f-b169-4642-9ac3-decc380e72a6, invocation_timestamp=2021-06-06T06:13:48.015Z, origin=Only For Testing, session_id=d645b37f-b169-4642-9ac3-decc380e72a6, session_timestamp=2021-06-06T06:13:48.015Z, thread-id=245}
[INFO ] 2021-06-06T06:13:48,042Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:13:48,594Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:13:48,594Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:13:48,601Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:13:48,846Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:13:48,846Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:13:48,853Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:13:49,014Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:13:49,014Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:14:08,925Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:14:09,310Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:14:12,630Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:14:12,653Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:14:12,707Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:12,707Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:14:12,722Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:12,722Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:12,722Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:14:12,723Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:12,723Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:14:12,769Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:14:12,941Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:14:12,943Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:14:12,960Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:14:12,960Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:14:12,961Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:14:13,129Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:13,130Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:14:13,130Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:13,130Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:14:13,148Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:13,148Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:14:13,161Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:14:13,161Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,191Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,191Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,191Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,191Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,191Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,210Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,210Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,210Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,210Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,234Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,235Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,235Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,236Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,255Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,255Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,255Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,255Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,381Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,381Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,397Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,397Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,397Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:14:13,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:14:13,444Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,444Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:14:13,489Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,490Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,490Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:14:13,506Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,506Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:14:13,524Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,524Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,525Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:14:13,525Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,566Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,567Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,567Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,567Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,596Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,596Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,596Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,596Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:14:13,597Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:14:13,597Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:14:13,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,615Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:14:13,615Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,615Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:14:13,652Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,652Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:14:13,652Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,652Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,652Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:14:13,674Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,674Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:14:13,674Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,674Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:14:13,691Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:14:13,691Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,691Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:14:13,691Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:14:13,696Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:14:13,704Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:14:13,706Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:14:13,758Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:14:20,068Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061406.818-DBE0BA93910D3259\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:14:20,079Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:14:20,097Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:14:20,209Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:14:21,461Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:14:22,071Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:14:22,135Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:14:22,273Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:14:22,274Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:14:22,275Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:14:22,423Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:14:06.718Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:14:28,732Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:14:28,877Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:14:28,887Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:14:32,430Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:14:32,827Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:14:32,827Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:32,836Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:14:33,069Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:33,139Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:14:33,156Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:14:33,159Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:14:33,166Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:33,208Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:33,347Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:14:33,359Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:14:34,003Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:34,019Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:34,022Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:34,022Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:34,022Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:34,142Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061406.818-DBE0BA93910D3259\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:14:34,143Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:14:34,143Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:14:34,160Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:14:34,199Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:14:34,200Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:14:34,202Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:14:34,242Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:14:34,242Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:14:34,242Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:14:34,246Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:14:06.718Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:14:34,783Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:14:34,788Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:34,788Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:35,291Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:35,293Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:14:35,331Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:14:35,331Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,333Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:35,341Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,351Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:14:35,352Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:14:35,352Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:14:35,357Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,365Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:35,404Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:14:35,428Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,429Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:35,431Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:14:35,445Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,446Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:35,461Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,461Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:35,462Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:35,462Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:35,476Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061406.818-DBE0BA93910D3259\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:14:35,477Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:14:35,477Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:14:35,493Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061406.818-DBE0BA93910D3259/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:14:35,531Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:14:35,532Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:14:35,534Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:14:35,569Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:14:35,569Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:14:35,569Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:14:35,572Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:14:06.718Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:14:36,038Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:14:36,041Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:36,041Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:36,229Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:14:36,231Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:14:36,261Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:14:36,261Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,263Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:36,272Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,282Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:14:36,282Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:14:36,282Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:14:36,287Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,294Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:36,351Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:14:36,375Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,376Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960072827) {}
[INFO ] 2021-06-06T06:14:36,377Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:14:36,390Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,392Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:36,408Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960075331) {}
[INFO ] 2021-06-06T06:14:36,409Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:36,422Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,423Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:14:36,434Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,434Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:14:36,434Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960076261) {}
[INFO ] 2021-06-06T06:14:36,434Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:14:36,727Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242}
[WARN ] 2021-06-06T06:14:36,727Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242}
[INFO ] 2021-06-06T06:14:37,172Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,172Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,344Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,575Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,631Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,717Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,717Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1846bb69-a380-4f89-93fd-a5c149ab5fe0, invocation_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, invocation_timestamp=2021-06-06T06:14:36.478Z, origin=Only For Testing, session_id=beb567ea-3cda-4468-b0e1-e4b6a679a7de, session_timestamp=2021-06-06T06:14:36.478Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,747Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,752Z [Mock network] statemachine.StaffedFlowHospital. - Flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@2afb7ca5, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@459f4a29[Permits = 0]) {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[INFO ] 2021-06-06T06:14:37,756Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:14:37,763Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:14:37,804Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] errored, dumping all transitions:

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B9180C52A620F9588EF853A53C0D130232549887A09874C91D5CFF816F19E142), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e])
    SignalFlowHasStarted(flowId=[8108e89b-6388-4b6a-a832-b3d0f2b5f882])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1673221280818149001), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2315493860460176951), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1673221280818149001--462186477848252569-0-0), senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.522Z
    2021-06-06T06:14:37.526Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.553Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.526Z
    2021-06-06T06:14:37.553Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.556Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.553Z
    2021-06-06T06:14:37.556Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.568Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), maySkipCheckpoint=false, fiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.556Z
    2021-06-06T06:14:37.565Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B9180C52A620F9588EF853A53C0D130232549887A09874C91D5CFF816F19E142)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.572Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.565Z
    2021-06-06T06:14:37.571Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.584Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.571Z
    2021-06-06T06:14:37.584Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.594Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.584Z
    2021-06-06T06:14:37.594Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.600Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.594Z
    2021-06-06T06:14:37.599Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.601Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.599Z
    2021-06-06T06:14:37.601Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.602Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.601Z
    2021-06-06T06:14:37.602Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.626Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.602Z
    2021-06-06T06:14:37.624Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB
    9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.631Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1673221280818149001), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1673221280818149001--462186477848252569-2-0), senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.631Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.628Z
    2021-06-06T06:14:37.631Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.695Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.631Z
    2021-06-06T06:14:37.695Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.700Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), maySkipCheckpoint=false, fiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.695Z
    2021-06-06T06:14:37.698Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60
    9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))])


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.700Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.745Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2315493860460176951), payload=net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770]
checkpoint.timestamp: 
    2021-06-06T06:14:37.700Z
    2021-06-06T06:14:37.745Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2315493860460176951)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.746Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2315493860460176951)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.745Z
    2021-06-06T06:14:37.746Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2315493860460176951)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)
    null


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.747Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.746Z
    2021-06-06T06:14:37.747Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.768Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.747Z
    2021-06-06T06:14:37.751Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8007642481450158766, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.773Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.776Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.751Z
    2021-06-06T06:14:37.776Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[WARN ] 2021-06-06T06:14:37,805Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] error {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:14:37,807Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[WARN ] 2021-06-06T06:14:37,848Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] errored, dumping all transitions:

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B9180C52A620F9588EF853A53C0D130232549887A09874C91D5CFF816F19E142), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e])
    SignalFlowHasStarted(flowId=[8108e89b-6388-4b6a-a832-b3d0f2b5f882])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1673221280818149001), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2315493860460176951), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1673221280818149001--462186477848252569-0-0), senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5b5c126e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.522Z
    2021-06-06T06:14:37.526Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.553Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.526Z
    2021-06-06T06:14:37.553Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.556Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.553Z
    2021-06-06T06:14:37.556Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.568Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), maySkipCheckpoint=false, fiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.556Z
    2021-06-06T06:14:37.565Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B9180C52A620F9588EF853A53C0D130232549887A09874C91D5CFF816F19E142)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.572Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.565Z
    2021-06-06T06:14:37.571Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.584Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.571Z
    2021-06-06T06:14:37.584Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.594Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.584Z
    2021-06-06T06:14:37.594Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.600Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.594Z
    2021-06-06T06:14:37.599Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.601Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.599Z
    2021-06-06T06:14:37.601Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.602Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.601Z
    2021-06-06T06:14:37.602Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.626Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.602Z
    2021-06-06T06:14:37.624Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    E1C74CA28296BAA3494F12305447051F0B165CA94B238958BECAC2AE02BD2DAB
    9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.631Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1673221280818149001), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1673221280818149001--462186477848252569-2-0), senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.631Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.628Z
    2021-06-06T06:14:37.631Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.695Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.631Z
    2021-06-06T06:14:37.695Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.700Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), maySkipCheckpoint=false, fiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2315493860460176951)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.695Z
    2021-06-06T06:14:37.698Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    9E25D993E9869366F31850F01495CA95886FD289AA86901F73623EA56C52BA60
    9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))])


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.700Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.745Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2315493860460176951), payload=net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770]
checkpoint.timestamp: 
    2021-06-06T06:14:37.700Z
    2021-06-06T06:14:37.745Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2315493860460176951)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.746Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2315493860460176951)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.745Z
    2021-06-06T06:14:37.746Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2315493860460176951)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2315493860460176951): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@6ce0c5d2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=1673221280818149001), deduplicationSeed=D-1673221280818149001--462186477848252569)
    null


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.747Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.746Z
    2021-06-06T06:14:37.747Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)]


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.768Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:14:37.747Z
    2021-06-06T06:14:37.751Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8007642481450158766, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.773Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.776Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:14:37.751Z
    2021-06-06T06:14:37.776Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] ---
  Timestamp: 2021-06-06T06:14:37.837Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8007642481450158766)], sessions=[], senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b)
    CreateTransaction
    RemoveCheckpoint(id=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770])
    ReleaseSoftLocks(uuid=8108e89b-6388-4b6a-a832-b3d0f2b5f882)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[8108e89b-6388-4b6a-a832-b3d0f2b5f882], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8007642481450158766, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Invocation, sessionId=3e4f419e-4d2a-4f85-ab13-15c4880f1719, timestamp: 2021-06-06T06:14:37.520Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=96E80E7634F378D6D46ACD1FDBDA7690070BD1BCED4C507785E472C5D4BF2C48), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@2e426bbe, errorState=Errored(errors=[FlowError(errorId=8007642481450158766, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@2afb7ca5, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=9b8e05ac-4801-4d87-85bf-9bafc2b97c0b, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@459f4a29[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75346770]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:14:37.776Z
    2021-06-06T06:14:37.805Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2315493860460176951))]), frozenFiber=9EB8C500B03B4E326411A404D6EF4C1CB8D9BBAE484DB19CEAF0007B276F9F97)
    net.corda.node.services.statemachine.FlowState$Finished@2e426bbe
 {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
[WARN ] 2021-06-06T06:14:37,848Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [8108e89b-6388-4b6a-a832-b3d0f2b5f882] error {fiber-id=10000002, flow-id=8108e89b-6388-4b6a-a832-b3d0f2b5f882, invocation_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, invocation_timestamp=2021-06-06T06:14:37.520Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3e4f419e-4d2a-4f85-ab13-15c4880f1719, session_timestamp=2021-06-06T06:14:37.520Z, thread-id=242, tx_id=8FFA6AF64D5EB4CCC3DC2F46860F21B395F0442B08E36AB966DC985124DC4F1B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:16:24,442Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:16:24,786Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:16:27,951Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:16:31,325Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:16:31,349Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:16:31,350Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:16:31,956Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:31,986Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:16:32,459Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:32,459Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:32,459Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:16:32,646Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:32,646Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:16:33,233Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:16:33,957Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:16:33,957Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:16:34,005Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:16:34,006Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:16:34,006Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:16:35,033Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:35,033Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:16:35,159Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:35,159Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:16:35,191Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:35,191Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:16:35,300Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:16:35,315Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:35,473Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:35,489Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:35,489Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:35,489Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:35,490Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:35,505Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:35,505Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:35,505Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:35,505Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:35,553Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:35,553Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:35,553Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:35,633Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:35,633Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:35,633Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:35,633Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:35,634Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:16:35,886Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:35,887Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:16:35,919Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,359Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:16:36,359Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,423Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:36,423Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,454Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:16:36,470Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,470Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:16:36,470Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,471Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:16:36,471Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,471Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,471Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:16:36,518Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,518Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:16:36,534Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,534Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:16:36,534Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,535Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:16:36,535Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,535Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,535Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:16:36,550Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,550Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:16:36,566Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,566Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:16:36,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,582Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:36,582Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,582Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:36,582Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,582Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,628Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:16:36,629Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:16:36,644Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,644Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:16:36,644Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,644Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:16:36,660Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,660Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:16:36,660Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,660Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,660Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:16:36,676Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,676Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:16:36,676Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:16:36,676Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,676Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:16:36,722Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:36,722Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:16:39,221Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:16:39,221Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:39,237Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:16:39,237Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:16:39,249Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:16:39,253Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:16:39,254Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:16:39,290Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:16:45,474Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061622.302-6B89ED90E4B95E24\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:16:45,486Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:16:45,506Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:16:45,620Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:16:47,280Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:16:47,586Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:16:47,663Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:16:47,802Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:16:47,803Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:16:47,804Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:16:47,972Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:16:22.213Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:16:54,114Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:16:54,231Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:16:54,239Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:16:57,751Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:16:58,154Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:16:58,154Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:58,162Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:16:58,370Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:58,447Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:16:58,465Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:16:58,468Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:16:58,474Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:58,515Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:16:58,651Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:16:58,663Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:16:59,338Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:59,355Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:59,358Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:16:59,358Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:16:59,359Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:16:59,472Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061622.302-6B89ED90E4B95E24\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:16:59,473Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:16:59,473Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:16:59,497Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:16:59,536Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:16:59,537Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:16:59,539Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:16:59,873Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:16:59,873Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:16:59,873Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:16:59,878Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:16:22.213Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:17:00,424Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:17:00,429Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:00,430Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:00,667Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:00,670Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:17:00,699Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:17:00,699Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,701Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:00,709Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,722Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:17:00,723Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:17:00,723Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:17:00,728Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,734Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:17:00,779Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:17:00,804Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,804Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:17:00,806Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:17:00,819Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,820Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:00,831Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,831Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:17:00,831Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:00,831Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:17:00,841Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061622.302-6B89ED90E4B95E24\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:17:00,842Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:17:00,842Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:17:00,858Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061622.302-6B89ED90E4B95E24/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:17:00,901Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:17:00,903Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:17:00,904Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:17:00,938Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:17:00,939Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:17:00,939Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:17:00,942Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:16:22.213Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:17:01,379Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:17:01,381Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:01,381Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:01,579Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:17:01,581Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:17:01,625Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:17:01,625Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,627Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:01,636Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,645Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:17:01,645Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:17:01,645Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:17:01,650Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,658Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:17:01,696Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:17:01,719Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,719Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960218154) {}
[INFO ] 2021-06-06T06:17:01,721Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:17:01,732Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,733Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:01,745Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960220699) {}
[INFO ] 2021-06-06T06:17:01,746Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:01,758Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,759Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:17:01,769Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,769Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:17:01,769Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960221625) {}
[INFO ] 2021-06-06T06:17:01,769Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:17:02,059Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245}
[WARN ] 2021-06-06T06:17:02,059Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245}
[INFO ] 2021-06-06T06:17:02,509Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:02,509Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:02,673Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:02,903Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:02,961Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:03,060Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:03,060Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0dfbed69-e922-4554-ad07-f642113c90e4, invocation_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, invocation_timestamp=2021-06-06T06:17:01.812Z, origin=Only For Testing, session_id=ebd5f040-c1bc-451a-91bc-af8645ce9aff, session_timestamp=2021-06-06T06:17:01.812Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:03,088Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:03,093Z [Mock network] statemachine.StaffedFlowHospital. - Flow [2a9b27d6-c708-4854-b921-de8475e53a3d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@4b208ad9, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@c42cc6[Permits = 0]) {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[INFO ] 2021-06-06T06:17:03,097Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:17:03,105Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:17:03,139Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [2a9b27d6-c708-4854-b921-de8475e53a3d] errored, dumping all transitions:

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.877Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=939A534479AA1B317748F5B207F4E25D8E7FC03D1934139FA1B30F82AE31CDCB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463])
    SignalFlowHasStarted(flowId=[2a9b27d6-c708-4854-b921-de8475e53a3d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3754460133575678318), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7860376372190136646), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3754460133575678318--454971789063927978-0-0), senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:02.855Z
    2021-06-06T06:17:02.859Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.885Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.859Z
    2021-06-06T06:17:02.884Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.887Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.884Z
    2021-06-06T06:17:02.887Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.897Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), maySkipCheckpoint=false, fiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:02.887Z
    2021-06-06T06:17:02.894Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=939A534479AA1B317748F5B207F4E25D8E7FC03D1934139FA1B30F82AE31CDCB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.901Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:02.894Z
    2021-06-06T06:17:02.900Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.909Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.900Z
    2021-06-06T06:17:02.909Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.919Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.909Z
    2021-06-06T06:17:02.919Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.924Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.919Z
    2021-06-06T06:17:02.924Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.926Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.924Z
    2021-06-06T06:17:02.926Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.956Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:02.926Z
    2021-06-06T06:17:02.953Z
checkpoint.flowState.frozenFiber.hash: 
    06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A
    AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.961Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3754460133575678318), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3754460133575678318--454971789063927978-2-0), senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.961Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.958Z
    2021-06-06T06:17:02.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.037Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.961Z
    2021-06-06T06:17:03.037Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.044Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), maySkipCheckpoint=false, fiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:03.037Z
    2021-06-06T06:17:03.041Z
checkpoint.flowState.frozenFiber.hash: 
    AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160
    8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.044Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.086Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7860376372190136646), payload=net.corda.node.services.statemachine.EndSessionMessage@40ee04d2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:03.044Z
    2021-06-06T06:17:03.086Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-7860376372190136646)]
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@40ee04d2]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.087Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7860376372190136646)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:03.086Z
    2021-06-06T06:17:03.087Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-7860376372190136646)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@40ee04d2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)
    null


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.087Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.109Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:03.087Z
    2021-06-06T06:17:03.092Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1761119896414272637, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.113Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.114Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:03.092Z
    2021-06-06T06:17:03.114Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[WARN ] 2021-06-06T06:17:03,139Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [2a9b27d6-c708-4854-b921-de8475e53a3d] error {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:17:03,141Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[WARN ] 2021-06-06T06:17:03,172Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [2a9b27d6-c708-4854-b921-de8475e53a3d] errored, dumping all transitions:

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.877Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=939A534479AA1B317748F5B207F4E25D8E7FC03D1934139FA1B30F82AE31CDCB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463])
    SignalFlowHasStarted(flowId=[2a9b27d6-c708-4854-b921-de8475e53a3d])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3754460133575678318), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7860376372190136646), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3754460133575678318--454971789063927978-0-0), senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:02.855Z
    2021-06-06T06:17:02.859Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@68304463]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.885Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.859Z
    2021-06-06T06:17:02.884Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.887Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.884Z
    2021-06-06T06:17:02.887Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.897Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), maySkipCheckpoint=false, fiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:02.887Z
    2021-06-06T06:17:02.894Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=939A534479AA1B317748F5B207F4E25D8E7FC03D1934139FA1B30F82AE31CDCB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.901Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:02.894Z
    2021-06-06T06:17:02.900Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.909Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.900Z
    2021-06-06T06:17:02.909Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.919Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.909Z
    2021-06-06T06:17:02.919Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.924Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.919Z
    2021-06-06T06:17:02.924Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.926Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.924Z
    2021-06-06T06:17:02.926Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.956Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:02.926Z
    2021-06-06T06:17:02.953Z
checkpoint.flowState.frozenFiber.hash: 
    06BE7A0C601A14461390AA7660FE4B962830BA0684706302264617D79620612A
    AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.961Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3754460133575678318), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3754460133575678318--454971789063927978-2-0), senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:02.961Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.958Z
    2021-06-06T06:17:02.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.037Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:02.961Z
    2021-06-06T06:17:03.037Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.044Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), maySkipCheckpoint=false, fiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7860376372190136646)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:03.037Z
    2021-06-06T06:17:03.041Z
checkpoint.flowState.frozenFiber.hash: 
    AA2C21273257725016350888E64AAD8BADCB01B9A9646C83F47194EFE02D4160
    8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.044Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.086Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7860376372190136646), payload=net.corda.node.services.statemachine.EndSessionMessage@40ee04d2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:03.044Z
    2021-06-06T06:17:03.086Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-7860376372190136646)]
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@40ee04d2]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.087Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7860376372190136646)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:17:03.086Z
    2021-06-06T06:17:03.087Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-7860376372190136646)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-7860376372190136646): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@40ee04d2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-3754460133575678318), deduplicationSeed=D--3754460133575678318--454971789063927978)
    null


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.087Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)]


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.109Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:17:03.087Z
    2021-06-06T06:17:03.092Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1761119896414272637, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.113Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.114Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:03.092Z
    2021-06-06T06:17:03.114Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [2a9b27d6-c708-4854-b921-de8475e53a3d] ---
  Timestamp: 2021-06-06T06:17:03.161Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1761119896414272637)], sessions=[], senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773)
    CreateTransaction
    RemoveCheckpoint(id=[2a9b27d6-c708-4854-b921-de8475e53a3d], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15])
    ReleaseSoftLocks(uuid=2a9b27d6-c708-4854-b921-de8475e53a3d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[2a9b27d6-c708-4854-b921-de8475e53a3d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1761119896414272637, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Invocation, sessionId=4027ec74-986c-4881-a3dc-e26f04fc7214, timestamp: 2021-06-06T06:17:02.854Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=92DC4B1A90720DC2132E3198A0600A9AEB80F0FEACA3074DED73D21E183815E1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@19d6cc52, errorState=Errored(errors=[FlowError(errorId=1761119896414272637, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@4b208ad9, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=d2a5ab3e-b1fb-4071-9a26-e2f9b065e773, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@c42cc6[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:17:03.114Z
    2021-06-06T06:17:03.140Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7860376372190136646))]), frozenFiber=8DB9D4DDF2262800A91D58C3D54CCEEA70D43174E645509A65B9A9C6A9A9F1E3)
    net.corda.node.services.statemachine.FlowState$Finished@19d6cc52
checkpoint.checkpointState.numberOfCommits: 
    4
    5
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@59274e15]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
[WARN ] 2021-06-06T06:17:03,172Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [2a9b27d6-c708-4854-b921-de8475e53a3d] error {fiber-id=10000002, flow-id=2a9b27d6-c708-4854-b921-de8475e53a3d, invocation_id=4027ec74-986c-4881-a3dc-e26f04fc7214, invocation_timestamp=2021-06-06T06:17:02.854Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4027ec74-986c-4881-a3dc-e26f04fc7214, session_timestamp=2021-06-06T06:17:02.854Z, thread-id=245, tx_id=5EF44972B22AF1913EF2F0CC6D5B58D98C8BC97F37EA3E643D63A3101BE3AA76}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:17:15,504Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:17:15,768Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:17:15,768Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:17:15,775Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:17:15,913Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:17:15,913Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:17:15,918Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:17:16,071Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:17:16,071Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:20,884Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:19:21,153Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:19:24,288Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:19:27,898Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:19:27,922Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:19:27,923Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:19:28,530Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:28,560Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:19:29,030Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:29,031Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:29,031Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:19:29,205Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:29,221Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:19:29,803Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:19:30,504Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:19:30,505Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:19:30,552Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:19:30,552Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:19:30,552Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:19:31,522Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:31,522Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:19:31,634Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:31,634Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:19:31,666Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:31,666Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:19:31,808Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:19:31,808Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:31,982Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:31,998Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:31,998Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:31,998Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:31,998Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:32,013Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:32,013Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:32,013Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:32,028Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:32,043Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,059Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:32,059Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,155Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:32,155Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,155Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:32,156Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,156Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:19:32,421Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,421Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:19:32,437Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,891Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:19:32,891Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:32,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:32,969Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,001Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,001Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:19:33,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,017Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:19:33,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,017Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:19:33,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,018Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,018Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:19:33,065Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,065Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:19:33,080Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,080Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:19:33,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,081Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:19:33,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,096Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:19:33,111Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,111Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:19:33,127Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,127Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,127Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:19:33,127Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,127Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:33,144Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:33,144Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,144Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:19:33,191Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,191Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:19:33,191Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,191Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:19:33,206Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,207Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:19:33,207Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:19:33,207Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,207Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:19:33,221Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,221Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:19:33,221Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,221Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:19:33,222Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,222Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,222Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:19:33,253Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,253Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:19:33,253Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,253Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:19:33,253Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:19:33,301Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:33,301Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:19:35,755Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:19:35,771Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:35,771Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:19:35,771Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:19:35,777Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:19:35,802Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:19:35,802Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:19:35,838Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:19:40,710Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061919.267-E107AFDE52AEDA03\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:19:40,720Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:19:40,736Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:19:40,849Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:19:41,894Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:42,483Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:19:42,542Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:19:42,655Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:19:42,656Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:19:42,656Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:19:42,788Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:19:19.189Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:19:47,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:19:48,051Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:19:48,057Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:19:50,967Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:19:51,297Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:19:51,298Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:51,304Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:19:51,458Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:51,525Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:19:51,541Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:19:51,544Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:19:51,551Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:51,587Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:51,718Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:19:51,731Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:19:52,330Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:52,340Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:52,343Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:52,344Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:52,344Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:52,360Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061919.267-E107AFDE52AEDA03\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:19:52,361Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:19:52,361Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:19:52,375Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:19:52,410Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:52,411Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:19:52,413Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:19:52,450Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:19:52,450Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:19:52,450Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:19:52,454Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:19:19.189Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:19:52,930Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:19:52,935Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:52,935Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:53,143Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:53,145Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:19:53,184Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:19:53,184Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,186Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:53,196Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,203Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:19:53,204Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:19:53,204Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:19:53,208Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,213Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:53,275Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:19:53,297Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,297Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:53,300Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:19:53,315Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,317Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:53,330Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,330Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:53,331Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:53,331Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:53,343Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-061919.267-E107AFDE52AEDA03\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:19:53,344Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:19:53,344Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:19:53,355Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-061919.267-E107AFDE52AEDA03/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:19:53,716Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:53,717Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:19:53,718Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:19:53,753Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:19:53,753Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:19:53,753Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:19:53,757Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:19:19.189Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:19:54,141Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:19:54,144Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:54,144Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:54,323Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:19:54,325Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:19:54,351Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:19:54,351Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,353Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:54,364Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,372Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:19:54,372Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:19:54,372Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:19:54,377Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,384Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:54,423Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:19:54,444Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,444Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960391297) {}
[INFO ] 2021-06-06T06:19:54,447Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:19:54,459Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,460Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:54,473Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960393184) {}
[INFO ] 2021-06-06T06:19:54,474Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:54,488Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,490Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:19:54,503Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,503Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:19:54,504Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960394351) {}
[INFO ] 2021-06-06T06:19:54,504Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:19:54,761Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242}
[WARN ] 2021-06-06T06:19:54,761Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242}
[INFO ] 2021-06-06T06:19:55,148Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,148Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,298Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,514Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,563Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,646Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,646Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=1e0db1f4-71f7-4865-b7d8-dae9d69f704c, invocation_id=485a636b-ceec-4f29-aed0-822fb04cebb9, invocation_timestamp=2021-06-06T06:19:54.550Z, origin=Only For Testing, session_id=485a636b-ceec-4f29-aed0-822fb04cebb9, session_timestamp=2021-06-06T06:19:54.550Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,673Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,678Z [Mock network] statemachine.StaffedFlowHospital. - Flow [c23f6d62-6b6c-4339-a853-55004aadb31f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@31079c37, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@39762fdb[Permits = 0]) {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[INFO ] 2021-06-06T06:19:55,681Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:19:55,689Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:19:55,723Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [c23f6d62-6b6c-4339-a853-55004aadb31f] errored, dumping all transitions:

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.487Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=BCFD739AD0A28F770B928B262A525B054E543A23A6B515C65F7AA15F742FAE3E), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395])
    SignalFlowHasStarted(flowId=[c23f6d62-6b6c-4339-a853-55004aadb31f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1076687858043648161), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5853419241128504420), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1076687858043648161-5110828382996447229-0-0), senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.461Z
    2021-06-06T06:19:55.464Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395]
    []


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.494Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.464Z
    2021-06-06T06:19:55.494Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.497Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.494Z
    2021-06-06T06:19:55.497Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.508Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), maySkipCheckpoint=false, fiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.497Z
    2021-06-06T06:19:55.504Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=BCFD739AD0A28F770B928B262A525B054E543A23A6B515C65F7AA15F742FAE3E)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.511Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.504Z
    2021-06-06T06:19:55.511Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.520Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.511Z
    2021-06-06T06:19:55.520Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.530Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.520Z
    2021-06-06T06:19:55.530Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.535Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.530Z
    2021-06-06T06:19:55.535Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.537Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.535Z
    2021-06-06T06:19:55.536Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.537Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.536Z
    2021-06-06T06:19:55.537Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.558Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.537Z
    2021-06-06T06:19:55.555Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1
    2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.562Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1076687858043648161), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1076687858043648161-5110828382996447229-2-0), senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.563Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.560Z
    2021-06-06T06:19:55.563Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.627Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.563Z
    2021-06-06T06:19:55.627Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.631Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), maySkipCheckpoint=false, fiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.627Z
    2021-06-06T06:19:55.629Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))])
checkpoint.flowState.frozenFiber.hash: 
    2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0
    998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.631Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.672Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5853419241128504420), payload=net.corda.node.services.statemachine.EndSessionMessage@75f45668), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.631Z
    2021-06-06T06:19:55.672Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@75f45668]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5853419241128504420)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.673Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5853419241128504420)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.672Z
    2021-06-06T06:19:55.673Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@75f45668], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5853419241128504420)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.673Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.692Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.673Z
    2021-06-06T06:19:55.677Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8097341539479889198, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.698Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.700Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.677Z
    2021-06-06T06:19:55.700Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[WARN ] 2021-06-06T06:19:55,723Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [c23f6d62-6b6c-4339-a853-55004aadb31f] error {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:19:55,725Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[WARN ] 2021-06-06T06:19:55,759Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [c23f6d62-6b6c-4339-a853-55004aadb31f] errored, dumping all transitions:

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.487Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=BCFD739AD0A28F770B928B262A525B054E543A23A6B515C65F7AA15F742FAE3E), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395])
    SignalFlowHasStarted(flowId=[c23f6d62-6b6c-4339-a853-55004aadb31f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1076687858043648161), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5853419241128504420), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1076687858043648161-5110828382996447229-0-0), senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.461Z
    2021-06-06T06:19:55.464Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1787b395]
    []


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.494Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.464Z
    2021-06-06T06:19:55.494Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.497Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.494Z
    2021-06-06T06:19:55.497Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.508Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), maySkipCheckpoint=false, fiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.497Z
    2021-06-06T06:19:55.504Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=BCFD739AD0A28F770B928B262A525B054E543A23A6B515C65F7AA15F742FAE3E)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.511Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.504Z
    2021-06-06T06:19:55.511Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.520Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.511Z
    2021-06-06T06:19:55.520Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.530Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.520Z
    2021-06-06T06:19:55.530Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.535Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.530Z
    2021-06-06T06:19:55.535Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.537Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.535Z
    2021-06-06T06:19:55.536Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.537Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.536Z
    2021-06-06T06:19:55.537Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.558Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.537Z
    2021-06-06T06:19:55.555Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    99B5C8220D7D703CA8E32E0E7F696050D8023F58384F6EA9698A81DE59E994A1
    2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.562Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1076687858043648161), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1076687858043648161-5110828382996447229-2-0), senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.563Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.560Z
    2021-06-06T06:19:55.563Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.627Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.563Z
    2021-06-06T06:19:55.627Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.631Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), maySkipCheckpoint=false, fiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5853419241128504420)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.627Z
    2021-06-06T06:19:55.629Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))])
checkpoint.flowState.frozenFiber.hash: 
    2A9F92EF0CBC649605C762FD487656DD0EEC5E62F696D759F02090DE3A7D4DD0
    998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.631Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.672Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5853419241128504420), payload=net.corda.node.services.statemachine.EndSessionMessage@75f45668), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.631Z
    2021-06-06T06:19:55.672Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@75f45668]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5853419241128504420)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.673Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5853419241128504420)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.672Z
    2021-06-06T06:19:55.673Z
checkpoint.checkpointState.sessions.SessionId(toLong=5853419241128504420): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@75f45668], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1076687858043648161), deduplicationSeed=D--1076687858043648161-5110828382996447229)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5853419241128504420)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.673Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.692Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.673Z
    2021-06-06T06:19:55.677Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8097341539479889198, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.698Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.700Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:19:55.677Z
    2021-06-06T06:19:55.700Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [c23f6d62-6b6c-4339-a853-55004aadb31f] ---
  Timestamp: 2021-06-06T06:19:55.745Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-8097341539479889198)], sessions=[], senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476)
    CreateTransaction
    RemoveCheckpoint(id=[c23f6d62-6b6c-4339-a853-55004aadb31f], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b])
    ReleaseSoftLocks(uuid=c23f6d62-6b6c-4339-a853-55004aadb31f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[c23f6d62-6b6c-4339-a853-55004aadb31f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-8097341539479889198, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Invocation, sessionId=d508224d-a66a-402f-8ece-76199a26abc3, timestamp: 2021-06-06T06:19:55.459Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@57684130, errorState=Errored(errors=[FlowError(errorId=-8097341539479889198, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@31079c37, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=7b984638-e4a2-4f79-ab58-de889c2b6476, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@39762fdb[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:19:55.700Z
    2021-06-06T06:19:55.724Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5853419241128504420))]), frozenFiber=998098C7B41307474F9976478A2B805E58C262066F4FFF05305D41BBF0B4919E)
    net.corda.node.services.statemachine.FlowState$Finished@57684130
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d1af64b]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
[WARN ] 2021-06-06T06:19:55,759Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [c23f6d62-6b6c-4339-a853-55004aadb31f] error {fiber-id=10000002, flow-id=c23f6d62-6b6c-4339-a853-55004aadb31f, invocation_id=d508224d-a66a-402f-8ece-76199a26abc3, invocation_timestamp=2021-06-06T06:19:55.459Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d508224d-a66a-402f-8ece-76199a26abc3, session_timestamp=2021-06-06T06:19:55.459Z, thread-id=242, tx_id=04054E53154C50C5DA302E60D465C2C90EBBCDB19538496D19C6BB923E086874}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:19:56,022Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:19:56,297Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:19:56,297Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:56,301Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:19:56,454Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:19:56,454Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:19:56,457Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:19:56,610Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:19:56,610Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:20:47,508Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:20:47,758Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:20:50,538Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:20:53,540Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:20:53,560Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:20:53,562Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:20:54,177Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:54,208Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:20:54,692Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:54,692Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:54,693Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:20:54,884Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:54,885Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:20:55,471Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:20:56,192Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:20:56,208Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:20:56,254Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:20:56,255Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:20:56,255Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:20:57,246Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:57,246Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:20:57,390Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:57,390Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:20:57,422Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:57,422Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:20:57,548Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:20:57,548Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:57,722Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:57,722Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:57,722Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:57,722Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:57,738Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:57,753Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:57,753Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:57,753Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:57,753Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:57,798Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:57,798Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:57,798Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:57,908Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:57,924Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:57,924Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:57,924Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:57,924Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,176Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,176Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,207Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,642Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,642Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,706Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:58,706Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,753Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,753Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,769Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:20:58,799Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,799Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:20:58,814Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,815Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:20:58,815Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,815Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:20:58,815Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,829Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,829Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:20:58,844Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,844Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:20:58,860Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,860Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,861Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:20:58,861Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,892Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:58,892Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,893Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:58,893Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,893Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,938Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,938Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,938Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,939Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:20:58,939Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,954Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:20:58,954Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:20:58,955Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,955Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:20:58,955Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,955Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:20:58,969Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:20:58,969Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:58,970Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:58,970Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:20:59,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:59,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:20:59,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:20:59,001Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:59,002Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:20:59,002Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:59,002Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:20:59,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:20:59,032Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:59,032Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:20:59,032Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:20:59,055Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:20:59,064Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:20:59,064Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:20:59,113Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:21:03,911Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062046.012-76869423D0D402E7\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:21:03,920Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:21:03,934Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:21:04,033Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:21:05,011Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:21:05,566Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:21:05,625Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:21:05,738Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:21:05,738Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:21:05,739Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:21:05,860Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:20:45.931Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:21:10,492Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:21:10,593Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:21:10,600Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:21:13,470Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:21:13,794Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:21:13,794Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:13,802Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:21:13,991Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:14,057Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:21:14,075Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:21:14,078Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:21:14,084Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:14,128Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:14,240Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:21:14,250Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:21:14,827Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:14,838Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:14,841Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:14,842Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:14,842Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:14,943Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062046.012-76869423D0D402E7\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:21:14,943Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:21:14,943Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:21:14,957Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:21:14,992Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:21:14,993Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:21:14,995Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:21:15,030Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:21:15,030Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:21:15,030Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:21:15,034Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:20:45.931Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:21:15,489Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:21:15,495Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:15,495Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:15,687Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:15,690Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:21:15,713Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:21:15,713Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,715Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:15,724Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,732Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:21:15,733Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:21:15,733Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:21:15,737Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,745Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:15,776Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:21:15,798Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,799Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:15,802Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:21:15,815Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,817Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:15,830Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,830Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:15,830Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:15,830Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:15,843Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062046.012-76869423D0D402E7\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:21:15,843Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:21:15,843Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:21:15,857Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062046.012-76869423D0D402E7/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:21:16,203Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:21:16,204Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:21:16,206Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:21:16,241Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:21:16,241Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:21:16,241Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:21:16,245Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:20:45.931Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:21:16,660Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:21:16,663Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:16,663Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:16,845Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:21:16,847Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:21:16,872Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:21:16,872Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:16,874Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:16,883Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:16,892Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:21:16,892Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:21:16,892Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:21:16,898Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:16,903Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:16,940Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:21:16,963Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:16,963Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960473794) {}
[INFO ] 2021-06-06T06:21:16,965Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:21:16,979Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:16,981Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:16,994Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960475713) {}
[INFO ] 2021-06-06T06:21:16,995Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:17,006Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:17,007Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:21:17,015Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:17,015Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:21:17,015Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960476872) {}
[INFO ] 2021-06-06T06:21:17,015Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:21:17,264Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242}
[WARN ] 2021-06-06T06:21:17,264Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242}
[INFO ] 2021-06-06T06:21:17,616Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:17,616Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:17,749Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:17,954Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,004Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,092Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,092Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=fbd78626-bda8-4df3-93c8-3e5878433789, invocation_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, invocation_timestamp=2021-06-06T06:21:17.049Z, origin=Only For Testing, session_id=3ec2191a-4956-4bb6-8d6c-f218593bcf65, session_timestamp=2021-06-06T06:21:17.049Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,119Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,124Z [Mock network] statemachine.StaffedFlowHospital. - Flow [01642216-c980-4653-9c27-48f58a49164a] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@5196fb7d, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@72af6cc6[Permits = 0]) {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[INFO ] 2021-06-06T06:21:18,126Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:21:18,135Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:21:18,170Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [01642216-c980-4653-9c27-48f58a49164a] errored, dumping all transitions:

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.921Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=02C28B07BDF41FCD0A5D1C247EBDA0B4066875EEF83C6B6C6B5A72CCD0778311), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c])
    SignalFlowHasStarted(flowId=[01642216-c980-4653-9c27-48f58a49164a])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7200192147244876573), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8162142822719869894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7200192147244876573-325235569120626741-0-0), senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.899Z
    2021-06-06T06:21:17.903Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.929Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.903Z
    2021-06-06T06:21:17.929Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.934Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.929Z
    2021-06-06T06:21:17.934Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.948Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), maySkipCheckpoint=false, fiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.934Z
    2021-06-06T06:21:17.943Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=02C28B07BDF41FCD0A5D1C247EBDA0B4066875EEF83C6B6C6B5A72CCD0778311)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED)
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.951Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.943Z
    2021-06-06T06:21:17.951Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.961Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.951Z
    2021-06-06T06:21:17.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.971Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.961Z
    2021-06-06T06:21:17.971Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.976Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.971Z
    2021-06-06T06:21:17.976Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.978Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.976Z
    2021-06-06T06:21:17.978Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.978Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.999Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.978Z
    2021-06-06T06:21:17.996Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED
    04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.003Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7200192147244876573), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7200192147244876573-325235569120626741-2-0), senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.003Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18Z
    2021-06-06T06:21:18.003Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.065Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.003Z
    2021-06-06T06:21:18.065Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.070Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), maySkipCheckpoint=false, fiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.065Z
    2021-06-06T06:21:18.068Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57
    D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))])
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.070Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.118Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8162142822719869894), payload=net.corda.node.services.statemachine.EndSessionMessage@363d092d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.070Z
    2021-06-06T06:21:18.118Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8162142822719869894)]
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@363d092d]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.118Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8162142822719869894)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8162142822719869894)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@363d092d], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.119Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.118Z
    2021-06-06T06:21:18.119Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.139Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.119Z
    2021-06-06T06:21:18.122Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1936818988068424750, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.143Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.145Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.122Z
    2021-06-06T06:21:18.145Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[WARN ] 2021-06-06T06:21:18,170Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [01642216-c980-4653-9c27-48f58a49164a] error {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:21:18,172Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[WARN ] 2021-06-06T06:21:18,208Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [01642216-c980-4653-9c27-48f58a49164a] errored, dumping all transitions:

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.921Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=02C28B07BDF41FCD0A5D1C247EBDA0B4066875EEF83C6B6C6B5A72CCD0778311), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c])
    SignalFlowHasStarted(flowId=[01642216-c980-4653-9c27-48f58a49164a])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7200192147244876573), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8162142822719869894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7200192147244876573-325235569120626741-0-0), senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.899Z
    2021-06-06T06:21:17.903Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f61f34c]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.929Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.903Z
    2021-06-06T06:21:17.929Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.934Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.929Z
    2021-06-06T06:21:17.934Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.948Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), maySkipCheckpoint=false, fiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.934Z
    2021-06-06T06:21:17.943Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=02C28B07BDF41FCD0A5D1C247EBDA0B4066875EEF83C6B6C6B5A72CCD0778311)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED)
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.951Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.943Z
    2021-06-06T06:21:17.951Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.961Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.951Z
    2021-06-06T06:21:17.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.971Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.961Z
    2021-06-06T06:21:17.971Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.976Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.971Z
    2021-06-06T06:21:17.976Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.978Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.976Z
    2021-06-06T06:21:17.978Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.978Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:17.999Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:17.978Z
    2021-06-06T06:21:17.996Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    77C04121521A7CF473E80983CBA69962CE0F3F555D228A76DBDA986D2D9426ED
    04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.003Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7200192147244876573), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--7200192147244876573-325235569120626741-2-0), senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.003Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18Z
    2021-06-06T06:21:18.003Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.065Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.003Z
    2021-06-06T06:21:18.065Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.070Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), maySkipCheckpoint=false, fiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8162142822719869894)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.065Z
    2021-06-06T06:21:18.068Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    04BE1CFC6C2CCE14D002BBFE07D113DCA8B8BF078CF076DAE4ABED1F8883FC57
    D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))])
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.070Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.118Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8162142822719869894), payload=net.corda.node.services.statemachine.EndSessionMessage@363d092d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.070Z
    2021-06-06T06:21:18.118Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8162142822719869894)]
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@363d092d]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.118Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8162142822719869894)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8162142822719869894)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-8162142822719869894): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@363d092d], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-7200192147244876573), deduplicationSeed=D--7200192147244876573-325235569120626741)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.119Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.118Z
    2021-06-06T06:21:18.119Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.139Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.119Z
    2021-06-06T06:21:18.122Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1936818988068424750, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.143Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.145Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:21:18.122Z
    2021-06-06T06:21:18.145Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [01642216-c980-4653-9c27-48f58a49164a] ---
  Timestamp: 2021-06-06T06:21:18.195Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1936818988068424750)], sessions=[], senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c)
    CreateTransaction
    RemoveCheckpoint(id=[01642216-c980-4653-9c27-48f58a49164a], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0])
    ReleaseSoftLocks(uuid=01642216-c980-4653-9c27-48f58a49164a)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[01642216-c980-4653-9c27-48f58a49164a], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1936818988068424750, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Invocation, sessionId=02cfddab-a0d2-4277-8db7-ce0ec1342c05, timestamp: 2021-06-06T06:21:17.898Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@f6ff807, errorState=Errored(errors=[FlowError(errorId=1936818988068424750, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@5196fb7d, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=c33864a6-c2dd-4a0f-b646-b1b414ad000c, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@72af6cc6[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:21:18.145Z
    2021-06-06T06:21:18.170Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8162142822719869894))]), frozenFiber=D8C575B184E44B24F9E623EFEBAA11A5A7A732F151275299A09D54CBE5260C39)
    net.corda.node.services.statemachine.FlowState$Finished@f6ff807
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5d5ddfd0]
    []
 {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
[WARN ] 2021-06-06T06:21:18,208Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [01642216-c980-4653-9c27-48f58a49164a] error {fiber-id=10000002, flow-id=01642216-c980-4653-9c27-48f58a49164a, invocation_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, invocation_timestamp=2021-06-06T06:21:17.898Z, origin=O=Mock Company 1, L=London, C=GB, session_id=02cfddab-a0d2-4277-8db7-ce0ec1342c05, session_timestamp=2021-06-06T06:21:17.898Z, thread-id=242, tx_id=4E9F325CC1CB0DEA0742842477AFF2A261E10FE8FDF7A982A431F366E8CBB7C9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:21:18,466Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:21:18,741Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:21:18,741Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:21:18,753Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:21:18,910Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:21:18,910Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:21:18,915Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:21:19,067Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:21:19,067Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:22:29,537Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:22:29,786Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:22:32,220Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:22:35,393Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:22:35,413Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:22:35,414Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:22:36,048Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:36,064Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:22:36,552Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:36,552Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:36,552Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:22:36,739Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:36,739Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:22:37,335Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:22:38,024Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:22:38,040Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:22:38,072Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:22:38,073Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:22:38,073Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:22:39,112Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:39,112Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:22:39,238Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:39,238Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:22:39,287Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:39,287Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:22:39,410Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:22:39,410Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:39,582Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:39,582Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:39,582Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:39,598Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:39,598Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:39,598Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:39,598Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:39,599Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:39,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:39,646Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:39,662Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:39,662Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:39,739Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:39,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:39,754Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:39,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:39,754Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,006Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,007Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,034Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,501Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,501Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,564Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:40,564Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,596Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,596Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:22:40,596Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,612Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:22:40,612Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,612Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:22:40,613Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,613Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,613Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:22:40,670Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,671Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:22:40,690Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,690Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:22:40,691Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,691Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:22:40,691Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,704Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,704Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:22:40,720Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,720Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:22:40,736Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,736Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,736Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:22:40,736Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,754Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:40,754Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,755Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:40,756Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,756Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,798Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,814Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,814Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,814Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:22:40,814Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,815Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:22:40,815Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:22:40,815Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,831Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:22:40,831Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,831Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:22:40,845Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,846Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:22:40,846Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,846Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,860Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:22:40,876Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,876Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:22:40,877Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,877Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:22:40,877Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,878Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:22:40,878Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,878Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:22:40,878Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:22:40,878Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,892Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:22:40,892Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,892Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:22:40,924Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:22:40,941Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:40,941Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:22:40,941Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:22:40,949Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:22:40,971Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:22:40,971Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:22:41,002Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:22:45,811Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062228.115-DFE789E26D85AFF3\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:22:45,821Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:22:45,835Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:22:45,941Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:22:47,054Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:22:47,619Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:22:47,690Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:22:47,823Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:22:47,824Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:22:47,824Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:22:47,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:22:28.033Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:22:53,000Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:22:53,139Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:22:53,146Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:22:56,311Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:22:56,651Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:22:56,651Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:56,657Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:22:56,840Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:56,899Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:22:56,913Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:22:56,915Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:22:56,923Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:56,958Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:57,071Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:22:57,081Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:22:57,608Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:57,619Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:57,623Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:57,623Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:57,623Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:57,642Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062228.115-DFE789E26D85AFF3\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:22:57,643Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:22:57,643Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:22:57,658Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:22:57,709Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:22:57,710Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:22:57,713Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:22:57,760Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:22:57,760Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:22:57,761Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:22:57,765Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:22:28.033Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:22:58,234Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:22:58,238Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:58,238Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:58,426Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:58,428Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:22:58,452Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:22:58,452Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,454Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:58,463Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,481Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:22:58,481Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:22:58,481Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:22:58,485Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,491Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:58,525Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:22:58,547Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,547Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:58,549Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:22:58,562Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,564Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:58,576Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,577Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:58,577Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:58,577Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:58,587Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062228.115-DFE789E26D85AFF3\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:22:58,588Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:22:58,588Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:22:58,601Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062228.115-DFE789E26D85AFF3/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:22:58,940Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:22:58,941Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:22:58,942Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:22:58,979Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:22:58,979Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:22:58,979Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:22:58,984Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:22:28.033Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:22:59,404Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:22:59,408Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:59,408Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:59,586Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:22:59,588Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:22:59,617Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:22:59,617Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,619Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:59,630Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,639Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:22:59,639Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:22:59,639Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:22:59,644Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,650Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:59,686Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:22:59,709Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,710Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960576651) {}
[INFO ] 2021-06-06T06:22:59,711Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:22:59,723Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,725Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:59,737Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960578452) {}
[INFO ] 2021-06-06T06:22:59,739Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:59,750Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,751Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:22:59,764Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,764Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:22:59,764Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960579617) {}
[INFO ] 2021-06-06T06:22:59,764Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:23:00,062Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242}
[WARN ] 2021-06-06T06:23:00,062Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242}
[INFO ] 2021-06-06T06:23:00,467Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,467Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,619Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,818Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,869Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,958Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,958Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6644df63-f610-4778-9cb3-43fc4d75a0d3, invocation_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, invocation_timestamp=2021-06-06T06:22:59.812Z, origin=Only For Testing, session_id=c866870b-f676-4f7a-9f7c-1410204a4d3a, session_timestamp=2021-06-06T06:22:59.812Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,983Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,987Z [Mock network] statemachine.StaffedFlowHospital. - Flow [4c352dee-1dc0-4188-981c-b146e51e9582] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@60da2278, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=602334b0-0664-471d-9d12-5df0990b2c62, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@cc3390a[Permits = 0]) {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[INFO ] 2021-06-06T06:23:00,990Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:23:00,997Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:23:01,028Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4c352dee-1dc0-4188-981c-b146e51e9582] errored, dumping all transitions:

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.791Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2269B1F9603DDBF4FD89F3D85FF6EF9A58562613B1353CD3B343FC28C648779C), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303])
    SignalFlowHasStarted(flowId=[4c352dee-1dc0-4188-981c-b146e51e9582])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8892163045444731629), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3025631925786924869), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8892163045444731629-1462946314014597746-0-0), senderUUID=602334b0-0664-471d-9d12-5df0990b2c62))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.767Z
    2021-06-06T06:23:00.771Z
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303]
    []


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.799Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.771Z
    2021-06-06T06:23:00.799Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.801Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.799Z
    2021-06-06T06:23:00.801Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.813Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), maySkipCheckpoint=false, fiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.801Z
    2021-06-06T06:23:00.809Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2269B1F9603DDBF4FD89F3D85FF6EF9A58562613B1353CD3B343FC28C648779C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.816Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.809Z
    2021-06-06T06:23:00.816Z
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.825Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.816Z
    2021-06-06T06:23:00.825Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.834Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.825Z
    2021-06-06T06:23:00.834Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.834Z
    2021-06-06T06:23:00.839Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.840Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.839Z
    2021-06-06T06:23:00.840Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.840Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.864Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.840Z
    2021-06-06T06:23:00.861Z
checkpoint.flowState.frozenFiber.hash: 
    084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13
    26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.869Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8892163045444731629), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8892163045444731629-1462946314014597746-2-0), senderUUID=602334b0-0664-471d-9d12-5df0990b2c62))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.869Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.866Z
    2021-06-06T06:23:00.869Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.937Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.869Z
    2021-06-06T06:23:00.937Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.942Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), maySkipCheckpoint=false, fiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.937Z
    2021-06-06T06:23:00.940Z
checkpoint.flowState.frozenFiber.hash: 
    26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E
    B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.943Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.982Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3025631925786924869), payload=net.corda.node.services.statemachine.EndSessionMessage@36faa307), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.943Z
    2021-06-06T06:23:00.981Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=3025631925786924869)]
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@36faa307]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.982Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3025631925786924869)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.981Z
    2021-06-06T06:23:00.982Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=3025631925786924869)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@36faa307], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.983Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.982Z
    2021-06-06T06:23:00.983Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.983Z
    2021-06-06T06:23:00.986Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-438420176401526269, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01.008Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01.009Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.986Z
    2021-06-06T06:23:01.009Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[WARN ] 2021-06-06T06:23:01,028Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4c352dee-1dc0-4188-981c-b146e51e9582] error {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:23:01,030Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[WARN ] 2021-06-06T06:23:01,059Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4c352dee-1dc0-4188-981c-b146e51e9582] errored, dumping all transitions:

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.791Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2269B1F9603DDBF4FD89F3D85FF6EF9A58562613B1353CD3B343FC28C648779C), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303])
    SignalFlowHasStarted(flowId=[4c352dee-1dc0-4188-981c-b146e51e9582])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8892163045444731629), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3025631925786924869), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8892163045444731629-1462946314014597746-0-0), senderUUID=602334b0-0664-471d-9d12-5df0990b2c62))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.767Z
    2021-06-06T06:23:00.771Z
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@a991303]
    []


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.799Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.771Z
    2021-06-06T06:23:00.799Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.801Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.799Z
    2021-06-06T06:23:00.801Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.813Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), maySkipCheckpoint=false, fiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.801Z
    2021-06-06T06:23:00.809Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2269B1F9603DDBF4FD89F3D85FF6EF9A58562613B1353CD3B343FC28C648779C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.816Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.809Z
    2021-06-06T06:23:00.816Z
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.825Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.816Z
    2021-06-06T06:23:00.825Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.834Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.825Z
    2021-06-06T06:23:00.834Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.834Z
    2021-06-06T06:23:00.839Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.840Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.839Z
    2021-06-06T06:23:00.840Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.840Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.864Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.840Z
    2021-06-06T06:23:00.861Z
checkpoint.flowState.frozenFiber.hash: 
    084324EE4063F19DA623B0B8A4CC1C41E09D398B5D3C594C21D3262E89AE9E13
    26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.869Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8892163045444731629), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8892163045444731629-1462946314014597746-2-0), senderUUID=602334b0-0664-471d-9d12-5df0990b2c62))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.869Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.866Z
    2021-06-06T06:23:00.869Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.937Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.869Z
    2021-06-06T06:23:00.937Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.942Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), maySkipCheckpoint=false, fiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3025631925786924869)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.937Z
    2021-06-06T06:23:00.940Z
checkpoint.flowState.frozenFiber.hash: 
    26048A00F33F0CA08028CA2687D4F2C9A3BACFD1B69C70A364169097907F445E
    B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.943Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.982Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3025631925786924869), payload=net.corda.node.services.statemachine.EndSessionMessage@36faa307), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.943Z
    2021-06-06T06:23:00.981Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=3025631925786924869)]
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@36faa307]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.982Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3025631925786924869)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.981Z
    2021-06-06T06:23:00.982Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=3025631925786924869)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=3025631925786924869): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@36faa307], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=8892163045444731629), deduplicationSeed=D-8892163045444731629-1462946314014597746)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:00.983Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.982Z
    2021-06-06T06:23:00.983Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)]


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.983Z
    2021-06-06T06:23:00.986Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-438420176401526269, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01.008Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01.009Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:00.986Z
    2021-06-06T06:23:01.009Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4c352dee-1dc0-4188-981c-b146e51e9582] ---
  Timestamp: 2021-06-06T06:23:01.049Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-438420176401526269)], sessions=[], senderUUID=602334b0-0664-471d-9d12-5df0990b2c62)
    CreateTransaction
    RemoveCheckpoint(id=[4c352dee-1dc0-4188-981c-b146e51e9582], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914])
    ReleaseSoftLocks(uuid=4c352dee-1dc0-4188-981c-b146e51e9582)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[4c352dee-1dc0-4188-981c-b146e51e9582], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-438420176401526269, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Invocation, sessionId=39f890ed-65b3-42c0-b11e-fae94e1068c0, timestamp: 2021-06-06T06:23:00.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=0E0A3C527F3300405DC8B7EFEFD9599E3317EB3FAE782390E8F57C1AE5011A86), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@6a6c3219, errorState=Errored(errors=[FlowError(errorId=-438420176401526269, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@60da2278, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=602334b0-0664-471d-9d12-5df0990b2c62, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@cc3390a[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:23:01.009Z
    2021-06-06T06:23:01.029Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3025631925786924869))]), frozenFiber=B061352CE446E3D45EBC7D3A406BE34548C4C2C93F3F2580913EEBA7BCA564E0)
    net.corda.node.services.statemachine.FlowState$Finished@6a6c3219
checkpoint.checkpointState.numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@20da8914]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
[WARN ] 2021-06-06T06:23:01,059Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4c352dee-1dc0-4188-981c-b146e51e9582] error {fiber-id=10000002, flow-id=4c352dee-1dc0-4188-981c-b146e51e9582, invocation_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, invocation_timestamp=2021-06-06T06:23:00.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=39f890ed-65b3-42c0-b11e-fae94e1068c0, session_timestamp=2021-06-06T06:23:00.766Z, thread-id=242, tx_id=49BAC1A4DA078C98505102A9D4E3A2C6A32A8381B386E9A806428DD2A35D6A8B}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:23:31,331Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:23:31,635Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:23:31,635Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:23:31,640Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:23:31,776Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:23:31,776Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:23:31,778Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:23:31,914Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:23:31,914Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:24:27,119Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:24:27,387Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:24:30,180Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:24:33,312Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:24:33,333Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:24:33,335Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:24:33,953Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:33,969Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:24:34,441Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:34,457Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:34,457Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:24:34,645Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:34,661Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:24:35,265Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:24:35,969Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:24:35,986Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:24:36,016Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:24:36,032Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:24:36,033Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:24:36,977Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:36,978Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:24:37,119Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:37,119Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:24:37,150Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:37,150Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:24:37,275Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:24:37,275Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:37,446Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:37,446Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:37,446Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:37,446Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:37,462Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:37,477Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:37,477Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:37,477Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:37,477Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:37,523Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:37,523Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:37,523Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:37,617Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:37,617Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:37,617Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:37,617Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:37,617Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:24:37,870Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:37,870Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:24:37,901Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,360Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:24:38,360Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,407Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:38,407Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:24:38,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,455Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,472Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:24:38,517Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,517Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:24:38,517Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,517Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:24:38,517Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,518Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:24:38,518Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,533Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,533Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:24:38,549Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,549Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:24:38,563Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,579Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:24:38,639Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,639Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:24:38,639Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,640Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:24:38,640Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:24:38,656Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:24:38,656Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,656Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:24:38,656Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,670Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:24:38,686Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,686Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:24:38,686Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,686Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,687Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:24:38,701Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,702Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,703Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:24:38,765Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:38,765Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:24:41,177Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:24:41,177Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:41,177Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:24:41,177Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:24:41,198Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:24:41,223Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:24:41,223Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:24:41,256Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:24:46,778Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062425.637-D78B349559065A48\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:24:46,787Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:24:46,802Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:24:46,936Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:24:48,115Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:24:48,788Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:24:48,869Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:24:49,000Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:24:49,001Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:24:49,003Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:24:49,150Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:24:25.560Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:24:54,746Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:24:54,847Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:24:54,853Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:24:58,129Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:24:58,532Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:24:58,532Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:58,544Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:24:58,780Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:58,868Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:24:58,890Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:24:58,895Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:24:58,913Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:58,965Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:24:59,113Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:24:59,128Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:24:59,740Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:59,751Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:59,756Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:24:59,757Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:24:59,757Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:24:59,778Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062425.637-D78B349559065A48\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:24:59,780Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:24:59,780Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:24:59,801Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:24:59,846Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:24:59,847Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:24:59,849Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:24:59,896Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:24:59,896Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:24:59,896Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:24:59,900Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:24:25.560Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:25:00,402Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:25:00,408Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:00,408Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:00,633Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:00,635Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:25:00,658Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:25:00,658Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:00,659Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:00,668Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:00,676Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:25:00,677Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:25:00,677Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:25:00,681Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:00,687Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:25:00,720Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:25:00,745Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:00,746Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:25:00,748Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:25:01,059Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:01,061Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:01,075Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:01,075Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:25:01,076Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:01,076Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:25:01,088Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062425.637-D78B349559065A48\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:25:01,089Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:25:01,089Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:25:01,101Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062425.637-D78B349559065A48/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:25:01,132Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:25:01,133Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:25:01,134Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:25:01,168Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:25:01,168Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:25:01,168Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:25:01,173Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:24:25.560Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:25:01,571Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:25:01,574Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:01,575Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:01,732Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:25:01,736Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:25:01,764Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:25:01,764Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,766Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:01,777Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,786Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:25:01,786Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:25:01,786Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:25:01,791Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,798Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:25:01,850Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:25:01,876Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,876Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960698532) {}
[INFO ] 2021-06-06T06:25:01,878Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:25:01,891Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,892Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:01,906Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960700658) {}
[INFO ] 2021-06-06T06:25:01,907Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:01,920Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,922Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:25:01,933Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,933Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:25:01,934Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960701764) {}
[INFO ] 2021-06-06T06:25:01,934Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:25:02,185Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246}
[WARN ] 2021-06-06T06:25:02,185Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246}
[INFO ] 2021-06-06T06:25:02,564Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:02,564Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:02,715Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:02,945Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:02,999Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:03,118Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:03,118Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=61cd6064-d845-44c6-abb0-822e95e0c4d6, invocation_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, invocation_timestamp=2021-06-06T06:25:01.972Z, origin=Only For Testing, session_id=6fe592c9-c20b-4395-b0bb-8605ba5229a4, session_timestamp=2021-06-06T06:25:01.972Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:03,144Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:03,149Z [Mock network] statemachine.StaffedFlowHospital. - Flow [5fd83087-1137-499c-a516-0c5d671ef375] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@7e7e99a0, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@739adbd1[Permits = 0]) {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[INFO ] 2021-06-06T06:25:03,153Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:25:03,160Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:25:03,199Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fd83087-1137-499c-a516-0c5d671ef375] errored, dumping all transitions:

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.917Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0D8EE424F2E19C86C07A9F46937B3A65124880F0E439E08E8DB6FA661CB47442), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9])
    SignalFlowHasStarted(flowId=[5fd83087-1137-499c-a516-0c5d671ef375])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7276437181544864169), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8540387776284074482), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7276437181544864169-4477464274934542975-0-0), senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.895Z
    2021-06-06T06:25:02.899Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.924Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.899Z
    2021-06-06T06:25:02.924Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.927Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.924Z
    2021-06-06T06:25:02.927Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.939Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), maySkipCheckpoint=false, fiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.927Z
    2021-06-06T06:25:02.934Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0D8EE424F2E19C86C07A9F46937B3A65124880F0E439E08E8DB6FA661CB47442)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.943Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.934Z
    2021-06-06T06:25:02.942Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.951Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.942Z
    2021-06-06T06:25:02.951Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.961Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.951Z
    2021-06-06T06:25:02.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.966Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.961Z
    2021-06-06T06:25:02.966Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.967Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.966Z
    2021-06-06T06:25:02.967Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.968Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.967Z
    2021-06-06T06:25:02.968Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.993Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.968Z
    2021-06-06T06:25:02.990Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962
    C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.999Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7276437181544864169), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7276437181544864169-4477464274934542975-2-0), senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.999Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.995Z
    2021-06-06T06:25:02.999Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.096Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.999Z
    2021-06-06T06:25:03.096Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.102Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), maySkipCheckpoint=false, fiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.096Z
    2021-06-06T06:25:03.099Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))])
checkpoint.flowState.frozenFiber.hash: 
    C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7
    0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.102Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.143Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8540387776284074482), payload=net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.102Z
    2021-06-06T06:25:03.143Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8540387776284074482)]
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.144Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8540387776284074482)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.143Z
    2021-06-06T06:25:03.144Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8540387776284074482)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.144Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.163Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.144Z
    2021-06-06T06:25:03.148Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7110245007883132927, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.168Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.171Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.148Z
    2021-06-06T06:25:03.170Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[WARN ] 2021-06-06T06:25:03,199Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fd83087-1137-499c-a516-0c5d671ef375] error {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:25:03,200Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[WARN ] 2021-06-06T06:25:03,233Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fd83087-1137-499c-a516-0c5d671ef375] errored, dumping all transitions:

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.917Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=0D8EE424F2E19C86C07A9F46937B3A65124880F0E439E08E8DB6FA661CB47442), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9])
    SignalFlowHasStarted(flowId=[5fd83087-1137-499c-a516-0c5d671ef375])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7276437181544864169), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8540387776284074482), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7276437181544864169-4477464274934542975-0-0), senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.895Z
    2021-06-06T06:25:02.899Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@78d008c9]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.924Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.899Z
    2021-06-06T06:25:02.924Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.927Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.924Z
    2021-06-06T06:25:02.927Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.939Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), maySkipCheckpoint=false, fiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.927Z
    2021-06-06T06:25:02.934Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=0D8EE424F2E19C86C07A9F46937B3A65124880F0E439E08E8DB6FA661CB47442)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.943Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.934Z
    2021-06-06T06:25:02.942Z
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.951Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.942Z
    2021-06-06T06:25:02.951Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.961Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.951Z
    2021-06-06T06:25:02.961Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.966Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.961Z
    2021-06-06T06:25:02.966Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.967Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.966Z
    2021-06-06T06:25:02.967Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.968Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.967Z
    2021-06-06T06:25:02.968Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.993Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.968Z
    2021-06-06T06:25:02.990Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    E0DE52FDF9B3F2F7F67026088A44D179E32CA270C41252A18E0EBF1CD44BE962
    C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.999Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7276437181544864169), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7276437181544864169-4477464274934542975-2-0), senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:02.999Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.995Z
    2021-06-06T06:25:02.999Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.096Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:02.999Z
    2021-06-06T06:25:03.096Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.102Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), maySkipCheckpoint=false, fiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8540387776284074482)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.096Z
    2021-06-06T06:25:03.099Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))])
checkpoint.flowState.frozenFiber.hash: 
    C683AC02181BAD0B3E33D8D84922BAE6878667A7A6B9412A1F62912DF2B46ED7
    0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.102Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.143Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8540387776284074482), payload=net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.102Z
    2021-06-06T06:25:03.143Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-8540387776284074482)]
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.144Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8540387776284074482)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.143Z
    2021-06-06T06:25:03.144Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-8540387776284074482)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-8540387776284074482): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@5c7d4cb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7276437181544864169), deduplicationSeed=D-7276437181544864169-4477464274934542975)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.144Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.163Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.144Z
    2021-06-06T06:25:03.148Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7110245007883132927, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.168Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.171Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.148Z
    2021-06-06T06:25:03.170Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5fd83087-1137-499c-a516-0c5d671ef375] ---
  Timestamp: 2021-06-06T06:25:03.223Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7110245007883132927)], sessions=[], senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a)
    CreateTransaction
    RemoveCheckpoint(id=[5fd83087-1137-499c-a516-0c5d671ef375], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a])
    ReleaseSoftLocks(uuid=5fd83087-1137-499c-a516-0c5d671ef375)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[5fd83087-1137-499c-a516-0c5d671ef375], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7110245007883132927, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Invocation, sessionId=81d51a02-5ff3-41db-a344-3f55595d909e, timestamp: 2021-06-06T06:25:02.894Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@17af21f0, errorState=Errored(errors=[FlowError(errorId=7110245007883132927, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@7e7e99a0, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=af588078-5af4-480b-8b89-ceeca20f7a7a, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@739adbd1[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:25:03.170Z
    2021-06-06T06:25:03.199Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8540387776284074482))]), frozenFiber=0AB82BD0A849459E6E08662D44D0E5EF993A8FEC987ED1CEFEFB87AA0717AF9D)
    net.corda.node.services.statemachine.FlowState$Finished@17af21f0
checkpoint.checkpointState.numberOfCommits: 
    4
    5
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@e04579a]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
[WARN ] 2021-06-06T06:25:03,234Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fd83087-1137-499c-a516-0c5d671ef375] error {fiber-id=10000002, flow-id=5fd83087-1137-499c-a516-0c5d671ef375, invocation_id=81d51a02-5ff3-41db-a344-3f55595d909e, invocation_timestamp=2021-06-06T06:25:02.894Z, origin=O=Mock Company 1, L=London, C=GB, session_id=81d51a02-5ff3-41db-a344-3f55595d909e, session_timestamp=2021-06-06T06:25:02.894Z, thread-id=246, tx_id=DF09E6B1589EC1048DA85DBE061EF0051B6D64D6ADB9E919BE5AE5AF61F881AF}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:25:33,523Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=1d2c0e3d-f32a-4626-947a-a548a80ebeb7, invocation_id=499d146e-e5fe-4358-b62e-22364419ec17, invocation_timestamp=2021-06-06T06:25:33.506Z, origin=Only For Testing, session_id=499d146e-e5fe-4358-b62e-22364419ec17, session_timestamp=2021-06-06T06:25:33.506Z, thread-id=246}
[INFO ] 2021-06-06T06:25:33,555Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:25:33,910Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:25:33,910Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:25:33,914Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:25:34,052Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:25:34,052Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:25:34,054Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:25:34,203Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:25:34,203Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:26:32,911Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:26:33,167Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:26:35,935Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:26:38,856Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:26:38,875Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:26:38,877Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:26:39,502Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:39,532Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:26:39,999Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:39,999Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:40,000Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:26:40,175Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:40,175Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:26:40,789Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:26:41,462Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:26:41,478Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:26:41,510Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:26:41,511Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:26:41,528Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:26:42,552Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:42,552Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:26:42,691Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:42,691Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:26:42,722Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:42,722Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:26:42,831Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:26:42,831Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:43,002Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:43,018Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:43,018Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:43,018Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:43,018Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:43,035Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:43,035Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:43,035Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:43,050Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:43,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,097Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:43,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,189Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:43,189Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,189Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:43,189Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,190Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:26:43,469Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,469Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:26:43,517Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:43,954Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:26:43,954Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,017Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:44,018Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,064Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,064Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:26:44,064Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,064Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:26:44,065Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,065Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:26:44,065Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,065Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,080Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:26:44,127Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:26:44,128Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,144Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,144Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:26:44,159Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,159Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:26:44,160Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,175Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,175Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:26:44,175Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,176Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:44,191Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,191Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:44,191Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,191Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:26:44,236Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,236Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:26:44,236Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,236Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:26:44,236Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,252Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:26:44,252Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:26:44,252Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:26:44,267Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,268Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,268Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:26:44,298Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,298Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:26:44,298Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,299Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:26:44,313Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,313Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:26:44,345Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:26:44,345Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:44,345Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:26:44,345Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:26:44,367Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:26:44,377Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:26:44,377Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:26:44,408Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:26:49,966Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062631.279-E719B608F4CE4CDB\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:26:49,974Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:26:49,988Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:26:50,100Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:26:51,281Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:26:51,864Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:26:51,945Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:26:52,088Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:26:52,089Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:26:52,089Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:26:52,232Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:26:31.191Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:26:57,205Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:26:57,306Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:26:57,311Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:27:00,248Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:27:00,593Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:27:00,594Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:00,602Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:27:00,797Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:00,864Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:27:00,885Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:27:00,888Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:27:00,894Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:00,929Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:01,047Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:27:01,058Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:27:01,586Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:01,600Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:01,604Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:01,604Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:01,604Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:01,620Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062631.279-E719B608F4CE4CDB\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:27:01,621Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:27:01,621Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:27:01,638Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:27:01,684Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:27:01,685Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:27:01,686Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:27:01,742Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:27:01,742Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:27:01,742Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:27:01,747Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:26:31.191Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:27:02,241Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:27:02,245Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:02,245Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:02,445Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:02,448Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:27:02,483Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:27:02,483Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,485Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:02,501Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,511Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:27:02,511Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:27:02,512Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:27:02,521Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,528Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:02,572Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:27:02,596Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,596Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:02,598Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:27:02,921Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,924Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:02,939Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,940Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:02,940Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:02,940Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:02,956Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062631.279-E719B608F4CE4CDB\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:27:02,957Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:27:02,957Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:27:02,970Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062631.279-E719B608F4CE4CDB/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:27:03,007Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:27:03,008Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:27:03,009Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:27:03,046Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:27:03,046Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:27:03,046Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:27:03,051Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:26:31.191Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:27:03,498Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:27:03,502Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:03,502Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:03,674Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:27:03,677Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:27:03,706Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:27:03,706Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,709Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:03,719Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,728Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:27:03,729Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:27:03,729Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:27:03,734Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,743Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:03,780Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:27:03,805Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,805Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960820593) {}
[INFO ] 2021-06-06T06:27:03,807Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:27:03,822Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,824Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:03,841Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960822483) {}
[INFO ] 2021-06-06T06:27:03,842Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:03,857Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,859Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:27:03,875Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,875Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:27:03,876Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960823706) {}
[INFO ] 2021-06-06T06:27:03,876Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:27:04,153Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244}
[WARN ] 2021-06-06T06:27:04,153Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244}
[INFO ] 2021-06-06T06:27:04,528Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,528Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,660Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,862Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,911Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,975Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:04,975Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e3a8da32-f3ab-4877-a0bb-2687f486058b, invocation_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, invocation_timestamp=2021-06-06T06:27:03.925Z, origin=Only For Testing, session_id=f310c5fc-4572-4cfa-ad84-26a982b641a1, session_timestamp=2021-06-06T06:27:03.925Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:05,001Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:05,006Z [Mock network] statemachine.StaffedFlowHospital. - Flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@287af595, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@769eeeec[Permits = 0]) {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[INFO ] 2021-06-06T06:27:05,008Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:27:05,017Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:27:05,051Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] errored, dumping all transitions:

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.837Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2DA2E229D20F5051F338E3CB0DC83EC59809D7E34E2F4ED027D87B05C598D983), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3])
    SignalFlowHasStarted(flowId=[4ed26a4b-cb55-451c-898b-7a0c17254ff2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6199234632615454138), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1214153444201144244), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6199234632615454138--5523103551756370833-0-0), senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.814Z
    2021-06-06T06:27:04.818Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.844Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.818Z
    2021-06-06T06:27:04.844Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.847Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.844Z
    2021-06-06T06:27:04.847Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.857Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), maySkipCheckpoint=false, fiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.847Z
    2021-06-06T06:27:04.853Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2DA2E229D20F5051F338E3CB0DC83EC59809D7E34E2F4ED027D87B05C598D983)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.860Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.853Z
    2021-06-06T06:27:04.860Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.868Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.860Z
    2021-06-06T06:27:04.868Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.877Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.868Z
    2021-06-06T06:27:04.877Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.882Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.877Z
    2021-06-06T06:27:04.881Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.883Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.881Z
    2021-06-06T06:27:04.883Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.884Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.883Z
    2021-06-06T06:27:04.884Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.905Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.884Z
    2021-06-06T06:27:04.902Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3
    2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.910Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6199234632615454138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6199234632615454138--5523103551756370833-2-0), senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.910Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.907Z
    2021-06-06T06:27:04.910Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.953Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.910Z
    2021-06-06T06:27:04.953Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.958Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), maySkipCheckpoint=false, fiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.953Z
    2021-06-06T06:27:04.956Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))])
checkpoint.flowState.frozenFiber.hash: 
    2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB
    5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.958Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1214153444201144244), payload=net.corda.node.services.statemachine.EndSessionMessage@564ff94f), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.958Z
    2021-06-06T06:27:05Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@564ff94f]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-1214153444201144244)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.001Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1214153444201144244)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@564ff94f], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-1214153444201144244)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.001Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05Z
    2021-06-06T06:27:05.001Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.021Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05.001Z
    2021-06-06T06:27:05.004Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4081350443419448113, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.026Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.028Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05.004Z
    2021-06-06T06:27:05.028Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[WARN ] 2021-06-06T06:27:05,051Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] error {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:27:05,052Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[WARN ] 2021-06-06T06:27:05,087Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] errored, dumping all transitions:

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.837Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2DA2E229D20F5051F338E3CB0DC83EC59809D7E34E2F4ED027D87B05C598D983), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3])
    SignalFlowHasStarted(flowId=[4ed26a4b-cb55-451c-898b-7a0c17254ff2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6199234632615454138), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1214153444201144244), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6199234632615454138--5523103551756370833-0-0), senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.814Z
    2021-06-06T06:27:04.818Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@ce19bf3]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.844Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.818Z
    2021-06-06T06:27:04.844Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.847Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.844Z
    2021-06-06T06:27:04.847Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.857Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), maySkipCheckpoint=false, fiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.847Z
    2021-06-06T06:27:04.853Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2DA2E229D20F5051F338E3CB0DC83EC59809D7E34E2F4ED027D87B05C598D983)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.860Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.853Z
    2021-06-06T06:27:04.860Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.868Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.860Z
    2021-06-06T06:27:04.868Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.877Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.868Z
    2021-06-06T06:27:04.877Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.882Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.877Z
    2021-06-06T06:27:04.881Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.883Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.881Z
    2021-06-06T06:27:04.883Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.884Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.883Z
    2021-06-06T06:27:04.884Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.905Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.884Z
    2021-06-06T06:27:04.902Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CCFD382AA5596BA97E8962133F0131B6EB39B37AC8BA6E80153A3F6BBF5D04B3
    2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.910Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6199234632615454138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6199234632615454138--5523103551756370833-2-0), senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.910Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.907Z
    2021-06-06T06:27:04.910Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.953Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.910Z
    2021-06-06T06:27:04.953Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.958Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), maySkipCheckpoint=false, fiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1214153444201144244)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.953Z
    2021-06-06T06:27:04.956Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))])
checkpoint.flowState.frozenFiber.hash: 
    2B3AF4FDDFBFF640892C9417D9A80488FF7C545F2CE60D44E5F646F089A8D9FB
    5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:04.958Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1214153444201144244), payload=net.corda.node.services.statemachine.EndSessionMessage@564ff94f), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:04.958Z
    2021-06-06T06:27:05Z
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@564ff94f]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-1214153444201144244)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.001Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1214153444201144244)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessions.SessionId(toLong=-1214153444201144244): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@564ff94f], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-6199234632615454138), deduplicationSeed=D--6199234632615454138--5523103551756370833)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-1214153444201144244)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.001Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05Z
    2021-06-06T06:27:05.001Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.021Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05.001Z
    2021-06-06T06:27:05.004Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4081350443419448113, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.026Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.028Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05.004Z
    2021-06-06T06:27:05.028Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] ---
  Timestamp: 2021-06-06T06:27:05.075Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4081350443419448113)], sessions=[], senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1)
    CreateTransaction
    RemoveCheckpoint(id=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea])
    ReleaseSoftLocks(uuid=4ed26a4b-cb55-451c-898b-7a0c17254ff2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[4ed26a4b-cb55-451c-898b-7a0c17254ff2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4081350443419448113, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Invocation, sessionId=35536d9d-2b16-460e-9093-f59e1c110358, timestamp: 2021-06-06T06:27:04.813Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@61e5021f, errorState=Errored(errors=[FlowError(errorId=4081350443419448113, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@287af595, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=ac2731de-77f6-4b9e-8608-a4790617a8b1, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@769eeeec[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:27:05.028Z
    2021-06-06T06:27:05.051Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1214153444201144244))]), frozenFiber=5BFA694742ACCF04DBD48C90DC210FA38FF7892351769C116304C379788EA222)
    net.corda.node.services.statemachine.FlowState$Finished@61e5021f
checkpoint.checkpointState.numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56c549ea]
    []
 {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
[WARN ] 2021-06-06T06:27:05,087Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4ed26a4b-cb55-451c-898b-7a0c17254ff2] error {fiber-id=10000002, flow-id=4ed26a4b-cb55-451c-898b-7a0c17254ff2, invocation_id=35536d9d-2b16-460e-9093-f59e1c110358, invocation_timestamp=2021-06-06T06:27:04.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=35536d9d-2b16-460e-9093-f59e1c110358, session_timestamp=2021-06-06T06:27:04.813Z, thread-id=244, tx_id=F0A413FD4AFAA46BBD9F00DA011ABE37EA3C3C9CBE64496C26CF0ABA6BB0140C}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:27:35,406Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:27:35,696Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:27:35,696Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:27:35,702Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:27:35,860Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:27:35,860Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:27:35,862Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:27:35,995Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:27:35,995Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:28:21,339Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:28:21,588Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:28:24,350Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:28:27,300Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:28:27,320Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:28:27,321Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:28:27,938Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:27,969Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:28:28,421Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:28,421Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:28,421Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:28:28,609Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:28,625Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:28:29,186Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:28:29,890Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:28:29,890Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:28:29,938Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:28:29,938Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:28:29,938Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:28:30,926Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:30,926Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:28:31,054Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:31,054Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:28:31,086Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:31,086Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:28:31,194Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:28:31,194Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:31,367Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:31,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:31,384Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:31,398Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:31,429Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:31,444Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:31,444Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:31,521Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:31,521Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:31,522Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:31,522Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:31,522Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:28:31,770Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:31,771Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:28:31,818Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,225Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:28:32,225Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,289Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:32,289Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:28:32,321Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,322Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,340Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:28:32,383Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,398Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,399Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:28:32,414Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,414Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:28:32,429Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,429Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,429Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:28:32,429Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,429Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:32,445Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,445Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:32,446Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,446Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:28:32,491Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:28:32,510Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,510Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:28:32,523Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,523Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:28:32,525Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,526Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:28:32,526Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,526Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,526Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:28:32,554Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,555Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:28:32,571Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,571Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:28:32,601Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:28:32,601Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:32,601Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:28:32,601Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:28:32,624Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:28:32,633Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:28:32,633Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:28:32,680Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:28:37,864Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062819.905-5946B02C2252C672\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:28:37,875Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:28:37,891Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:28:38,009Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:28:39,057Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:28:39,631Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:28:39,697Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:28:39,815Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:28:39,816Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:28:39,816Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:28:39,942Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:28:19.833Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:28:44,947Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:28:45,048Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:28:45,055Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:28:48,178Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:28:48,530Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:28:48,530Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:48,537Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:28:48,768Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:48,839Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:28:48,854Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:28:48,857Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:28:48,864Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:48,912Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:49,025Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:28:49,035Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:28:49,649Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:49,664Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:49,668Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:49,668Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:49,668Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:49,690Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062819.905-5946B02C2252C672\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:28:49,693Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:28:49,693Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:28:49,713Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:28:49,765Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:28:49,766Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:28:49,768Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:28:49,812Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:28:49,812Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:28:49,812Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:28:49,817Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:28:19.833Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:28:50,407Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:28:50,412Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:50,412Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:50,606Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:50,608Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:28:50,632Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:28:50,632Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:50,634Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:50,645Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:50,652Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:28:50,653Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:28:50,653Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:28:50,658Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:50,664Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:50,701Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:28:50,729Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:50,729Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:50,731Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:28:51,059Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:51,061Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:51,076Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:51,076Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:51,076Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:51,076Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:51,087Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062819.905-5946B02C2252C672\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:28:51,088Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:28:51,088Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:28:51,100Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062819.905-5946B02C2252C672/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:28:51,135Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:28:51,136Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:28:51,137Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:28:51,169Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:28:51,169Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:28:51,169Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:28:51,174Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:28:19.833Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:28:51,578Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:28:51,581Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:51,582Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:51,745Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:28:51,747Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:28:51,776Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:28:51,777Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,780Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:51,790Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,798Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:28:51,798Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:28:51,798Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:28:51,802Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,809Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:51,844Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:28:51,865Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,865Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960928530) {}
[INFO ] 2021-06-06T06:28:51,867Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:28:51,878Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,880Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:51,890Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960930632) {}
[INFO ] 2021-06-06T06:28:51,891Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:51,900Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,902Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:28:51,910Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,910Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:28:51,910Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960931777) {}
[INFO ] 2021-06-06T06:28:51,910Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:28:52,269Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242}
[WARN ] 2021-06-06T06:28:52,269Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242}
[INFO ] 2021-06-06T06:28:52,654Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:52,655Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:52,813Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,043Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,094Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,190Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,190Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8a9d70d-0adc-456d-a8a1-0eba7003e373, invocation_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, invocation_timestamp=2021-06-06T06:28:51.974Z, origin=Only For Testing, session_id=288f8ad2-e5c2-4ad5-b719-3dff8b3eabca, session_timestamp=2021-06-06T06:28:51.974Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,218Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,223Z [Mock network] statemachine.StaffedFlowHospital. - Flow [7de3305b-cb27-4784-9fc3-cd41988ed756] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@22e45db, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@2d6ff5fd[Permits = 0]) {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[INFO ] 2021-06-06T06:28:53,226Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:28:53,234Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:28:53,272Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [7de3305b-cb27-4784-9fc3-cd41988ed756] errored, dumping all transitions:

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.012Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=83DA2DF89F0CC597C2B4F259E5984E35D3BECD294B9EB87EE9B0BC08F1AA31F5), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11])
    SignalFlowHasStarted(flowId=[7de3305b-cb27-4784-9fc3-cd41988ed756])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-53674854040799766), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5673615988992768759), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--53674854040799766-2545440356711928136-0-0), senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:28:52.992Z
    2021-06-06T06:28:52.996Z
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.019Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:52.996Z
    2021-06-06T06:28:53.019Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.023Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.019Z
    2021-06-06T06:28:53.023Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.036Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), maySkipCheckpoint=false, fiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.023Z
    2021-06-06T06:28:53.031Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=83DA2DF89F0CC597C2B4F259E5984E35D3BECD294B9EB87EE9B0BC08F1AA31F5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.040Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:28:53.031Z
    2021-06-06T06:28:53.040Z
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.052Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.040Z
    2021-06-06T06:28:53.052Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.062Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.052Z
    2021-06-06T06:28:53.062Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.067Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.062Z
    2021-06-06T06:28:53.067Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.069Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.067Z
    2021-06-06T06:28:53.069Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.069Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.090Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.069Z
    2021-06-06T06:28:53.087Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379
    21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.094Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-53674854040799766), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--53674854040799766-2545440356711928136-2-0), senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.094Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.091Z
    2021-06-06T06:28:53.094Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.167Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.094Z
    2021-06-06T06:28:53.167Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.173Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), maySkipCheckpoint=false, fiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.167Z
    2021-06-06T06:28:53.171Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261
    1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))])
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.174Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.217Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5673615988992768759), payload=net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a]
checkpoint.timestamp: 
    2021-06-06T06:28:53.174Z
    2021-06-06T06:28:53.217Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5673615988992768759)]
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.218Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5673615988992768759)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5673615988992768759)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)
    null


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.218Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.217Z
    2021-06-06T06:28:53.218Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.238Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.218Z
    2021-06-06T06:28:53.222Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6281773360967372925, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.243Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.245Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.222Z
    2021-06-06T06:28:53.245Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[WARN ] 2021-06-06T06:28:53,272Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [7de3305b-cb27-4784-9fc3-cd41988ed756] error {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:28:53,274Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[WARN ] 2021-06-06T06:28:53,306Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [7de3305b-cb27-4784-9fc3-cd41988ed756] errored, dumping all transitions:

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.012Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=83DA2DF89F0CC597C2B4F259E5984E35D3BECD294B9EB87EE9B0BC08F1AA31F5), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11])
    SignalFlowHasStarted(flowId=[7de3305b-cb27-4784-9fc3-cd41988ed756])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-53674854040799766), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5673615988992768759), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--53674854040799766-2545440356711928136-0-0), senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@401f3d11]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:28:52.992Z
    2021-06-06T06:28:52.996Z
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.019Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:52.996Z
    2021-06-06T06:28:53.019Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.023Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.019Z
    2021-06-06T06:28:53.023Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.036Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), maySkipCheckpoint=false, fiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.023Z
    2021-06-06T06:28:53.031Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=83DA2DF89F0CC597C2B4F259E5984E35D3BECD294B9EB87EE9B0BC08F1AA31F5)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.040Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:28:53.031Z
    2021-06-06T06:28:53.040Z
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.052Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.040Z
    2021-06-06T06:28:53.052Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.062Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.052Z
    2021-06-06T06:28:53.062Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.067Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.062Z
    2021-06-06T06:28:53.067Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.069Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.067Z
    2021-06-06T06:28:53.069Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.069Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.090Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.069Z
    2021-06-06T06:28:53.087Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    558ED55D09DA25EFC604EC8DC7495F3D2F0CCEF67CB6E3DF333BEF1ED7990379
    21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.094Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-53674854040799766), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--53674854040799766-2545440356711928136-2-0), senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.094Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.091Z
    2021-06-06T06:28:53.094Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.167Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.094Z
    2021-06-06T06:28:53.167Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.173Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), maySkipCheckpoint=false, fiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5673615988992768759)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.167Z
    2021-06-06T06:28:53.171Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    21A2629759CCE4C11DE0EF722021CA0D4AF67B830AAA7494B308B88B6564A261
    1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))])
checkpoint.flowIoRequest: 
    Send
    Receive


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.174Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.217Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5673615988992768759), payload=net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a]
checkpoint.timestamp: 
    2021-06-06T06:28:53.174Z
    2021-06-06T06:28:53.217Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5673615988992768759)]
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.218Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5673615988992768759)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5673615988992768759)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=5673615988992768759): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@2e7e3d97], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-53674854040799766), deduplicationSeed=D--53674854040799766-2545440356711928136)
    null


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.218Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.217Z
    2021-06-06T06:28:53.218Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.238Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:28:53.218Z
    2021-06-06T06:28:53.222Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6281773360967372925, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.243Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.245Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:28:53.222Z
    2021-06-06T06:28:53.245Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [7de3305b-cb27-4784-9fc3-cd41988ed756] ---
  Timestamp: 2021-06-06T06:28:53.294Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-6281773360967372925)], sessions=[], senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d)
    CreateTransaction
    RemoveCheckpoint(id=[7de3305b-cb27-4784-9fc3-cd41988ed756], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a])
    ReleaseSoftLocks(uuid=7de3305b-cb27-4784-9fc3-cd41988ed756)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[7de3305b-cb27-4784-9fc3-cd41988ed756], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6281773360967372925, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Invocation, sessionId=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, timestamp: 2021-06-06T06:28:52.991Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@5b096fd5, errorState=Errored(errors=[FlowError(errorId=-6281773360967372925, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@22e45db, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=7abdd626-e9ad-49f4-a4f0-06523f23357d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@2d6ff5fd[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@480d0c7a]
    []
checkpoint.timestamp: 
    2021-06-06T06:28:53.245Z
    2021-06-06T06:28:53.273Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5673615988992768759))]), frozenFiber=1DD9565F5C5ABAF6FB093DD301480DA44166D09214F3CB274355C6C6D4CA5F03)
    net.corda.node.services.statemachine.FlowState$Finished@5b096fd5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
[WARN ] 2021-06-06T06:28:53,306Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [7de3305b-cb27-4784-9fc3-cd41988ed756] error {fiber-id=10000002, flow-id=7de3305b-cb27-4784-9fc3-cd41988ed756, invocation_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, invocation_timestamp=2021-06-06T06:28:52.991Z, origin=O=Mock Company 1, L=London, C=GB, session_id=89e71eeb-55e4-43a6-9d45-2d7e8bbdfa16, session_timestamp=2021-06-06T06:28:52.991Z, thread-id=242, tx_id=A8DFC24602A039C42B8B2BA88F02CE557F447DB772DD08C6C66C44CBDD07535A}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:29:13,399Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:29:13,642Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:29:16,271Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:29:19,344Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:29:19,364Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:29:19,365Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:29:19,971Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:20,001Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:29:20,490Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:20,490Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:20,490Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:29:20,680Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:20,680Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:29:21,278Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:29:21,980Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:29:21,996Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:29:22,042Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:29:22,043Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:29:22,043Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:29:23,005Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:23,005Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:29:23,131Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:23,131Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:29:23,163Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:23,163Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:29:23,275Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:29:23,275Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:23,448Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:23,448Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:23,448Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:23,449Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:23,464Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:23,480Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:23,480Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:23,480Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:23,480Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:23,526Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:23,526Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:23,526Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:23,621Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:23,622Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:23,622Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:23,622Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:23,643Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:29:23,876Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:23,876Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:29:23,921Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,347Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:29:24,347Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,395Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:24,395Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,426Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,426Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:29:24,442Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,442Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:29:24,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,443Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:29:24,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,443Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,443Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:29:24,488Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:29:24,488Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:29:24,489Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,503Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:29:24,503Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,503Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,503Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:29:24,519Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,519Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:29:24,519Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,535Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,535Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:29:24,535Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,536Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:24,536Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,536Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:24,536Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,536Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,597Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:29:24,598Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:29:24,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,614Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:29:24,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,614Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:29:24,630Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,630Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:29:24,630Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,630Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,630Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:29:24,661Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,661Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:29:24,661Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,661Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:29:24,661Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,662Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:29:24,677Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,677Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:29:24,707Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:29:24,722Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:24,722Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:29:24,722Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:29:24,729Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:29:24,753Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:29:24,753Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:29:24,783Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:29:29,534Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062912.029-86DA391AF065BB04\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:29:29,543Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:29:29,555Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:29:29,656Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:29:30,696Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:29:31,261Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:29:31,320Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:29:31,462Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:29:31,463Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:29:31,463Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:29:31,603Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:29:11.953Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:29:36,872Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:29:37,005Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:29:37,017Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:29:40,139Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:29:40,474Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:29:40,474Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:40,482Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:29:40,683Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:40,751Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:29:40,768Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:29:40,770Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:29:40,776Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:40,813Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:40,939Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:29:40,950Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:29:41,511Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:41,522Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:41,525Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:41,526Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:41,526Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:41,642Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062912.029-86DA391AF065BB04\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:29:41,643Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:29:41,643Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:29:41,656Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:29:41,692Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:29:41,694Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:29:41,695Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:29:41,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:29:41,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:29:41,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:29:41,738Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:29:11.953Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:29:42,203Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:29:42,209Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:42,209Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:42,401Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:42,403Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:29:42,430Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:29:42,430Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,432Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:42,441Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,450Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:29:42,450Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:29:42,450Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:29:42,454Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,460Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:42,492Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:29:42,516Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,516Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:42,821Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:29:42,835Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,836Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:42,851Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,851Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:42,851Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:42,851Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:42,864Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-062912.029-86DA391AF065BB04\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:29:42,865Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:29:42,865Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:29:42,875Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-062912.029-86DA391AF065BB04/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:29:42,911Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:29:42,911Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:29:42,913Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:29:42,949Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:29:42,949Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:29:42,949Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:29:42,953Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:29:11.953Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:29:43,365Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:29:43,368Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:43,368Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:43,531Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:29:43,533Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:29:43,557Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:29:43,557Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,560Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:43,568Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,576Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:29:43,576Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:29:43,576Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:29:43,581Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,587Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:43,618Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:29:43,638Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,638Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622960980474) {}
[INFO ] 2021-06-06T06:29:43,640Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:29:43,652Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,653Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:43,667Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622960982430) {}
[INFO ] 2021-06-06T06:29:43,668Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:43,680Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,681Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:29:43,691Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,691Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:29:43,692Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622960983557) {}
[INFO ] 2021-06-06T06:29:43,692Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:29:43,959Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242}
[WARN ] 2021-06-06T06:29:43,959Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242}
[INFO ] 2021-06-06T06:29:44,355Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,355Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,505Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,704Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,759Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,858Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,858Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=998baef5-7fd2-42e2-bc30-522be0af6087, invocation_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, invocation_timestamp=2021-06-06T06:29:43.734Z, origin=Only For Testing, session_id=bbca96a1-8b47-48f4-a09c-da66a4ad28c1, session_timestamp=2021-06-06T06:29:43.734Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,886Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,892Z [Mock network] statemachine.StaffedFlowHospital. - Flow [9b075214-f83d-4f03-a553-0ab479e1ffad] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@6650164e, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@105292f7[Permits = 0]) {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[INFO ] 2021-06-06T06:29:44,895Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:29:44,902Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:29:44,944Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9b075214-f83d-4f03-a553-0ab479e1ffad] errored, dumping all transitions:

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.678Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E5E99DFF9903A9631B9628EF8F26425345B2A116EB7E858A1B29FB47F2C4CFFB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116])
    SignalFlowHasStarted(flowId=[9b075214-f83d-4f03-a553-0ab479e1ffad])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4058047519549878472), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6101085407097450174), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4058047519549878472-6980558507172443311-0-0), senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:29:44.654Z
    2021-06-06T06:29:44.660Z
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.685Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.660Z
    2021-06-06T06:29:44.685Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.688Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.685Z
    2021-06-06T06:29:44.688Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.699Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), maySkipCheckpoint=false, fiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.688Z
    2021-06-06T06:29:44.695Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E5E99DFF9903A9631B9628EF8F26425345B2A116EB7E858A1B29FB47F2C4CFFB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7)
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.702Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:29:44.695Z
    2021-06-06T06:29:44.702Z
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.712Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.702Z
    2021-06-06T06:29:44.712Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.722Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.712Z
    2021-06-06T06:29:44.722Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.726Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.722Z
    2021-06-06T06:29:44.726Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.728Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.726Z
    2021-06-06T06:29:44.728Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.729Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.728Z
    2021-06-06T06:29:44.729Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.753Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.729Z
    2021-06-06T06:29:44.749Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7
    1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.758Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4058047519549878472), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4058047519549878472-6980558507172443311-2-0), senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.759Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.754Z
    2021-06-06T06:29:44.759Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.836Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.759Z
    2021-06-06T06:29:44.835Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.841Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), maySkipCheckpoint=false, fiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.835Z
    2021-06-06T06:29:44.838Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))])
checkpoint.flowState.frozenFiber.hash: 
    1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210
    48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.842Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.885Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6101085407097450174), payload=net.corda.node.services.statemachine.EndSessionMessage@5d9699eb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.842Z
    2021-06-06T06:29:44.885Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6101085407097450174)]
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@5d9699eb]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.886Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6101085407097450174)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6101085407097450174)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@5d9699eb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)
    null


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.886Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.885Z
    2021-06-06T06:29:44.886Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.906Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.886Z
    2021-06-06T06:29:44.891Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9101156003070364112, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.911Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.913Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.891Z
    2021-06-06T06:29:44.913Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[WARN ] 2021-06-06T06:29:44,944Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9b075214-f83d-4f03-a553-0ab479e1ffad] error {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:29:44,946Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[WARN ] 2021-06-06T06:29:44,982Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9b075214-f83d-4f03-a553-0ab479e1ffad] errored, dumping all transitions:

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.678Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E5E99DFF9903A9631B9628EF8F26425345B2A116EB7E858A1B29FB47F2C4CFFB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116])
    SignalFlowHasStarted(flowId=[9b075214-f83d-4f03-a553-0ab479e1ffad])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4058047519549878472), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6101085407097450174), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4058047519549878472-6980558507172443311-0-0), senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:29:44.654Z
    2021-06-06T06:29:44.660Z
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d8fd116]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.685Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.660Z
    2021-06-06T06:29:44.685Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.688Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.685Z
    2021-06-06T06:29:44.688Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.699Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), maySkipCheckpoint=false, fiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.688Z
    2021-06-06T06:29:44.695Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E5E99DFF9903A9631B9628EF8F26425345B2A116EB7E858A1B29FB47F2C4CFFB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7)
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.702Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:29:44.695Z
    2021-06-06T06:29:44.702Z
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.712Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.702Z
    2021-06-06T06:29:44.712Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.722Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.712Z
    2021-06-06T06:29:44.722Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.726Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.722Z
    2021-06-06T06:29:44.726Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.728Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.726Z
    2021-06-06T06:29:44.728Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.729Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.728Z
    2021-06-06T06:29:44.729Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.753Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.729Z
    2021-06-06T06:29:44.749Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    09F1F9F8EB41B468859197635D93019A1A6077C03351BF2E2BFC2E09883BAEF7
    1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.758Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4058047519549878472), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4058047519549878472-6980558507172443311-2-0), senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.759Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.754Z
    2021-06-06T06:29:44.759Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.836Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.759Z
    2021-06-06T06:29:44.835Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.841Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), maySkipCheckpoint=false, fiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6101085407097450174)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.835Z
    2021-06-06T06:29:44.838Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))])
checkpoint.flowState.frozenFiber.hash: 
    1F5ECF9528820106CD20EA93F1CCE35BC0A8456D429FB35CAB17A2111E044210
    48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.842Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.885Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6101085407097450174), payload=net.corda.node.services.statemachine.EndSessionMessage@5d9699eb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.842Z
    2021-06-06T06:29:44.885Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6101085407097450174)]
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@5d9699eb]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.886Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6101085407097450174)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6101085407097450174)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=6101085407097450174): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@5d9699eb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4058047519549878472), deduplicationSeed=D--4058047519549878472-6980558507172443311)
    null


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.886Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.885Z
    2021-06-06T06:29:44.886Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.906Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:29:44.886Z
    2021-06-06T06:29:44.891Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9101156003070364112, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.911Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.913Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.891Z
    2021-06-06T06:29:44.913Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9b075214-f83d-4f03-a553-0ab479e1ffad] ---
  Timestamp: 2021-06-06T06:29:44.973Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=9101156003070364112)], sessions=[], senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d)
    CreateTransaction
    RemoveCheckpoint(id=[9b075214-f83d-4f03-a553-0ab479e1ffad], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491])
    ReleaseSoftLocks(uuid=9b075214-f83d-4f03-a553-0ab479e1ffad)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[9b075214-f83d-4f03-a553-0ab479e1ffad], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=9101156003070364112, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Invocation, sessionId=c4094dab-4f65-421f-b61d-226b1214db07, timestamp: 2021-06-06T06:29:44.653Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@1d3743a2, errorState=Errored(errors=[FlowError(errorId=9101156003070364112, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@6650164e, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=f7387dbf-402b-4384-9113-8e875951dd2d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@105292f7[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:29:44.913Z
    2021-06-06T06:29:44.945Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6101085407097450174))]), frozenFiber=48186E95CA5A78436EF9233FE3DC34AB1413B84DABD4FF14BD1482F2659E03BD)
    net.corda.node.services.statemachine.FlowState$Finished@1d3743a2
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35ed5491]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
[WARN ] 2021-06-06T06:29:44,982Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9b075214-f83d-4f03-a553-0ab479e1ffad] error {fiber-id=10000002, flow-id=9b075214-f83d-4f03-a553-0ab479e1ffad, invocation_id=c4094dab-4f65-421f-b61d-226b1214db07, invocation_timestamp=2021-06-06T06:29:44.653Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c4094dab-4f65-421f-b61d-226b1214db07, session_timestamp=2021-06-06T06:29:44.653Z, thread-id=242, tx_id=DEA6BB80E5428AE8615DAE907F75142A785EA3A04E24E56CD6E94A629DC742EE}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:29:45,208Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:29:45,372Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:29:45,372Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:29:45,377Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:29:45,517Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:29:45,517Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:29:45,521Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:29:45,675Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:29:45,675Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:30:03,451Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:30:03,902Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:30:07,417Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:30:07,440Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:30:07,500Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:07,500Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:30:07,516Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:07,517Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,517Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:30:07,517Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,517Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:30:07,547Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:30:07,738Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:30:07,738Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:30:07,769Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:30:07,769Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:30:07,770Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:30:07,928Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,928Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:30:07,940Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,940Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:30:07,956Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,956Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:30:07,972Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:30:07,972Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,018Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,019Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,019Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,019Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,034Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,034Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,034Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,034Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,034Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,050Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,050Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,050Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,066Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,081Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,082Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,237Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,237Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,267Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,268Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,268Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,313Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,313Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,329Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,329Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:30:08,329Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,330Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:30:08,376Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,376Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:30:08,376Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,376Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:30:08,376Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,377Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:30:08,377Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,377Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,393Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:30:08,394Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,394Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:30:08,426Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,427Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,427Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:30:08,427Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,440Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,441Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,441Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,441Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,441Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,484Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,484Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,484Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,500Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:30:08,501Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,501Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:30:08,501Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,516Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:30:08,517Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,517Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,517Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:30:08,532Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,532Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:30:08,533Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,534Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:30:08,534Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,534Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:30:08,547Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:30:08,562Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,563Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:30:08,563Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:30:08,568Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:30:08,578Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:30:08,579Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:30:08,615Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:30:14,763Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063001.453-D931249B3C5DDAF3\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:30:14,773Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:30:14,788Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:30:14,901Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:30:16,151Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:30:16,790Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:30:16,874Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:30:17,027Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:30:17,027Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:30:17,028Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:30:17,173Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:30:01.367Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:30:23,836Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:30:24,000Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:30:24,008Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:30:27,970Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:30:28,588Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:30:28,605Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:28,649Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:30:29,010Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:29,126Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:30:29,162Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:30:29,169Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:30:29,212Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:29,360Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:29,584Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:30:29,601Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:30:30,538Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:30,561Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:30,578Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:30,580Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:30,580Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:30,643Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063001.453-D931249B3C5DDAF3\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:30:30,649Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:30:30,649Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:30:30,696Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:30:30,785Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:30:30,787Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:30:30,803Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:30:30,951Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:30:30,951Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:30:30,951Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:30:30,957Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:30:01.367Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:30:32,216Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:30:32,223Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:32,224Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:32,502Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:32,504Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:30:32,540Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:30:32,540Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,542Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:32,551Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,560Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:30:32,561Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:30:32,561Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:30:32,566Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,572Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:32,613Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:30:32,638Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,639Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:32,640Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:30:32,654Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,656Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:32,670Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,670Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:32,670Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:32,670Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:32,682Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063001.453-D931249B3C5DDAF3\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:30:32,682Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:30:32,682Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:30:32,697Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063001.453-D931249B3C5DDAF3/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:30:32,733Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:30:32,734Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:30:32,735Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:30:32,766Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:30:32,766Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:30:32,766Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:30:32,772Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:30:01.367Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:30:33,281Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:30:33,288Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:33,288Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:33,500Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:30:33,502Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:30:33,544Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:30:33,544Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,547Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:33,556Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,565Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:30:33,566Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:30:33,566Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:30:33,572Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,578Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:33,639Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=73A0E90050D32B77B02E539978BF4F5D8A403DA1D0A9614A01E32804C4F07020 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:30:33,664Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,664Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961028593) {}
[INFO ] 2021-06-06T06:30:33,666Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:30:33,682Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,684Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:33,699Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961032540) {}
[INFO ] 2021-06-06T06:30:33,701Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:33,713Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,714Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:30:33,727Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,727Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:30:33,728Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961033544) {}
[INFO ] 2021-06-06T06:30:33,728Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:30:34,051Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244}
[WARN ] 2021-06-06T06:30:34,051Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244}
[INFO ] 2021-06-06T06:30:34,578Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:34,578Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:34,770Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,053Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,162Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,244Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,244Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b8b4bb85-23a5-4b3b-9dcf-1cb52ef2b1c0, invocation_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, invocation_timestamp=2021-06-06T06:30:33.776Z, origin=Only For Testing, session_id=347bcd7a-3583-4ad2-bbed-d45906ecdc96, session_timestamp=2021-06-06T06:30:33.776Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,283Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,290Z [Mock network] statemachine.StaffedFlowHospital. - Flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@55731100, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@3d7965a2[Permits = 0]) {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[INFO ] 2021-06-06T06:30:35,294Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:30:35,303Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:30:35,350Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] errored, dumping all transitions:

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.011Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1FE9403FB9348BE57D3FA9187BAA4B679095AC2B6D35F482B3DB670F677EB5AF), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e])
    SignalFlowHasStarted(flowId=[b62f357f-6630-44ee-92f7-48a2fefa9f96])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5628024459286216602), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3637726478964194700), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5628024459286216602--7394296883005247778-0-0), senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:34.981Z
    2021-06-06T06:30:34.986Z
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.021Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:34.986Z
    2021-06-06T06:30:35.021Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.026Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.021Z
    2021-06-06T06:30:35.026Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.045Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), maySkipCheckpoint=false, fiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.026Z
    2021-06-06T06:30:35.039Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1FE9403FB9348BE57D3FA9187BAA4B679095AC2B6D35F482B3DB670F677EB5AF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.050Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.039Z
    2021-06-06T06:30:35.050Z
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.064Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.050Z
    2021-06-06T06:30:35.064Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.078Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.064Z
    2021-06-06T06:30:35.078Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.085Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.078Z
    2021-06-06T06:30:35.085Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.088Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.085Z
    2021-06-06T06:30:35.088Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.088Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.137Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.088Z
    2021-06-06T06:30:35.133Z
checkpoint.flowState.frozenFiber.hash: 
    4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843
    70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.161Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5628024459286216602), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5628024459286216602--7394296883005247778-2-0), senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.162Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.158Z
    2021-06-06T06:30:35.162Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.213Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.162Z
    2021-06-06T06:30:35.213Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.221Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), maySkipCheckpoint=false, fiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.213Z
    2021-06-06T06:30:35.218Z
checkpoint.flowState.frozenFiber.hash: 
    70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9
    98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))])
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.281Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3637726478964194700), payload=net.corda.node.services.statemachine.EndSessionMessage@1f820b1c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.221Z
    2021-06-06T06:30:35.281Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=3637726478964194700)]
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1f820b1c]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.282Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3637726478964194700)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.281Z
    2021-06-06T06:30:35.282Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=3637726478964194700)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1f820b1c], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.283Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.282Z
    2021-06-06T06:30:35.283Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.307Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.283Z
    2021-06-06T06:30:35.288Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6557834709311321323, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.312Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.315Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.288Z
    2021-06-06T06:30:35.315Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[WARN ] 2021-06-06T06:30:35,350Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] error {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:30:35,352Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[WARN ] 2021-06-06T06:30:35,399Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] errored, dumping all transitions:

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.011Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1FE9403FB9348BE57D3FA9187BAA4B679095AC2B6D35F482B3DB670F677EB5AF), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e])
    SignalFlowHasStarted(flowId=[b62f357f-6630-44ee-92f7-48a2fefa9f96])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5628024459286216602), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3637726478964194700), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5628024459286216602--7394296883005247778-0-0), senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:34.981Z
    2021-06-06T06:30:34.986Z
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1948151e]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.021Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:34.986Z
    2021-06-06T06:30:35.021Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.026Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.021Z
    2021-06-06T06:30:35.026Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.045Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), maySkipCheckpoint=false, fiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.026Z
    2021-06-06T06:30:35.039Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1FE9403FB9348BE57D3FA9187BAA4B679095AC2B6D35F482B3DB670F677EB5AF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.050Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.039Z
    2021-06-06T06:30:35.050Z
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.064Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.050Z
    2021-06-06T06:30:35.064Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.078Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.064Z
    2021-06-06T06:30:35.078Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.085Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.078Z
    2021-06-06T06:30:35.085Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.088Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.085Z
    2021-06-06T06:30:35.088Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.088Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.137Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.088Z
    2021-06-06T06:30:35.133Z
checkpoint.flowState.frozenFiber.hash: 
    4F90AD80B02FFE422D9A0AA723340CE36ACB1E345C4AE609949F79A24B27B843
    70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.161Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5628024459286216602), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5628024459286216602--7394296883005247778-2-0), senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.162Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.158Z
    2021-06-06T06:30:35.162Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.213Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.162Z
    2021-06-06T06:30:35.213Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.221Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), maySkipCheckpoint=false, fiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3637726478964194700)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.213Z
    2021-06-06T06:30:35.218Z
checkpoint.flowState.frozenFiber.hash: 
    70879CAF6BDE1E697EBA3A6F4F34CAA8844C33AF6E80EBD0E75CDC6C385BBEE9
    98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))])
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.281Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3637726478964194700), payload=net.corda.node.services.statemachine.EndSessionMessage@1f820b1c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.221Z
    2021-06-06T06:30:35.281Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=3637726478964194700)]
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1f820b1c]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.282Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3637726478964194700)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.281Z
    2021-06-06T06:30:35.282Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=3637726478964194700)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=3637726478964194700): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1f820b1c], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5628024459286216602), deduplicationSeed=D-5628024459286216602--7394296883005247778)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.283Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.282Z
    2021-06-06T06:30:35.283Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)]


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.307Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.283Z
    2021-06-06T06:30:35.288Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6557834709311321323, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.312Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.315Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.288Z
    2021-06-06T06:30:35.315Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] ---
  Timestamp: 2021-06-06T06:30:35.381Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-6557834709311321323)], sessions=[], senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5)
    CreateTransaction
    RemoveCheckpoint(id=[b62f357f-6630-44ee-92f7-48a2fefa9f96], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76])
    ReleaseSoftLocks(uuid=b62f357f-6630-44ee-92f7-48a2fefa9f96)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[b62f357f-6630-44ee-92f7-48a2fefa9f96], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6557834709311321323, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Invocation, sessionId=0707f395-6dcd-453e-856a-aad83c6135ee, timestamp: 2021-06-06T06:30:34.979Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=8FF1AD1C35370C7BA34D979BD1BAED8F7159DA0732F8A53F0CFE795CE04533F1), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@182e141d, errorState=Errored(errors=[FlowError(errorId=-6557834709311321323, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@55731100, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=71157a4c-9337-42cd-b24f-dd52f40834a5, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@3d7965a2[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:30:35.315Z
    2021-06-06T06:30:35.351Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3637726478964194700))]), frozenFiber=98227D12C0654F7D97ED3101911484AD7EE4A14621A314F408A34B6CAE0265C8)
    net.corda.node.services.statemachine.FlowState$Finished@182e141d
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c65ca76]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
[WARN ] 2021-06-06T06:30:35,399Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b62f357f-6630-44ee-92f7-48a2fefa9f96] error {fiber-id=10000002, flow-id=b62f357f-6630-44ee-92f7-48a2fefa9f96, invocation_id=0707f395-6dcd-453e-856a-aad83c6135ee, invocation_timestamp=2021-06-06T06:30:34.979Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0707f395-6dcd-453e-856a-aad83c6135ee, session_timestamp=2021-06-06T06:30:34.979Z, thread-id=244, tx_id=D3E87BC553E7A1F1CE301AF6FED6A3EFD56B1C0DACF72E1A1EEF6AEAEEDA7071}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:36:06,995Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:36:07,268Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:36:24,428Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:36:28,167Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:36:28,185Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:36:28,186Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:36:28,893Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:28,958Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:36:29,555Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:29,555Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:29,571Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:36:29,868Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:29,899Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:36:30,717Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:36:31,562Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:36:31,578Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:36:31,624Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:36:31,641Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:36:31,641Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:36:33,203Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:33,203Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:36:33,411Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:33,411Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:36:33,488Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:33,488Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:36:33,722Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:36:33,723Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:33,928Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:33,928Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:33,929Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:33,944Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:33,945Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:33,960Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:33,960Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:33,960Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:33,960Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:34,008Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,031Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:34,031Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,132Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:34,149Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,149Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:34,150Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,150Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:36:34,431Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,431Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:36:34,478Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,918Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:36:34,918Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,966Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:34,966Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:36:34,998Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:34,998Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:36:34,998Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:34,998Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:36:34,998Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:34,999Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:36:34,999Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:34,999Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,015Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:36:35,060Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,060Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,076Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,077Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:36:35,091Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,091Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:36:35,107Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,107Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,107Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:36:35,108Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,138Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:35,138Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,138Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:35,138Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,138Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:36:35,186Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,186Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:36:35,186Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,186Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:36:35,186Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,202Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:36:35,202Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:36:35,202Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,202Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:36:35,202Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,203Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:36:35,218Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,218Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:36:35,218Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,218Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,219Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:36:35,234Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,234Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:36:35,250Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,251Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:36:35,251Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,251Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:36:35,282Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:36:35,282Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:35,298Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:36:35,298Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:36:35,307Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:36:35,376Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:36:35,390Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:36:35,430Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:36:41,523Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063605.426-FC4EEF652027518E\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:36:41,536Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:36:41,565Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:36:41,749Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:36:43,091Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:36:43,792Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:36:43,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:36:44,083Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:36:44,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:36:44,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:36:44,211Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:36:05.336Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:36:49,145Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:36:49,237Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:36:49,243Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:36:52,102Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:36:52,424Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:36:52,425Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:52,431Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:36:52,607Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:52,668Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:36:52,681Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:36:52,684Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:36:52,690Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:52,728Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:52,853Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:36:52,864Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:36:53,412Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:53,424Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:53,427Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:53,428Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:53,428Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:53,445Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063605.426-FC4EEF652027518E\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:36:53,446Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:36:53,446Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:36:53,460Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:36:53,503Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:36:53,504Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:36:53,506Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:36:53,551Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:36:53,551Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:36:53,551Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:36:53,556Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:36:05.336Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:36:54,008Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:36:54,012Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:54,012Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:54,173Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:54,175Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:36:54,204Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:36:54,204Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,207Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:54,216Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,226Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:36:54,226Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:36:54,226Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:36:54,230Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,236Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:54,271Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:36:54,298Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,298Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:54,301Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:36:54,312Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,314Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:54,325Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,325Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:54,326Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:54,326Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:54,338Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-063605.426-FC4EEF652027518E\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:36:54,339Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:36:54,339Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:36:54,350Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-063605.426-FC4EEF652027518E/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:36:54,377Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:36:54,378Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:36:54,379Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:36:54,410Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:36:54,410Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:36:54,410Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:36:54,414Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:36:05.336Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:36:55,146Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:36:55,148Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:55,148Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:55,321Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:36:55,323Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:36:55,349Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:36:55,349Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,351Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:55,358Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,367Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:36:55,367Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:36:55,367Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:36:55,371Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,378Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:55,409Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:36:55,431Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,431Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622961412425) {}
[INFO ] 2021-06-06T06:36:55,433Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:36:55,445Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,447Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:55,464Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622961414204) {}
[INFO ] 2021-06-06T06:36:55,466Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:55,478Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,480Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:36:55,493Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,493Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:36:55,494Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622961415349) {}
[INFO ] 2021-06-06T06:36:55,494Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:36:55,774Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242}
[WARN ] 2021-06-06T06:36:55,774Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242}
[INFO ] 2021-06-06T06:36:56,150Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,150Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,303Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,563Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,620Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,672Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,672Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=455c3516-d71f-4609-bdd8-92e4f365cad2, invocation_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, invocation_timestamp=2021-06-06T06:36:55.549Z, origin=Only For Testing, session_id=e0ee5df9-2ab2-4b9c-b691-a9b67e1aa080, session_timestamp=2021-06-06T06:36:55.549Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,698Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,703Z [Mock network] statemachine.StaffedFlowHospital. - Flow [077203b8-0933-4246-a925-5df921f492c2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@10b9ed9d, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@54ff7c37[Permits = 0]) {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[INFO ] 2021-06-06T06:36:56,706Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:36:56,714Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:36:56,747Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [077203b8-0933-4246-a925-5df921f492c2] errored, dumping all transitions:

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.507Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4E2DD61FB509651F94E699289B9C0F22D1A141DEC1E5C7A58122B462B2744A8A), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888])
    SignalFlowHasStarted(flowId=[077203b8-0933-4246-a925-5df921f492c2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6522205472695916479), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2302958917219446656), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6522205472695916479--4285005026604640486-0-0), senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.487Z
    2021-06-06T06:36:56.490Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.515Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.490Z
    2021-06-06T06:36:56.515Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.528Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.515Z
    2021-06-06T06:36:56.528Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.555Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), maySkipCheckpoint=false, fiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.528Z
    2021-06-06T06:36:56.548Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4E2DD61FB509651F94E699289B9C0F22D1A141DEC1E5C7A58122B462B2744A8A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.560Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.548Z
    2021-06-06T06:36:56.559Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.572Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.559Z
    2021-06-06T06:36:56.572Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.582Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.572Z
    2021-06-06T06:36:56.582Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.587Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.582Z
    2021-06-06T06:36:56.587Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.589Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.587Z
    2021-06-06T06:36:56.589Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.589Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.613Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.589Z
    2021-06-06T06:36:56.609Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260
    06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.619Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6522205472695916479), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6522205472695916479--4285005026604640486-2-0), senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.619Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.615Z
    2021-06-06T06:36:56.619Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.653Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.619Z
    2021-06-06T06:36:56.653Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.658Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), maySkipCheckpoint=false, fiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.653Z
    2021-06-06T06:36:56.655Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))])
checkpoint.flowState.frozenFiber.hash: 
    06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B
    09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.658Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.697Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2302958917219446656), payload=net.corda.node.services.statemachine.EndSessionMessage@53f83bb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.658Z
    2021-06-06T06:36:56.697Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@53f83bb]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2302958917219446656)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.698Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2302958917219446656)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.697Z
    2021-06-06T06:36:56.698Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@53f83bb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2302958917219446656)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.698Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.698Z
    2021-06-06T06:36:56.702Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1592227564659527844, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.722Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.723Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.702Z
    2021-06-06T06:36:56.723Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[WARN ] 2021-06-06T06:36:56,747Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [077203b8-0933-4246-a925-5df921f492c2] error {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:36:56,749Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[WARN ] 2021-06-06T06:36:56,773Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [077203b8-0933-4246-a925-5df921f492c2] errored, dumping all transitions:

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.507Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4E2DD61FB509651F94E699289B9C0F22D1A141DEC1E5C7A58122B462B2744A8A), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888])
    SignalFlowHasStarted(flowId=[077203b8-0933-4246-a925-5df921f492c2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6522205472695916479), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2302958917219446656), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6522205472695916479--4285005026604640486-0-0), senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.487Z
    2021-06-06T06:36:56.490Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@15c07888]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.515Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.490Z
    2021-06-06T06:36:56.515Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.528Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.515Z
    2021-06-06T06:36:56.528Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.555Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), maySkipCheckpoint=false, fiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.528Z
    2021-06-06T06:36:56.548Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4E2DD61FB509651F94E699289B9C0F22D1A141DEC1E5C7A58122B462B2744A8A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260)
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.560Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.548Z
    2021-06-06T06:36:56.559Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.572Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.559Z
    2021-06-06T06:36:56.572Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.582Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.572Z
    2021-06-06T06:36:56.582Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.587Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.582Z
    2021-06-06T06:36:56.587Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.589Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.587Z
    2021-06-06T06:36:56.589Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.589Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.613Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.589Z
    2021-06-06T06:36:56.609Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    063FC1121A2B93427D17E58BFD7B65C0FFEF411DE78D9BB96B0DD9E847A56260
    06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.619Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6522205472695916479), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6522205472695916479--4285005026604640486-2-0), senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.619Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.615Z
    2021-06-06T06:36:56.619Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.653Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.619Z
    2021-06-06T06:36:56.653Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.658Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), maySkipCheckpoint=false, fiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302958917219446656)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.653Z
    2021-06-06T06:36:56.655Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))])
checkpoint.flowState.frozenFiber.hash: 
    06A8347B6515CF72262AFE3909C5000ADC226777A03F8CFABD7375A331AF006B
    09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.658Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.697Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2302958917219446656), payload=net.corda.node.services.statemachine.EndSessionMessage@53f83bb), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.658Z
    2021-06-06T06:36:56.697Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@53f83bb]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2302958917219446656)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.698Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2302958917219446656)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.697Z
    2021-06-06T06:36:56.698Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302958917219446656): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@53f83bb], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6522205472695916479), deduplicationSeed=D-6522205472695916479--4285005026604640486)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2302958917219446656)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.698Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)]


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.698Z
    2021-06-06T06:36:56.702Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1592227564659527844, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.722Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.723Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.702Z
    2021-06-06T06:36:56.723Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [077203b8-0933-4246-a925-5df921f492c2] ---
  Timestamp: 2021-06-06T06:36:56.767Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1592227564659527844)], sessions=[], senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37)
    CreateTransaction
    RemoveCheckpoint(id=[077203b8-0933-4246-a925-5df921f492c2], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1])
    ReleaseSoftLocks(uuid=077203b8-0933-4246-a925-5df921f492c2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[077203b8-0933-4246-a925-5df921f492c2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1592227564659527844, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Invocation, sessionId=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, timestamp: 2021-06-06T06:36:56.486Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=479E669EAC60B1CBA504F10AF629BA66F10111FEBA7A715E1DF5F3E82C543417), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@2bb374f8, errorState=Errored(errors=[FlowError(errorId=1592227564659527844, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@10b9ed9d, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=e63ca48d-f17b-42c8-bcc3-3a7eb2854f37, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@54ff7c37[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:36:56.723Z
    2021-06-06T06:36:56.747Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302958917219446656))]), frozenFiber=09F766E69D6A18BF942A56D14DB00873D61C9E3B0CB1D708FA68CA21499D9123)
    net.corda.node.services.statemachine.FlowState$Finished@2bb374f8
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60537aa1]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
[WARN ] 2021-06-06T06:36:56,773Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [077203b8-0933-4246-a925-5df921f492c2] error {fiber-id=10000002, flow-id=077203b8-0933-4246-a925-5df921f492c2, invocation_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, invocation_timestamp=2021-06-06T06:36:56.486Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf92de38-6de2-4d67-9d0b-1d631ec7fb23, session_timestamp=2021-06-06T06:36:56.486Z, thread-id=242, tx_id=6B327E7095E6226A768CDAA75FCE3EABA5E07ADE2D0EA0410DE01F950ED79F08}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:36:57,054Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:36:57,353Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:36:57,353Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:36:57,357Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:36:57,496Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:36:57,496Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:36:57,499Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:36:57,667Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:36:57,667Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:46:28,991Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:46:29,244Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:46:31,644Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:46:35,076Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:46:35,103Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:46:35,105Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:46:35,711Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:35,725Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:46:36,226Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:36,226Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:36,226Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:46:36,416Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:36,431Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:46:36,991Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:46:37,660Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:46:37,660Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:46:37,706Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:46:37,707Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:46:37,707Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:46:38,680Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:38,680Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:46:38,790Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:38,791Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:46:38,836Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:38,836Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:46:38,992Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:46:38,992Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:39,132Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:39,148Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:39,149Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:39,149Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:39,149Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:39,164Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:39,165Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:39,165Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:39,165Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:39,196Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:39,210Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:39,210Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:39,306Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:39,306Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:39,306Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:39,324Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:39,324Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:46:39,557Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:39,557Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:46:39,588Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,022Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:46:40,022Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,084Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:40,084Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,116Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,116Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,117Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,135Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:46:40,180Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,181Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:46:40,195Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,195Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:46:40,195Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,196Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:46:40,196Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,210Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,210Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:46:40,226Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,226Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:46:40,226Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,241Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,241Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:46:40,242Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,256Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:40,257Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,257Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:40,257Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,257Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:46:40,302Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,302Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:46:40,302Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,318Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:46:40,319Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,319Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:46:40,319Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:46:40,319Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,334Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,335Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,336Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:46:40,366Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,367Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,382Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:46:40,383Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:46:40,383Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,383Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:46:40,476Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:40,476Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:46:43,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:46:43,024Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:43,024Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:46:43,024Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:46:43,046Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:46:43,056Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:46:43,056Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:46:43,090Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:46:48,134Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064627.600-F083E5B38530CD8E\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:46:48,144Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:46:48,160Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:46:48,259Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:46:49,215Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:46:49,777Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:46:49,841Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:46:49,966Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:46:49,966Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:46:49,967Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:46:50,112Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:46:27.514Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:46:55,171Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:46:55,274Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:46:55,280Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:46:58,170Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:46:58,505Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:46:58,505Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:58,514Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:46:58,707Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:58,771Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:46:58,786Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:46:58,789Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:46:58,796Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:58,833Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:46:58,950Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:46:58,959Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:46:59,495Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:59,507Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:59,510Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:46:59,511Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:46:59,511Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:46:59,638Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064627.600-F083E5B38530CD8E\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:46:59,639Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:46:59,639Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:46:59,652Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:46:59,687Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:46:59,688Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:46:59,689Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:46:59,725Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:46:59,725Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:46:59,725Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:46:59,729Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:46:27.514Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:47:00,210Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:47:00,214Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:00,214Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:00,411Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:00,413Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:47:00,441Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:47:00,441Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,444Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:00,456Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,477Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:47:00,477Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:47:00,477Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:47:00,484Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,492Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:47:00,532Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:47:00,555Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,555Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:47:00,557Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:47:00,572Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,573Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:00,585Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,585Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:47:00,586Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:00,586Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:47:00,611Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064627.600-F083E5B38530CD8E\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:47:00,612Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:47:00,612Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:47:00,630Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064627.600-F083E5B38530CD8E/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:47:00,669Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:47:00,670Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:47:00,672Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:47:00,713Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:47:00,713Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:47:00,713Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:47:00,717Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:46:27.514Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:47:01,431Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:47:01,433Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:01,433Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:01,610Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:47:01,613Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:47:01,643Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:47:01,643Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,646Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:01,657Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,666Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:47:01,666Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:47:01,666Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:47:01,671Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,679Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:47:01,722Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:47:01,743Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,744Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962018505) {}
[INFO ] 2021-06-06T06:47:01,745Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:47:01,757Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,758Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:01,770Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962020441) {}
[INFO ] 2021-06-06T06:47:01,771Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:01,781Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,782Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:47:01,793Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,793Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:47:01,793Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962021643) {}
[INFO ] 2021-06-06T06:47:01,793Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:47:02,053Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243}
[WARN ] 2021-06-06T06:47:02,053Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243}
[INFO ] 2021-06-06T06:47:02,460Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,460Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,584Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,781Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,839Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,934Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,934Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c99b39fa-a6fd-4191-88c0-76f0973c81f7, invocation_id=cf4a337b-0621-41d0-866a-7878dc12eea6, invocation_timestamp=2021-06-06T06:47:01.831Z, origin=Only For Testing, session_id=cf4a337b-0621-41d0-866a-7878dc12eea6, session_timestamp=2021-06-06T06:47:01.831Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,979Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,985Z [Mock network] statemachine.StaffedFlowHospital. - Flow [6260419d-edd0-4031-b780-37caf31f4ac3] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@379a8bba, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=57615063-ff57-4609-b968-f35b09e34ca7, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@73eec83d[Permits = 0]) {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[INFO ] 2021-06-06T06:47:02,988Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:47:02,996Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:47:03,027Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6260419d-edd0-4031-b780-37caf31f4ac3] errored, dumping all transitions:

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.749Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=16B7F97C12D3C67F44B4CE125407CB22567CD0E10781DE11B09F0D5DDE6B86FA), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1])
    SignalFlowHasStarted(flowId=[6260419d-edd0-4031-b780-37caf31f4ac3])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1776874080816734582), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2647389758445285239), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1776874080816734582-6807062301623401957-0-0), senderUUID=57615063-ff57-4609-b968-f35b09e34ca7))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.725Z
    2021-06-06T06:47:02.729Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1]
    []


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.757Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.729Z
    2021-06-06T06:47:02.757Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.761Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.757Z
    2021-06-06T06:47:02.761Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.774Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), maySkipCheckpoint=false, fiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.761Z
    2021-06-06T06:47:02.769Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=16B7F97C12D3C67F44B4CE125407CB22567CD0E10781DE11B09F0D5DDE6B86FA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587)
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.778Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.769Z
    2021-06-06T06:47:02.777Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.789Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.777Z
    2021-06-06T06:47:02.789Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.802Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.789Z
    2021-06-06T06:47:02.802Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.809Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.802Z
    2021-06-06T06:47:02.809Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.811Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.809Z
    2021-06-06T06:47:02.811Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.811Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.834Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.811Z
    2021-06-06T06:47:02.832Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587
    74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.839Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1776874080816734582), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1776874080816734582-6807062301623401957-2-0), senderUUID=57615063-ff57-4609-b968-f35b09e34ca7))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.836Z
    2021-06-06T06:47:02.839Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.912Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.839Z
    2021-06-06T06:47:02.912Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.917Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), maySkipCheckpoint=false, fiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.912Z
    2021-06-06T06:47:02.915Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))])
checkpoint.flowState.frozenFiber.hash: 
    74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617
    D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.918Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.977Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2647389758445285239), payload=net.corda.node.services.statemachine.EndSessionMessage@2d32d378), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.918Z
    2021-06-06T06:47:02.977Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2647389758445285239)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@2d32d378]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.979Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2647389758445285239)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.977Z
    2021-06-06T06:47:02.978Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2647389758445285239)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@2d32d378], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)
    null


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.979Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.978Z
    2021-06-06T06:47:02.979Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.999Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.979Z
    2021-06-06T06:47:02.983Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5218454501509030045, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:03.004Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:03.006Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.983Z
    2021-06-06T06:47:03.006Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[WARN ] 2021-06-06T06:47:03,027Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6260419d-edd0-4031-b780-37caf31f4ac3] error {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:47:03,028Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[WARN ] 2021-06-06T06:47:03,066Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6260419d-edd0-4031-b780-37caf31f4ac3] errored, dumping all transitions:

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.749Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=16B7F97C12D3C67F44B4CE125407CB22567CD0E10781DE11B09F0D5DDE6B86FA), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1])
    SignalFlowHasStarted(flowId=[6260419d-edd0-4031-b780-37caf31f4ac3])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1776874080816734582), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2647389758445285239), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1776874080816734582-6807062301623401957-0-0), senderUUID=57615063-ff57-4609-b968-f35b09e34ca7))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.725Z
    2021-06-06T06:47:02.729Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@63d1b2c1]
    []


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.757Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.729Z
    2021-06-06T06:47:02.757Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.761Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.757Z
    2021-06-06T06:47:02.761Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.774Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), maySkipCheckpoint=false, fiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.761Z
    2021-06-06T06:47:02.769Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=16B7F97C12D3C67F44B4CE125407CB22567CD0E10781DE11B09F0D5DDE6B86FA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587)
checkpoint.progressStep: 
    null
    Starting
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
numberOfCommits: 
    0
    2


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.778Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.769Z
    2021-06-06T06:47:02.777Z
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.789Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.777Z
    2021-06-06T06:47:02.789Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.802Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.789Z
    2021-06-06T06:47:02.802Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.809Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.802Z
    2021-06-06T06:47:02.809Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.811Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.809Z
    2021-06-06T06:47:02.811Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.811Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.834Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.811Z
    2021-06-06T06:47:02.832Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    4E0D5229A7E7A20EE644B17D20E13DF28792ACAE4633207BBADD5387E01A5587
    74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.839Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1776874080816734582), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1776874080816734582-6807062301623401957-2-0), senderUUID=57615063-ff57-4609-b968-f35b09e34ca7))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.836Z
    2021-06-06T06:47:02.839Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.912Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.839Z
    2021-06-06T06:47:02.912Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.917Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), maySkipCheckpoint=false, fiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2647389758445285239)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.912Z
    2021-06-06T06:47:02.915Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))])
checkpoint.flowState.frozenFiber.hash: 
    74576B86272417844080B6AF8E36656C690C4F82CAA74AE9949EBCAB457A7617
    D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.918Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.977Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2647389758445285239), payload=net.corda.node.services.statemachine.EndSessionMessage@2d32d378), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.918Z
    2021-06-06T06:47:02.977Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-2647389758445285239)]
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@2d32d378]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.979Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2647389758445285239)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:47:02.977Z
    2021-06-06T06:47:02.978Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-2647389758445285239)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-2647389758445285239): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@2d32d378], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-1776874080816734582), deduplicationSeed=D--1776874080816734582-6807062301623401957)
    null


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.979Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.978Z
    2021-06-06T06:47:02.979Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:02.999Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:47:02.979Z
    2021-06-06T06:47:02.983Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5218454501509030045, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:03.004Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:03.006Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:02.983Z
    2021-06-06T06:47:03.006Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6260419d-edd0-4031-b780-37caf31f4ac3] ---
  Timestamp: 2021-06-06T06:47:03.055Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=5218454501509030045)], sessions=[], senderUUID=57615063-ff57-4609-b968-f35b09e34ca7)
    CreateTransaction
    RemoveCheckpoint(id=[6260419d-edd0-4031-b780-37caf31f4ac3], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0])
    ReleaseSoftLocks(uuid=6260419d-edd0-4031-b780-37caf31f4ac3)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[6260419d-edd0-4031-b780-37caf31f4ac3], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5218454501509030045, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Invocation, sessionId=1c0688af-a8a9-4e44-86db-e883f00ffedc, timestamp: 2021-06-06T06:47:02.723Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@7d6fd034, errorState=Errored(errors=[FlowError(errorId=5218454501509030045, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@379a8bba, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=57615063-ff57-4609-b968-f35b09e34ca7, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@73eec83d[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:47:03.006Z
    2021-06-06T06:47:03.027Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2647389758445285239))]), frozenFiber=D6C8AE967D0A305DED746ECCBDBEBFF974A92FBA8F81646EA8AF1D54BA090EFA)
    net.corda.node.services.statemachine.FlowState$Finished@7d6fd034
checkpoint.checkpointState.numberOfCommits: 
    4
    5
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@302ab4b0]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
[WARN ] 2021-06-06T06:47:03,066Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6260419d-edd0-4031-b780-37caf31f4ac3] error {fiber-id=10000002, flow-id=6260419d-edd0-4031-b780-37caf31f4ac3, invocation_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, invocation_timestamp=2021-06-06T06:47:02.723Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1c0688af-a8a9-4e44-86db-e883f00ffedc, session_timestamp=2021-06-06T06:47:02.723Z, thread-id=243, tx_id=2DBD0E35D6EC5DE879570B06FAC17A728C6629710D66FDEAD53D7FB46930C80E}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:47:03,157Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=091e4db7-7c12-4c8b-8d10-eff4a8cdb944, invocation_id=0b4780be-b733-4e54-8c40-5be545d6809e, invocation_timestamp=2021-06-06T06:47:03.068Z, origin=Only For Testing, session_id=0b4780be-b733-4e54-8c40-5be545d6809e, session_timestamp=2021-06-06T06:47:03.068Z, thread-id=243}
[WARN ] 2021-06-06T06:47:03,250Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=f15963c0-c58e-4bd5-9923-e757f91613b1, invocation_id=152d48d4-3b49-4deb-9bde-4f3d74aabf40, invocation_timestamp=2021-06-06T06:47:03.243Z, origin=Only For Testing, session_id=152d48d4-3b49-4deb-9bde-4f3d74aabf40, session_timestamp=2021-06-06T06:47:03.243Z, thread-id=243}
[INFO ] 2021-06-06T06:47:03,273Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T06:47:03,463Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:47:03,463Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:47:03,468Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T06:47:03,616Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:47:03,617Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:47:03,618Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T06:47:03,757Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T06:47:03,757Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:48:04,261Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:48:04,578Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:48:08,481Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:48:12,125Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:48:12,151Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:48:12,153Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:48:12,755Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:12,771Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:48:13,272Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:13,272Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:13,272Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:48:13,461Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:13,461Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:48:14,043Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:48:14,719Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:48:14,719Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:48:14,766Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:48:14,766Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:48:14,766Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:48:15,719Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:15,719Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:48:15,846Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:15,846Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:48:15,877Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:15,877Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:48:15,985Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:48:15,985Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:16,140Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:16,140Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:16,140Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:16,141Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:16,155Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:16,171Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:16,171Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:16,171Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:16,171Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:16,219Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,219Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:16,219Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,297Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:16,297Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,297Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:16,297Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,297Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:48:16,562Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,562Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:48:16,592Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:16,998Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:48:16,998Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,059Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:17,059Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,075Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:48:17,091Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,092Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,092Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:48:17,145Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,145Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:48:17,157Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,157Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:48:17,157Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,157Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:48:17,157Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,171Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,171Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:48:17,186Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,186Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:48:17,201Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,201Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,201Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:48:17,201Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,216Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:17,216Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,216Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:17,216Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,216Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:48:17,262Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,262Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:48:17,263Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,263Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:48:17,263Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,279Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:48:17,279Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:48:17,279Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,279Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:48:17,293Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,293Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:48:17,294Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,308Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:48:17,308Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,308Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,308Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:48:17,323Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,342Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:48:17,342Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,342Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:48:17,369Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:48:17,384Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:17,384Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:48:17,384Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:48:17,392Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:48:17,399Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:48:17,399Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:48:17,449Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:48:23,693Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064802.410-D52D557024FD0278\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:48:23,704Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:48:23,721Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:48:23,858Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:48:25,012Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:48:25,606Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:48:25,675Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:48:25,793Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:48:25,793Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:48:25,794Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:48:25,926Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:48:02.312Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:48:31,254Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:48:31,380Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:48:31,387Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:48:34,874Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:48:35,220Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:48:35,221Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:35,228Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:48:35,442Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:35,511Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:48:35,529Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:48:35,533Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:48:35,542Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:35,587Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:35,735Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:48:35,748Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:48:36,483Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:36,502Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:36,506Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:36,507Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:36,507Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:36,534Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064802.410-D52D557024FD0278\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:48:36,535Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:48:36,535Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:48:36,560Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:48:36,616Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:48:36,617Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:48:36,618Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:48:36,692Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:48:36,692Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:48:36,692Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:48:36,698Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:48:02.312Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:48:37,574Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:48:37,580Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:37,580Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:37,789Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:37,791Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:48:37,820Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:48:37,820Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,823Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:37,831Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,841Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:48:37,842Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:48:37,842Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:48:37,847Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,853Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:37,895Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:48:37,929Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,930Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:37,931Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:48:37,948Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,949Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:37,964Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,964Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:37,964Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:37,964Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:37,979Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-064802.410-D52D557024FD0278\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:48:37,980Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:48:37,980Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:48:37,998Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-064802.410-D52D557024FD0278/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:48:38,036Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:48:38,037Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:48:38,040Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:48:38,076Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:48:38,076Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:48:38,076Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:48:38,080Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:48:02.312Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:48:38,496Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:48:38,499Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:38,499Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:38,688Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:48:38,691Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:48:38,750Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:48:38,753Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,758Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:38,771Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,782Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:48:38,782Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:48:38,782Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:48:38,790Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,797Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:38,847Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:48:38,875Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,876Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962115220) {}
[INFO ] 2021-06-06T06:48:38,878Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:48:38,891Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,893Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:38,912Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962117820) {}
[INFO ] 2021-06-06T06:48:38,913Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:38,928Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,930Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:48:38,941Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,941Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:48:38,942Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962118753) {}
[INFO ] 2021-06-06T06:48:38,942Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:48:39,303Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245}
[WARN ] 2021-06-06T06:48:39,303Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245}
[INFO ] 2021-06-06T06:48:39,773Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:39,773Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:39,939Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,171Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,224Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,327Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,327Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4f8206cb-4d0f-4a75-bc52-dc2c4617c807, invocation_id=67018895-79e1-482d-bfe4-5a880002fee9, invocation_timestamp=2021-06-06T06:48:39.001Z, origin=Only For Testing, session_id=67018895-79e1-482d-bfe4-5a880002fee9, session_timestamp=2021-06-06T06:48:39.001Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,361Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,367Z [Mock network] statemachine.StaffedFlowHospital. - Flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@38aa2d80, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@73660785[Permits = 0]) {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[INFO ] 2021-06-06T06:48:40,372Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:48:40,381Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:48:40,422Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] errored, dumping all transitions:

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=16C638A2ED18D43DD479EDDFF33DA86D82E8A0EDFF0758E4C885B0BD280AF438), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5])
    SignalFlowHasStarted(flowId=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6443554226369603477), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5622498164421362529), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6443554226369603477-258914417181712980-0-0), senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.113Z
    2021-06-06T06:48:40.119Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.149Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.119Z
    2021-06-06T06:48:40.149Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.152Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.149Z
    2021-06-06T06:48:40.152Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.165Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), maySkipCheckpoint=false, fiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.152Z
    2021-06-06T06:48:40.161Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=16C638A2ED18D43DD479EDDFF33DA86D82E8A0EDFF0758E4C885B0BD280AF438)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7)
checkpoint.progressStep: 
    null
    Starting


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.169Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.161Z
    2021-06-06T06:48:40.168Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.178Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.168Z
    2021-06-06T06:48:40.178Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.187Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.178Z
    2021-06-06T06:48:40.187Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.193Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.187Z
    2021-06-06T06:48:40.193Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.195Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.193Z
    2021-06-06T06:48:40.195Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.195Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.219Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.195Z
    2021-06-06T06:48:40.217Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7
    FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.224Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6443554226369603477), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6443554226369603477-258914417181712980-2-0), senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.224Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.221Z
    2021-06-06T06:48:40.224Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.304Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.224Z
    2021-06-06T06:48:40.304Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.310Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), maySkipCheckpoint=false, fiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.304Z
    2021-06-06T06:48:40.307Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE
    D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))])


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.310Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.359Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5622498164421362529), payload=net.corda.node.services.statemachine.EndSessionMessage@1c003702), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07]
checkpoint.timestamp: 
    2021-06-06T06:48:40.310Z
    2021-06-06T06:48:40.359Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1c003702]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-5622498164421362529)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.360Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5622498164421362529)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.359Z
    2021-06-06T06:48:40.360Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1c003702], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-5622498164421362529)]
    []


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.361Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.360Z
    2021-06-06T06:48:40.361Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.386Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.361Z
    2021-06-06T06:48:40.365Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-334206740130368723, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.391Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.393Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.365Z
    2021-06-06T06:48:40.393Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[WARN ] 2021-06-06T06:48:40,422Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] error {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:48:40,487Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[WARN ] 2021-06-06T06:48:40,542Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] errored, dumping all transitions:

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=16C638A2ED18D43DD479EDDFF33DA86D82E8A0EDFF0758E4C885B0BD280AF438), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5])
    SignalFlowHasStarted(flowId=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6443554226369603477), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5622498164421362529), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6443554226369603477-258914417181712980-0-0), senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@190f70c5]
    []
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.113Z
    2021-06-06T06:48:40.119Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.149Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.119Z
    2021-06-06T06:48:40.149Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.152Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.149Z
    2021-06-06T06:48:40.152Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.165Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), maySkipCheckpoint=false, fiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.152Z
    2021-06-06T06:48:40.161Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=16C638A2ED18D43DD479EDDFF33DA86D82E8A0EDFF0758E4C885B0BD280AF438)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7)
checkpoint.progressStep: 
    null
    Starting


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.169Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.161Z
    2021-06-06T06:48:40.168Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.178Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.168Z
    2021-06-06T06:48:40.178Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.187Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.178Z
    2021-06-06T06:48:40.187Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.193Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.187Z
    2021-06-06T06:48:40.193Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.195Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.193Z
    2021-06-06T06:48:40.195Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.195Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.219Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.195Z
    2021-06-06T06:48:40.217Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    2B539FA3C849BBF5815D24A7EE282B8C188A5D78065787EAB2FEE2A96C742BA7
    FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.224Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6443554226369603477), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6443554226369603477-258914417181712980-2-0), senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.224Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.221Z
    2021-06-06T06:48:40.224Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.304Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.224Z
    2021-06-06T06:48:40.304Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.310Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), maySkipCheckpoint=false, fiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5622498164421362529)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.304Z
    2021-06-06T06:48:40.307Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    FFBD0810BB0396DBCCD7E0B04FDF1E9DFF5909A1C79D06D4D5AA7A71A273EBDE
    D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))])


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.310Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.359Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5622498164421362529), payload=net.corda.node.services.statemachine.EndSessionMessage@1c003702), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07]
checkpoint.timestamp: 
    2021-06-06T06:48:40.310Z
    2021-06-06T06:48:40.359Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@1c003702]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-5622498164421362529)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.360Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5622498164421362529)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.359Z
    2021-06-06T06:48:40.360Z
checkpoint.checkpointState.sessions.SessionId(toLong=-5622498164421362529): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@1c003702], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6443554226369603477), deduplicationSeed=D-6443554226369603477-258914417181712980)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-5622498164421362529)]
    []


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.361Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.360Z
    2021-06-06T06:48:40.361Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)]


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.386Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T06:48:40.361Z
    2021-06-06T06:48:40.365Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-334206740130368723, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.391Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.393Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:48:40.365Z
    2021-06-06T06:48:40.393Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] ---
  Timestamp: 2021-06-06T06:48:40.525Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-334206740130368723)], sessions=[], senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1)
    CreateTransaction
    RemoveCheckpoint(id=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07])
    ReleaseSoftLocks(uuid=22424b0e-68ea-4f2c-b6f9-ffa15e761dec)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[22424b0e-68ea-4f2c-b6f9-ffa15e761dec], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-334206740130368723, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Invocation, sessionId=7ff6630a-f483-466a-853b-c3cdad314c80, timestamp: 2021-06-06T06:48:40.112Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=9CE25DF0E9A469288B925EFCC3B878DD610E334B07FB432B872864BD8E784454), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@7f2c1664, errorState=Errored(errors=[FlowError(errorId=-334206740130368723, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@38aa2d80, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=3019726c-483c-4563-a7c0-11f87b509dc1, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@73660785[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34390f07]
    []
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:48:40.393Z
    2021-06-06T06:48:40.423Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5622498164421362529))]), frozenFiber=D45B263AF3D9DB461F38BA7C13258235426E72FF30387919C08484B148593D25)
    net.corda.node.services.statemachine.FlowState$Finished@7f2c1664
 {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
[WARN ] 2021-06-06T06:48:40,542Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [22424b0e-68ea-4f2c-b6f9-ffa15e761dec] error {fiber-id=10000002, flow-id=22424b0e-68ea-4f2c-b6f9-ffa15e761dec, invocation_id=7ff6630a-f483-466a-853b-c3cdad314c80, invocation_timestamp=2021-06-06T06:48:40.112Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7ff6630a-f483-466a-853b-c3cdad314c80, session_timestamp=2021-06-06T06:48:40.112Z, thread-id=245, tx_id=FC7487741F0C66F7D35CE8A44C98089AAA4E5824C4E379AB12A6249B498182EB}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:48:40,665Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=00895349-97a8-415c-b97d-607982d4b3f5, invocation_id=45ed2125-8e6b-4228-92cb-f7dbe5f16637, invocation_timestamp=2021-06-06T06:48:40.544Z, origin=Only For Testing, session_id=45ed2125-8e6b-4228-92cb-f7dbe5f16637, session_timestamp=2021-06-06T06:48:40.544Z, thread-id=245}
[INFO ] 2021-06-06T06:50:26,481Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T06:50:26,776Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:50:29,811Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:50:33,030Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T06:50:33,051Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T06:50:33,052Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:50:33,664Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:33,679Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T06:50:34,166Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:34,181Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:34,182Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T06:50:34,371Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:34,387Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:50:34,941Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T06:50:35,616Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:50:35,616Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:50:35,663Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:50:35,664Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T06:50:35,664Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T06:50:36,617Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:36,617Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T06:50:36,725Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:36,725Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T06:50:36,773Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:36,774Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T06:50:36,909Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T06:50:36,909Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:37,039Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:37,055Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:37,055Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:37,055Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:37,071Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:37,071Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:37,072Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:37,086Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:37,086Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:37,133Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,133Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:37,133Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,241Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:37,258Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,262Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:37,262Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,263Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:50:37,492Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,492Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:50:37,523Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,915Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T06:50:37,915Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:37,976Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:37,976Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,022Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,022Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T06:50:38,022Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,022Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T06:50:38,022Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,023Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T06:50:38,023Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,023Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,040Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T06:50:38,085Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,085Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,100Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:50:38,116Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,116Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T06:50:38,132Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,132Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,132Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T06:50:38,132Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,147Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:38,147Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,148Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:38,148Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,148Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:50:38,194Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,194Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:50:38,194Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,211Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T06:50:38,226Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,226Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T06:50:38,242Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,242Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T06:50:38,242Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,242Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,242Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T06:50:38,272Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T06:50:38,273Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T06:50:38,274Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,274Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T06:50:38,321Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:38,322Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T06:50:40,847Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T06:50:40,847Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:40,863Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T06:50:40,863Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T06:50:40,871Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:50:40,895Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T06:50:40,895Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T06:50:40,930Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T06:50:46,919Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-065024.801-5404218CC626D002\nodes\0\cordapps] {}
[INFO ] 2021-06-06T06:50:46,931Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:50:46,946Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:50:47,059Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:50:48,278Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:50:48,882Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:50:48,964Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:50:49,095Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:50:49,096Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:50:49,096Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:50:49,264Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:50:24.710Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:50:55,184Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:50:55,336Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:50:55,343Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:50:58,748Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T06:50:59,133Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:50:59,134Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:50:59,141Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:50:59,352Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:50:59,448Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:50:59,467Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:50:59,470Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:50:59,478Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:50:59,520Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:50:59,639Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:50:59,654Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T06:51:00,319Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:51:00,334Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:51:00,337Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:00,338Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:51:00,338Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:00,457Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-065024.801-5404218CC626D002\nodes\1\cordapps] {}
[INFO ] 2021-06-06T06:51:00,458Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:51:00,458Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:51:00,478Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:51:00,522Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:51:00,523Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:51:00,525Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:51:00,559Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:51:00,559Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:51:00,559Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:51:00,562Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:50:24.710Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:51:01,397Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:51:01,404Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:01,404Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:01,603Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:01,605Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:51:01,635Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:51:01,635Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,637Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:01,647Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,667Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:51:01,667Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:51:01,667Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:51:01,672Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,678Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:01,713Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:51:01,738Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,739Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:51:01,741Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:51:01,753Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,754Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:01,766Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,766Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:01,767Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:01,767Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:01,779Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-065024.801-5404218CC626D002\nodes\2\cordapps] {}
[INFO ] 2021-06-06T06:51:01,779Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T06:51:01,779Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T06:51:01,795Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-065024.801-5404218CC626D002/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T06:51:01,834Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T06:51:01,835Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T06:51:01,837Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T06:51:01,878Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T06:51:01,878Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T06:51:01,878Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T06:51:01,882Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T06:50:24.710Z
      epoch=1
  } {}
[INFO ] 2021-06-06T06:51:02,292Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T06:51:02,295Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:02,295Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:02,476Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T06:51:02,478Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T06:51:02,526Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T06:51:02,526Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,528Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:02,542Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,551Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T06:51:02,552Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T06:51:02,552Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T06:51:02,557Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,563Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:02,603Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T06:51:02,628Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,628Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622962259133) {}
[INFO ] 2021-06-06T06:51:02,630Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T06:51:02,642Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,644Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:02,656Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622962261635) {}
[INFO ] 2021-06-06T06:51:02,657Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:02,667Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,668Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T06:51:02,678Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,678Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T06:51:02,679Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622962262526) {}
[INFO ] 2021-06-06T06:51:02,679Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T06:51:02,982Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245}
[WARN ] 2021-06-06T06:51:02,982Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245}
[INFO ] 2021-06-06T06:51:03,448Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:03,448Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:03,599Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:03,826Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:03,882Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:04,002Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:04,002Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c6e740f7-bf1b-40d7-8adc-5505647257e2, invocation_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, invocation_timestamp=2021-06-06T06:51:02.724Z, origin=Only For Testing, session_id=396bca08-3366-44a2-8cbb-3e33c2264a0f, session_timestamp=2021-06-06T06:51:02.724Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:04,031Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:04,038Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@cadc945, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@2b697cc2[Permits = 0]) {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[INFO ] 2021-06-06T06:51:04,041Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T06:51:04,050Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:51:04,097Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] errored, dumping all transitions:

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.796Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4E0145C8C8EC092E25851B73D21D1E48D9FF2EFAD185743BFEC599978264B366), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917])
    SignalFlowHasStarted(flowId=[ab78c7ab-f3bb-493d-abfb-8628dd984c97])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6309691491518563469), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5947713483409263641), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6309691491518563469-1093980291707816701-0-0), senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.772Z
    2021-06-06T06:51:03.778Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.803Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.778Z
    2021-06-06T06:51:03.803Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.806Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.803Z
    2021-06-06T06:51:03.806Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.819Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), maySkipCheckpoint=false, fiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.806Z
    2021-06-06T06:51:03.815Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4E0145C8C8EC092E25851B73D21D1E48D9FF2EFAD185743BFEC599978264B366)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.823Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.815Z
    2021-06-06T06:51:03.822Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.833Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.822Z
    2021-06-06T06:51:03.833Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.844Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.833Z
    2021-06-06T06:51:03.844Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.849Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.844Z
    2021-06-06T06:51:03.849Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.851Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.849Z
    2021-06-06T06:51:03.851Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.851Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.876Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.851Z
    2021-06-06T06:51:03.873Z
checkpoint.flowState.frozenFiber.hash: 
    387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F
    BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.881Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6309691491518563469), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6309691491518563469-1093980291707816701-2-0), senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.882Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.878Z
    2021-06-06T06:51:03.882Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.979Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.882Z
    2021-06-06T06:51:03.979Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.985Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), maySkipCheckpoint=false, fiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.979Z
    2021-06-06T06:51:03.982Z
checkpoint.flowState.frozenFiber.hash: 
    BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B
    6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.985Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.030Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5947713483409263641), payload=net.corda.node.services.statemachine.EndSessionMessage@75d2309c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.985Z
    2021-06-06T06:51:04.030Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@75d2309c]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5947713483409263641)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.031Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5947713483409263641)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.030Z
    2021-06-06T06:51:04.031Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@75d2309c], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5947713483409263641)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.031Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.055Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.031Z
    2021-06-06T06:51:04.036Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=782783904699066, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.060Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.063Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.036Z
    2021-06-06T06:51:04.063Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[WARN ] 2021-06-06T06:51:04,098Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] error {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T06:51:04,100Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[WARN ] 2021-06-06T06:51:04,197Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] errored, dumping all transitions:

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.796Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4E0145C8C8EC092E25851B73D21D1E48D9FF2EFAD185743BFEC599978264B366), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917])
    SignalFlowHasStarted(flowId=[ab78c7ab-f3bb-493d-abfb-8628dd984c97])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6309691491518563469), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5947713483409263641), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6309691491518563469-1093980291707816701-0-0), senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.772Z
    2021-06-06T06:51:03.778Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@49aeb917]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.803Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.778Z
    2021-06-06T06:51:03.803Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.806Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.803Z
    2021-06-06T06:51:03.806Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.819Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), maySkipCheckpoint=false, fiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.806Z
    2021-06-06T06:51:03.815Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4E0145C8C8EC092E25851B73D21D1E48D9FF2EFAD185743BFEC599978264B366)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.823Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.815Z
    2021-06-06T06:51:03.822Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.833Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.822Z
    2021-06-06T06:51:03.833Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.844Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.833Z
    2021-06-06T06:51:03.844Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.849Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.844Z
    2021-06-06T06:51:03.849Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.851Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.849Z
    2021-06-06T06:51:03.851Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.851Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.876Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.851Z
    2021-06-06T06:51:03.873Z
checkpoint.flowState.frozenFiber.hash: 
    387DC2544C0298E909D653EF83F5A5BCB1D8CA57BD466779F08A2B0270EB7F3F
    BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.881Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6309691491518563469), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6309691491518563469-1093980291707816701-2-0), senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.882Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.878Z
    2021-06-06T06:51:03.882Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.979Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.882Z
    2021-06-06T06:51:03.979Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.985Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), maySkipCheckpoint=false, fiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5947713483409263641)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.979Z
    2021-06-06T06:51:03.982Z
checkpoint.flowState.frozenFiber.hash: 
    BB4DBA27594F74515E56F7EEB23CF781F77C85C5C72A009A3023E8630776706B
    6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:03.985Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.030Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5947713483409263641), payload=net.corda.node.services.statemachine.EndSessionMessage@75d2309c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:03.985Z
    2021-06-06T06:51:04.030Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@75d2309c]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=5947713483409263641)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.031Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5947713483409263641)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.030Z
    2021-06-06T06:51:04.031Z
checkpoint.checkpointState.sessions.SessionId(toLong=5947713483409263641): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@75d2309c], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=6309691491518563469), deduplicationSeed=D-6309691491518563469-1093980291707816701)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=5947713483409263641)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.031Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)]


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.055Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.031Z
    2021-06-06T06:51:04.036Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=782783904699066, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.060Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.063Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T06:51:04.036Z
    2021-06-06T06:51:04.063Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] ---
  Timestamp: 2021-06-06T06:51:04.186Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=782783904699066)], sessions=[], senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87)
    CreateTransaction
    RemoveCheckpoint(id=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002])
    ReleaseSoftLocks(uuid=ab78c7ab-f3bb-493d-abfb-8628dd984c97)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ab78c7ab-f3bb-493d-abfb-8628dd984c97], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=782783904699066, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Invocation, sessionId=01354778-537d-4eec-9350-5505864e6402, timestamp: 2021-06-06T06:51:03.771Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=4CB63723394792458BF418CDC9B29ED5DFECB033DCD4F619831BF4672EE9AE4C), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@31da88e8, errorState=Errored(errors=[FlowError(errorId=782783904699066, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@cadc945, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=a94a7f17-ffb7-4a56-a64c-5de92ffa5c87, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@2b697cc2[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T06:51:04.063Z
    2021-06-06T06:51:04.098Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5947713483409263641))]), frozenFiber=6AE2F6AB24D41E4ABA930F905AE6F5D5CA05EF8E7588FCB5C4C85EEA4100B537)
    net.corda.node.services.statemachine.FlowState$Finished@31da88e8
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@23b64002]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
[WARN ] 2021-06-06T06:51:04,197Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ab78c7ab-f3bb-493d-abfb-8628dd984c97] error {fiber-id=10000002, flow-id=ab78c7ab-f3bb-493d-abfb-8628dd984c97, invocation_id=01354778-537d-4eec-9350-5505864e6402, invocation_timestamp=2021-06-06T06:51:03.771Z, origin=O=Mock Company 1, L=London, C=GB, session_id=01354778-537d-4eec-9350-5505864e6402, session_timestamp=2021-06-06T06:51:03.771Z, thread-id=245, tx_id=9C74A53A22A146C6E782974E307F205D5DD048C1AD82835233A12B6E86431D96}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T12:32:17,753Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:32:18,004Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:32:20,680Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:32:24,446Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:32:24,487Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:32:24,490Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:32:25,125Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:25,140Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:32:25,644Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:25,644Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:25,644Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:32:25,832Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:25,832Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:32:26,399Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:32:27,081Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:32:27,081Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:32:27,127Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:32:27,128Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:32:27,128Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:32:28,080Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:28,080Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:32:28,190Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:28,190Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:32:28,220Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:28,220Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:32:28,330Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:32:28,330Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:28,485Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:28,500Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:28,500Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:28,500Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:28,500Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:28,516Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:28,516Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:28,517Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:28,517Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:28,563Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:28,578Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:28,578Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:28,657Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:28,657Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:28,657Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:28,675Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:28,675Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:32:28,922Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:28,922Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:32:28,939Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,398Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:32:29,398Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,462Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:29,462Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,478Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,494Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:32:29,494Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,494Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:32:29,494Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,495Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:32:29,495Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,495Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,495Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:32:29,542Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,542Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:32:29,559Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,559Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:32:29,560Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,560Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:32:29,560Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,560Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,560Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:32:29,580Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,592Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:32:29,620Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,620Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,620Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:32:29,620Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,620Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:29,642Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,642Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:29,642Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,642Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:32:29,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:32:29,714Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,731Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:32:29,732Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,732Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:32:29,732Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:32:29,744Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,744Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:32:29,744Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,744Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:32:29,759Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,760Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:32:29,760Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,760Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,761Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:32:29,790Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,790Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:32:29,790Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,790Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:32:29,790Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,791Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:32:29,808Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:29,808Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:32:33,223Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:32:33,239Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:33,239Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:32:33,240Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:32:33,277Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:32:33,315Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:32:33,315Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:32:33,347Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:32:38,825Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-123216.118-1ADC66BC8C4327B6\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:32:38,833Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:32:38,846Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:32:38,958Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:32:40,052Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:32:40,648Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:32:40,714Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:32:40,831Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:32:40,832Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:32:40,832Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:32:40,959Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:32:16.017Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:32:46,091Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:32:46,196Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:32:46,204Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:32:49,417Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:32:49,718Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:32:49,718Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:49,725Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:32:49,905Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:49,974Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:32:49,990Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:32:49,993Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:32:50,001Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:50,040Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:50,161Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:32:50,174Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T12:32:50,746Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:50,757Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:50,761Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:50,762Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:50,762Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:50,873Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-123216.118-1ADC66BC8C4327B6\nodes\1\cordapps] {}
[INFO ] 2021-06-06T12:32:50,873Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:32:50,873Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:32:50,888Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:32:50,930Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:32:50,931Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:32:50,932Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:32:50,981Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:32:50,981Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:32:50,982Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:32:50,985Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:32:16.017Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:32:51,461Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:32:51,466Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:51,466Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:51,665Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:51,667Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:32:51,703Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:32:51,703Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,705Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:51,715Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,724Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:32:51,725Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:32:51,725Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:32:51,729Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,735Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:51,766Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:32:51,791Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,791Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:51,793Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:32:51,808Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,809Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:51,822Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,822Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:51,823Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:51,823Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:51,834Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-123216.118-1ADC66BC8C4327B6\nodes\2\cordapps] {}
[INFO ] 2021-06-06T12:32:51,835Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:32:51,835Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:32:51,845Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-123216.118-1ADC66BC8C4327B6/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:32:51,876Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:32:51,877Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:32:51,879Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:32:52,220Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:32:52,221Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:32:52,221Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:32:52,225Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:32:16.017Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:32:52,634Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:32:52,637Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:52,637Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:52,808Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:32:52,810Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:32:52,836Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:32:52,836Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,839Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:52,849Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,858Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:32:52,859Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:32:52,859Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:32:52,865Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,870Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:52,904Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:32:52,930Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,930Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622982769718) {}
[INFO ] 2021-06-06T12:32:52,932Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:32:52,945Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,947Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:52,959Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622982771703) {}
[INFO ] 2021-06-06T12:32:52,960Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:52,971Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,973Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:32:52,983Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,983Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:32:52,983Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622982772836) {}
[INFO ] 2021-06-06T12:32:52,983Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T12:32:53,287Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242}
[WARN ] 2021-06-06T12:32:53,287Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242}
[INFO ] 2021-06-06T12:32:53,644Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:53,644Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:53,799Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,021Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,074Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,169Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,169Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c9c005db-72a5-4441-b64b-9d536e6c4913, invocation_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, invocation_timestamp=2021-06-06T12:32:53.026Z, origin=Only For Testing, session_id=472804c2-0353-4bc3-8bc1-8e4ef956b0bc, session_timestamp=2021-06-06T12:32:53.026Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,199Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,204Z [Mock network] statemachine.StaffedFlowHospital. - Flow [532e7367-96c6-41e5-986b-12ce9cb2391c] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@1b9fd8fd, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@1dc8efe8[Permits = 0]) {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[INFO ] 2021-06-06T12:32:54,207Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T12:32:54,215Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T12:32:54,255Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [532e7367-96c6-41e5-986b-12ce9cb2391c] errored, dumping all transitions:

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:53.990Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D6C80234436F48C8F58AB6B3D182E00157384A111E51962DEFF8E0D168CE3E59), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e])
    SignalFlowHasStarted(flowId=[532e7367-96c6-41e5-986b-12ce9cb2391c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4972399689840703284), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7301896868999907505), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4972399689840703284--2284684384611986497-0-0), senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.970Z
    2021-06-06T12:32:53.973Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e]
    []


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:53.997Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.973Z
    2021-06-06T12:32:53.997Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.997Z
    2021-06-06T12:32:54Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.012Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), maySkipCheckpoint=false, fiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54Z
    2021-06-06T12:32:54.008Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D6C80234436F48C8F58AB6B3D182E00157384A111E51962DEFF8E0D168CE3E59)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.017Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.008Z
    2021-06-06T12:32:54.017Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.027Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.017Z
    2021-06-06T12:32:54.027Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.036Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.027Z
    2021-06-06T12:32:54.036Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.041Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.036Z
    2021-06-06T12:32:54.041Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.043Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.041Z
    2021-06-06T12:32:54.043Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.044Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.043Z
    2021-06-06T12:32:54.044Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.068Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.044Z
    2021-06-06T12:32:54.064Z
checkpoint.flowState.frozenFiber.hash: 
    819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369
    0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.074Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4972399689840703284), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4972399689840703284--2284684384611986497-2-0), senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.074Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.070Z
    2021-06-06T12:32:54.074Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.145Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.074Z
    2021-06-06T12:32:54.145Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.151Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), maySkipCheckpoint=false, fiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.145Z
    2021-06-06T12:32:54.148Z
checkpoint.flowState.frozenFiber.hash: 
    0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16
    3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.152Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.198Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7301896868999907505), payload=net.corda.node.services.statemachine.EndSessionMessage@35d111b6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.152Z
    2021-06-06T12:32:54.197Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-7301896868999907505)]
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@35d111b6]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.199Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7301896868999907505)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.197Z
    2021-06-06T12:32:54.198Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-7301896868999907505)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@35d111b6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.199Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.198Z
    2021-06-06T12:32:54.199Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.221Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.199Z
    2021-06-06T12:32:54.203Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8783099957765161466, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.224Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.226Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.203Z
    2021-06-06T12:32:54.225Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[WARN ] 2021-06-06T12:32:54,255Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [532e7367-96c6-41e5-986b-12ce9cb2391c] error {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T12:32:54,257Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[WARN ] 2021-06-06T12:32:54,303Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [532e7367-96c6-41e5-986b-12ce9cb2391c] errored, dumping all transitions:

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:53.990Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D6C80234436F48C8F58AB6B3D182E00157384A111E51962DEFF8E0D168CE3E59), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e])
    SignalFlowHasStarted(flowId=[532e7367-96c6-41e5-986b-12ce9cb2391c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4972399689840703284), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7301896868999907505), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4972399689840703284--2284684384611986497-0-0), senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.970Z
    2021-06-06T12:32:53.973Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72ff461e]
    []


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:53.997Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.973Z
    2021-06-06T12:32:53.997Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:53.997Z
    2021-06-06T12:32:54Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.012Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), maySkipCheckpoint=false, fiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54Z
    2021-06-06T12:32:54.008Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D6C80234436F48C8F58AB6B3D182E00157384A111E51962DEFF8E0D168CE3E59)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.progressStep: 
    null
    Starting
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.017Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.008Z
    2021-06-06T12:32:54.017Z
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.027Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.017Z
    2021-06-06T12:32:54.027Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.036Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.027Z
    2021-06-06T12:32:54.036Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.041Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.036Z
    2021-06-06T12:32:54.041Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.043Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.041Z
    2021-06-06T12:32:54.043Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.044Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.043Z
    2021-06-06T12:32:54.044Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.068Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.044Z
    2021-06-06T12:32:54.064Z
checkpoint.flowState.frozenFiber.hash: 
    819A67AF543F51623D80BA1E54E603908BDE89EC554712E09D48E6D89EB7D369
    0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.074Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4972399689840703284), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4972399689840703284--2284684384611986497-2-0), senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.074Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.070Z
    2021-06-06T12:32:54.074Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.145Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.074Z
    2021-06-06T12:32:54.145Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.151Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), maySkipCheckpoint=false, fiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7301896868999907505)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.145Z
    2021-06-06T12:32:54.148Z
checkpoint.flowState.frozenFiber.hash: 
    0504F2A933CB33AC515A2FADB216E0D58CFCD3B984404D66A3A9909B67360C16
    3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.152Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.198Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7301896868999907505), payload=net.corda.node.services.statemachine.EndSessionMessage@35d111b6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.152Z
    2021-06-06T12:32:54.197Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-7301896868999907505)]
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@35d111b6]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.199Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7301896868999907505)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.197Z
    2021-06-06T12:32:54.198Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-7301896868999907505)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-7301896868999907505): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@35d111b6], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-4972399689840703284), deduplicationSeed=D--4972399689840703284--2284684384611986497)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.199Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.198Z
    2021-06-06T12:32:54.199Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)]


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.221Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.199Z
    2021-06-06T12:32:54.203Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8783099957765161466, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.224Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.226Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.203Z
    2021-06-06T12:32:54.225Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [532e7367-96c6-41e5-986b-12ce9cb2391c] ---
  Timestamp: 2021-06-06T12:32:54.292Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-8783099957765161466)], sessions=[], senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d)
    CreateTransaction
    RemoveCheckpoint(id=[532e7367-96c6-41e5-986b-12ce9cb2391c], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703])
    ReleaseSoftLocks(uuid=532e7367-96c6-41e5-986b-12ce9cb2391c)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[532e7367-96c6-41e5-986b-12ce9cb2391c], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-8783099957765161466, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Invocation, sessionId=79db048a-74c3-48c8-b6d1-39282d51e869, timestamp: 2021-06-06T12:32:53.969Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=636C67D519155F644096250DFA126CB8A304D57B9D0545CEDC14B9D4A525B3E7), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@1a1ebf44, errorState=Errored(errors=[FlowError(errorId=-8783099957765161466, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@1b9fd8fd, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=d294fb55-4e2d-468b-9ba3-b4476423185d, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@1dc8efe8[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:32:54.225Z
    2021-06-06T12:32:54.256Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7301896868999907505))]), frozenFiber=3DFA4512658CBCD70EBD20DB83B7D2DB29C01772AF25E71E36DECA0CDE8BA1EA)
    net.corda.node.services.statemachine.FlowState$Finished@1a1ebf44
checkpoint.checkpointState.numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1288f703]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
[WARN ] 2021-06-06T12:32:54,303Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [532e7367-96c6-41e5-986b-12ce9cb2391c] error {fiber-id=10000002, flow-id=532e7367-96c6-41e5-986b-12ce9cb2391c, invocation_id=79db048a-74c3-48c8-b6d1-39282d51e869, invocation_timestamp=2021-06-06T12:32:53.969Z, origin=O=Mock Company 1, L=London, C=GB, session_id=79db048a-74c3-48c8-b6d1-39282d51e869, session_timestamp=2021-06-06T12:32:53.969Z, thread-id=242, tx_id=516C7BBD76D43CE0531AF990876B22EAE5220C12AE848354876701B5BA6F27ED}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T12:32:54,557Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T12:32:54,889Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:32:54,889Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:32:54,900Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T12:32:55,060Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:32:55,060Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:32:55,062Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T12:32:55,195Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:32:55,195Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:46:41,157Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:46:41,416Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:46:43,881Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:46:47,240Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:46:47,261Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:46:47,262Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:46:47,876Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:47,906Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:46:48,472Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:48,488Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:48,489Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:46:48,664Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:48,680Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:46:49,254Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:46:49,910Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:46:49,910Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:46:49,958Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:46:49,959Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:46:49,959Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:46:50,942Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:50,942Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:46:51,054Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:51,054Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:46:51,086Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:51,086Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:46:51,206Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:46:51,206Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:51,358Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:51,358Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:51,358Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:51,358Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:51,375Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:51,390Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:51,390Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:51,390Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:51,393Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:51,421Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:51,437Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:51,437Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:51,531Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:51,546Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:51,547Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:51,547Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:51,547Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:46:51,766Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:51,766Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:46:51,798Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,188Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:46:52,204Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,252Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:52,252Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,284Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,284Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,285Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,301Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:46:52,351Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,351Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:46:52,364Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,364Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:46:52,364Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,365Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:46:52,365Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,380Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,380Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:46:52,395Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,395Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:46:52,411Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,411Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,411Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:46:52,411Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,412Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:52,427Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,427Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:52,427Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,427Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:46:52,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,487Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:46:52,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:46:52,488Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,507Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:46:52,507Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:46:52,507Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,508Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:46:52,520Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,520Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:46:52,534Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,535Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:46:52,535Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,535Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,535Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:46:52,565Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,566Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:46:52,567Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:52,567Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:46:55,440Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:46:55,441Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:55,441Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:46:55,441Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:46:55,469Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:46:55,505Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:46:55,505Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:46:55,546Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:47:01,160Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-124639.797-A6DB37FBB0DF16F6\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:47:01,170Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:47:01,184Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:47:01,303Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:47:02,394Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:47:02,905Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:47:02,960Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:47:03,074Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:47:03,075Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:47:03,075Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:47:03,181Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:46:39.712Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:47:07,988Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:47:08,090Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:47:08,097Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:47:11,437Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:47:11,766Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:47:11,766Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:11,775Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:47:11,955Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:12,018Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:47:12,035Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:47:12,046Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:47:12,051Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:12,090Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:12,205Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:47:12,215Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T12:47:12,915Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:12,928Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:12,931Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:12,932Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:12,932Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:12,952Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-124639.797-A6DB37FBB0DF16F6\nodes\1\cordapps] {}
[INFO ] 2021-06-06T12:47:12,953Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:47:12,953Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:47:12,972Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:47:13,026Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:47:13,027Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:47:13,029Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:47:13,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:47:13,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:47:13,084Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:47:13,091Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:46:39.712Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:47:13,715Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:47:13,726Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:13,726Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:14,026Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:14,107Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:47:14,166Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:47:14,166Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,170Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:14,209Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,224Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:47:14,225Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:47:14,225Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:47:14,245Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,253Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:14,302Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:47:14,344Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,344Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:14,347Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:47:14,367Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,370Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:14,391Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,391Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:14,392Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:14,392Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:14,415Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-124639.797-A6DB37FBB0DF16F6\nodes\2\cordapps] {}
[INFO ] 2021-06-06T12:47:14,416Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:47:14,416Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:47:14,443Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-124639.797-A6DB37FBB0DF16F6/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:47:14,851Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:47:14,852Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:47:14,853Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:47:14,894Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:47:14,895Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:47:14,895Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:47:14,899Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:46:39.712Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:47:15,368Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:47:15,371Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:15,371Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:15,563Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:47:15,565Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:47:15,599Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:47:15,599Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,601Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:15,613Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,626Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:47:15,627Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:47:15,627Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:47:15,633Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,640Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:15,680Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=7F1234E5B14BEF011D579E51890B88B2DB0B23E2B823566BDD5CC003F934910B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:47:15,705Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,706Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622983631766) {}
[INFO ] 2021-06-06T12:47:15,708Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:47:15,722Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,724Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:15,740Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622983634166) {}
[INFO ] 2021-06-06T12:47:15,741Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:15,754Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,755Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:47:15,768Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,768Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:47:15,768Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622983635599) {}
[INFO ] 2021-06-06T12:47:15,768Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T12:47:16,120Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245}
[WARN ] 2021-06-06T12:47:16,120Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245}
[INFO ] 2021-06-06T12:47:16,616Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:16,616Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:16,800Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,085Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,162Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,267Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,267Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=03abecc5-0e17-458e-9b44-2eca36ca1bfa, invocation_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, invocation_timestamp=2021-06-06T12:47:15.833Z, origin=Only For Testing, session_id=26ea67ce-5fe3-485a-bc10-be8a77edc7eb, session_timestamp=2021-06-06T12:47:15.833Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,301Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,307Z [Mock network] statemachine.StaffedFlowHospital. - Flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@75013381, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@4d8ae40e[Permits = 0]) {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[INFO ] 2021-06-06T12:47:17,311Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T12:47:17,335Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T12:47:17,377Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] errored, dumping all transitions:

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.053Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=91330836E773720B5D7695AD87D084313D7220E63684DC65821690E286E41494), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776])
    SignalFlowHasStarted(flowId=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2904382993961639663), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1371319136460519331), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2904382993961639663--2565256195797037477-0-0), senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.026Z
    2021-06-06T12:47:17.031Z
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.062Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.031Z
    2021-06-06T12:47:17.062Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.065Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.062Z
    2021-06-06T12:47:17.065Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.078Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), maySkipCheckpoint=false, fiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.065Z
    2021-06-06T12:47:17.073Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=91330836E773720B5D7695AD87D084313D7220E63684DC65821690E286E41494)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.083Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.073Z
    2021-06-06T12:47:17.082Z
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.094Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.082Z
    2021-06-06T12:47:17.094Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.116Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.094Z
    2021-06-06T12:47:17.116Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.123Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.116Z
    2021-06-06T12:47:17.123Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.126Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.123Z
    2021-06-06T12:47:17.126Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.157Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.126Z
    2021-06-06T12:47:17.151Z
checkpoint.flowState.frozenFiber.hash: 
    63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA
    FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.162Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2904382993961639663), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2904382993961639663--2565256195797037477-2-0), senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.162Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.159Z
    2021-06-06T12:47:17.162Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.239Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.162Z
    2021-06-06T12:47:17.239Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.247Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), maySkipCheckpoint=false, fiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.239Z
    2021-06-06T12:47:17.243Z
checkpoint.flowState.frozenFiber.hash: 
    FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0
    A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))])
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.247Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.300Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1371319136460519331), payload=net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.247Z
    2021-06-06T12:47:17.300Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=1371319136460519331)]
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.301Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1371319136460519331)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.300Z
    2021-06-06T12:47:17.301Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=1371319136460519331)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.301Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.341Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.301Z
    2021-06-06T12:47:17.306Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7695957833888577654, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.347Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.349Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.306Z
    2021-06-06T12:47:17.349Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[WARN ] 2021-06-06T12:47:17,377Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] error {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T12:47:17,378Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[WARN ] 2021-06-06T12:47:17,420Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] errored, dumping all transitions:

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.053Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=91330836E773720B5D7695AD87D084313D7220E63684DC65821690E286E41494), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776])
    SignalFlowHasStarted(flowId=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2904382993961639663), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1371319136460519331), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2904382993961639663--2565256195797037477-0-0), senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.026Z
    2021-06-06T12:47:17.031Z
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@8325776]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.062Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.031Z
    2021-06-06T12:47:17.062Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.065Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.062Z
    2021-06-06T12:47:17.065Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.078Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), maySkipCheckpoint=false, fiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.065Z
    2021-06-06T12:47:17.073Z
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=91330836E773720B5D7695AD87D084313D7220E63684DC65821690E286E41494)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.flowIoRequest: 
    null
    Receive
isFlowResumed: 
    true
    false
numberOfCommits: 
    0
    2


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.083Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.073Z
    2021-06-06T12:47:17.082Z
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.094Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.082Z
    2021-06-06T12:47:17.094Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.116Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.094Z
    2021-06-06T12:47:17.116Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.123Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.116Z
    2021-06-06T12:47:17.123Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.126Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.123Z
    2021-06-06T12:47:17.126Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.157Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.126Z
    2021-06-06T12:47:17.151Z
checkpoint.flowState.frozenFiber.hash: 
    63FEC9804BC70C9D2148E54A4C978EF854818E2313D8FDEB78050E0E0AB0F4DA
    FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.flowIoRequest: 
    Receive
    Send
isFlowResumed: 
    true
    false
numberOfCommits: 
    2
    3


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.162Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2904382993961639663), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2904382993961639663--2565256195797037477-2-0), senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.162Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.159Z
    2021-06-06T12:47:17.162Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.239Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.162Z
    2021-06-06T12:47:17.239Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.247Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), maySkipCheckpoint=false, fiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1371319136460519331)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.239Z
    2021-06-06T12:47:17.243Z
checkpoint.flowState.frozenFiber.hash: 
    FFDB09923D399522B9AA8D6D3B867C9FB83CEA72F315059A19F033E27A3971F0
    A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))])
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.flowIoRequest: 
    Send
    Receive
isFlowResumed: 
    true
    false
numberOfCommits: 
    3
    4


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.247Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.300Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1371319136460519331), payload=net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.247Z
    2021-06-06T12:47:17.300Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=1371319136460519331)]
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.301Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1371319136460519331)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.300Z
    2021-06-06T12:47:17.301Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=1371319136460519331)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=1371319136460519331): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@21f7a3e2], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=2904382993961639663), deduplicationSeed=D-2904382993961639663--2565256195797037477)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.301Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.341Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.301Z
    2021-06-06T12:47:17.306Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7695957833888577654, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.347Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.349Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.306Z
    2021-06-06T12:47:17.349Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] ---
  Timestamp: 2021-06-06T12:47:17.411Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7695957833888577654)], sessions=[], senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71)
    CreateTransaction
    RemoveCheckpoint(id=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3])
    ReleaseSoftLocks(uuid=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7695957833888577654, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Invocation, sessionId=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, timestamp: 2021-06-06T12:47:17.024Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@3c09e65a, errorState=Errored(errors=[FlowError(errorId=7695957833888577654, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@75013381, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=2e65fd05-8a54-487c-8c4d-b2679e567d71, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@4d8ae40e[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T12:47:17.349Z
    2021-06-06T12:47:17.377Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1371319136460519331))]), frozenFiber=A7CCF9EDE70BB03E6CA347A07689280BFD5F52D3A7A5C7894D614951F06CDB84)
    net.corda.node.services.statemachine.FlowState$Finished@3c09e65a
checkpoint.checkpointState.numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@463f9fa3]
    []
numberOfCommits: 
    4
    5
 {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
[WARN ] 2021-06-06T12:47:17,420Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1] error {fiber-id=10000002, flow-id=521f6cb5-d844-4b9c-a97c-33b8ad1ac1c1, invocation_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, invocation_timestamp=2021-06-06T12:47:17.024Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ff5f097d-4122-4c5c-81a0-1c45ecfc02a3, session_timestamp=2021-06-06T12:47:17.024Z, thread-id=245, tx_id=86126A79491D489BB5CCACDEF37875C95C5579DA2B7705826DA02B2E59790118}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T12:47:17,656Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T12:47:17,922Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:47:17,922Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:47:17,927Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T12:47:18,077Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:47:18,077Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:47:18,081Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T12:47:18,225Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T12:47:18,225Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:50:55,425Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:50:55,779Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:50:58,859Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:51:02,591Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:51:02,613Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:51:02,614Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:51:03,315Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:03,344Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:51:03,972Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:03,987Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:03,987Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:51:04,235Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:04,251Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:51:04,922Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:51:05,580Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:51:05,595Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:51:05,642Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:51:05,643Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:51:05,643Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:51:06,673Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:06,673Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:51:06,812Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:06,812Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:51:06,843Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:06,843Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:51:06,965Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:51:06,965Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:07,168Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:07,168Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:07,168Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:07,168Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:07,184Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:07,207Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:07,207Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:07,207Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:07,214Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:07,293Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:07,308Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:07,309Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:07,404Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:07,420Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:07,422Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:07,422Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:07,422Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:51:07,654Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:07,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:51:07,686Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,142Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:51:08,142Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,204Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:08,204Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,236Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:51:08,237Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,237Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,255Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:51:08,298Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,298Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,314Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:51:08,330Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,331Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:51:08,345Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,345Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,345Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:51:08,345Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,361Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:08,361Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,361Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:08,361Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,362Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:51:08,408Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,408Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:51:08,408Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,425Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:51:08,425Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,425Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:51:08,425Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:51:08,439Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,439Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:51:08,454Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,455Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:51:08,486Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:51:08,487Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:51:08,487Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:51:08,532Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:51:08,532Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:08,532Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:51:08,532Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:51:08,555Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:51:08,564Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:51:08,564Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:51:08,615Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:51:14,156Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125053.776-13B4E209BFAF80A0\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:51:14,166Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125053.776-13B4E209BFAF80A0/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125053.776-13B4E209BFAF80A0/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:51:14,179Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125053.776-13B4E209BFAF80A0/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:51:14,283Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125053.776-13B4E209BFAF80A0/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:51:15,310Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:51:15,877Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:51:15,937Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:51:16,072Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:51:16,073Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:51:16,073Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:51:16,210Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:50:53.689Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:51:21,117Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:51:21,221Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:51:21,228Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:52:26,347Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:52:26,654Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:52:29,418Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:52:33,730Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:52:33,750Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:52:33,752Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:52:34,385Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:34,401Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:52:34,892Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:34,908Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:34,908Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:52:35,082Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:35,097Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:52:35,713Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:52:36,377Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:52:36,377Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:52:36,425Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:52:36,426Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:52:36,426Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:52:37,368Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:37,368Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:52:37,496Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:37,497Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:52:37,528Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:37,528Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:52:37,640Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:52:37,641Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:37,796Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:37,812Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:37,812Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:37,812Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:37,830Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:37,830Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:37,830Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:37,830Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:37,859Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:37,891Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:37,892Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:37,893Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,000Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:38,000Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:38,000Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,021Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:52:38,218Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,218Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:52:38,249Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,850Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:52:38,850Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:38,944Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:38,944Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,007Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,023Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:52:39,023Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,024Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:52:39,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,024Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:52:39,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,024Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,040Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:52:39,087Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,087Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:52:39,087Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,088Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:52:39,088Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,088Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:52:39,088Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,103Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,104Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:52:39,119Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,119Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:52:39,135Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,135Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,135Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:52:39,135Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,154Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:39,155Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,155Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:39,155Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,155Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:52:39,215Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,215Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:52:39,215Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,215Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:52:39,215Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,216Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:52:39,216Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:52:39,234Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,234Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:52:39,234Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,234Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:52:39,248Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,249Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:52:39,249Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,249Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,249Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:52:39,278Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:52:39,279Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,279Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:52:39,293Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,293Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:52:39,325Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:52:39,325Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:39,342Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:52:39,342Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:52:39,349Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:52:39,358Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:52:39,358Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:52:39,404Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:52:45,047Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125224.734-61E2A41E70F58674\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:52:45,054Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125224.734-61E2A41E70F58674/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125224.734-61E2A41E70F58674/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:52:45,068Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125224.734-61E2A41E70F58674/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:52:45,162Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125224.734-61E2A41E70F58674/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:52:46,169Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:52:46,738Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:52:46,799Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:52:46,908Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:52:46,909Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:52:46,909Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:52:47,030Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:52:24.651Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:52:52,173Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:52:52,270Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:52:52,277Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:54:24,815Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:54:25,083Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:54:27,792Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:54:31,605Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:54:31,644Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:54:31,647Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:54:32,239Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:32,270Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:54:32,759Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:32,774Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:32,774Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:54:32,948Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:32,964Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:54:33,531Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:54:34,170Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:54:34,186Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:54:34,217Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:54:34,218Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:54:34,218Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:54:35,204Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:35,204Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:54:35,314Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:35,314Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:54:35,345Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:35,345Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:54:35,456Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:54:35,456Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:35,628Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:35,628Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:35,628Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:35,628Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:35,644Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:35,644Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:35,644Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:35,644Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:35,660Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:35,691Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:35,691Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:35,707Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:35,784Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:35,784Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:35,784Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:35,784Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:35,784Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:54:36,034Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,034Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:54:36,065Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,723Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:54:36,723Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,786Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:36,786Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,818Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,818Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:54:36,818Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,834Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:54:36,834Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,834Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:54:36,834Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,835Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:36,835Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:54:36,880Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:36,880Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:54:36,896Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:36,896Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:54:36,896Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:36,896Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:54:36,912Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:36,912Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,912Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:54:36,928Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,928Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:54:36,943Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:36,943Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,943Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:54:36,943Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,960Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:36,960Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,961Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:36,961Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:36,962Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:54:37,022Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:37,022Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:54:37,022Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:37,022Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:54:37,039Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:37,040Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:54:37,040Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:54:37,040Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,054Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:54:37,054Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,054Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:54:37,069Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,072Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:54:37,073Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,073Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,073Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:54:37,100Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,101Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:54:37,101Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:54:37,101Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,101Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:54:37,117Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,117Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:54:37,148Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:54:37,148Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:37,148Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:54:37,148Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:54:37,171Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:54:37,194Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:54:37,194Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:54:37,226Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:54:42,826Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125423.199-E47B29CF52821865\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:54:42,835Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:54:42,850Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:54:42,955Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:54:43,983Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:54:44,563Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:54:44,627Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:54:44,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:54:44,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:54:44,734Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:54:44,847Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:54:23.112Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:54:49,751Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:54:49,845Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:54:49,850Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:54:52,943Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:54:53,274Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:54:53,274Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:53,281Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:54:53,465Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:53,546Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:54:53,563Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:54:53,565Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:54:53,573Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:53,609Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:53,714Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=3873D5CAB682994CA4580DB027298C23BB619AFAF36B3C7E008BD97178CBA1EA uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:54:53,726Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T12:54:54,369Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:54,379Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:54,382Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:54,383Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:54,383Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:54,401Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125423.199-E47B29CF52821865\nodes\1\cordapps] {}
[INFO ] 2021-06-06T12:54:54,402Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:54:54,402Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:54:54,417Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:54:54,449Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:54:54,450Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:54:54,452Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:54:54,493Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:54:54,494Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:54:54,494Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:54:54,498Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:54:23.112Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:54:54,959Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:54:54,964Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:54,964Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:55,182Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:55,184Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:54:55,212Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:54:55,212Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,214Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:55,223Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,230Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:54:55,231Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:54:55,231Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:54:55,236Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,243Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:55,283Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=3873D5CAB682994CA4580DB027298C23BB619AFAF36B3C7E008BD97178CBA1EA uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:54:55,309Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,309Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:55,311Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:54:55,324Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,326Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:55,339Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,339Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:55,340Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:55,340Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:55,352Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125423.199-E47B29CF52821865\nodes\2\cordapps] {}
[INFO ] 2021-06-06T12:54:55,352Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:54:55,353Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:54:55,363Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125423.199-E47B29CF52821865/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:54:55,396Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:54:55,397Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:54:55,398Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:54:55,432Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:54:55,432Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:54:55,432Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:54:55,435Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:54:23.112Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:54:55,847Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:54:55,850Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:55,850Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:56,370Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T12:54:56,372Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T12:54:56,403Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T12:54:56,403Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,405Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:56,415Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,423Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T12:54:56,423Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T12:54:56,423Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T12:54:56,428Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,434Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:56,467Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=3873D5CAB682994CA4580DB027298C23BB619AFAF36B3C7E008BD97178CBA1EA uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T12:54:56,485Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,485Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984093274) {}
[INFO ] 2021-06-06T12:54:56,488Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T12:54:56,497Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,499Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:56,511Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984095212) {}
[INFO ] 2021-06-06T12:54:56,512Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:56,521Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,523Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T12:54:56,531Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,531Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T12:54:56,531Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984096403) {}
[INFO ] 2021-06-06T12:54:56,531Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T12:54:56,775Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242}
[WARN ] 2021-06-06T12:54:56,775Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242}
[INFO ] 2021-06-06T12:54:57,202Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
[INFO ] 2021-06-06T12:54:57,202Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
[INFO ] 2021-06-06T12:54:57,340Z [Mock network] corda.flow. - Flow raised an error: org.hibernate.id.IdentifierGenerationException: null id generated for:class net.corda.samples.carinsurance.schema.InsuranceSchemaV1$PersistentVehicle. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
[INFO ] 2021-06-06T12:54:57,347Z [Mock network] statemachine.StaffedFlowHospital. - Flow [a56c23c5-27f4-4e64-8063-c276106a5237] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=78c574c3-290a-459f-9db8-590c3ec9c2fb, timestamp: 2021-06-06T12:54:56.569Z, entityType: Invocation, sessionId=78c574c3-290a-459f-9db8-590c3ec9c2fb, timestamp: 2021-06-06T12:54:56.569Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-5824277344522957857)=Uninitiated(destination=O=Mock Company 2, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class net.corda.samples.carinsurance.flows.IssueInsurance, classToInitiateWith=class net.corda.samples.carinsurance.flows.IssueInsurance, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-5824277344522957857), additionalEntropy=-325276042745350689)}, sessionsToBeClosed=[], subFlowStack=[Initiating(flowClass=class net.corda.samples.carinsurance.flows.IssueInsurance, classToInitiateWith=class net.corda.samples.carinsurance.flows.IssueInsurance, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=EA2CD14F04921460980C2668A4A2A9144D99364ACBE9C89E6E46EEB0D8B5B00B), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsurance@2342cb3f, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=a4e06d45-920d-4817-b0fb-03ac537b9364, reloadCheckpointAfterSuspendCount=null, numberOfCommits=0, lock=java.util.concurrent.Semaphore@6dea7107[Permits = 0]) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
[INFO ] 2021-06-06T12:54:57,350Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
javax.persistence.PersistenceException: org.hibernate.id.IdentifierGenerationException: null id generated for:class net.corda.samples.carinsurance.schema.InsuranceSchemaV1$PersistentVehicle
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:834) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:794) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:490) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:415) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:216) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:149) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:428) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:266) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:196) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:139) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:192) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:135) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:62) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:803) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:788) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:48) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:40) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:415) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:54) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:246) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$2.invoke(NodeVaultService.kt:257) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:261) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$Companion$recordTransactions$1.invoke(ServiceHubInternal.kt:129) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$Companion$recordTransactions$1.invoke(ServiceHubInternal.kt:54) ~[corda-node-4.6.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.withErrorHandler(CordaPersistence.kt:248) ~[corda-node-api-4.6.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:237) ~[corda-node-api-4.6.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:210) ~[corda-node-api-4.6.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:217) ~[corda-node-api-4.6.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction$default(CordaPersistence.kt:217) ~[corda-node-api-4.6.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$Companion.recordTransactions(ServiceHubInternal.kt:73) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:159) ~[corda-node-4.6.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:1221) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:233) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:175) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:43) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsurance.call(IssueInsurance.kt:61) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsurance.call(IssueInsurance.kt:20) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
Caused by: org.hibernate.id.IdentifierGenerationException: null id generated for:class net.corda.samples.carinsurance.schema.InsuranceSchemaV1$PersistentVehicle
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:192) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:135) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:827) ~[hibernate-core-5.4.3.Final.jar:5.4.3.Final]
	... 52 more
[INFO ] 2021-06-06T12:54:57,358Z [Mock network] statemachine.StaffedFlowHospital. - Flow error kept for overnight observation by [net.corda.node.services.statemachine.StaffedFlowHospital$DatabaseEndocrinologist@19e22671] (error was org.hibernate.id.IdentifierGenerationException: null id generated for:class net.corda.samples.carinsurance.schema.InsuranceSchemaV1$PersistentVehicle) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a56c23c5-27f4-4e64-8063-c276106a5237, invocation_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, invocation_timestamp=2021-06-06T12:54:56.569Z, origin=Only For Testing, session_id=78c574c3-290a-459f-9db8-590c3ec9c2fb, session_timestamp=2021-06-06T12:54:56.569Z, thread-id=242, tx_id=A8E539DD9BD5D145FF4375E8F2B72F8B0BAEDF7A0814A308784679BE96D97424}
[INFO ] 2021-06-06T12:56:44,420Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:56:44,671Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:56:47,559Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:56:51,376Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:56:51,399Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:56:51,400Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:56:52,165Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:52,181Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:56:52,702Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:52,703Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:52,703Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:56:52,876Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:52,892Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:56:53,518Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:56:54,251Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:56:54,251Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:56:54,297Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:56:54,298Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:56:54,298Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:56:55,347Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:55,347Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:56:55,502Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:55,502Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:56:55,533Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:55,533Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:56:55,643Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:56:55,643Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:55,819Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:55,819Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:55,819Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:55,819Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:55,835Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:55,851Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:55,851Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:55,851Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:55,851Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:55,883Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:55,899Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:55,900Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:55,993Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:55,993Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:55,994Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:55,996Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:55,996Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,247Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,247Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,277Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,675Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,675Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,739Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:56,739Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,771Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,771Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,786Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:56,787Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:56:56,852Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:56,852Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,879Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:56:56,880Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,880Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:56:56,897Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:56,911Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,911Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:56:56,912Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,926Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:56,927Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,927Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:56,927Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,927Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,988Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,988Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,988Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:56,988Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:56:56,988Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:57,003Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:56:57,003Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:56:57,003Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,003Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:56:57,019Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,020Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:56:57,020Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,020Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:56:57,024Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,024Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,024Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:56:57,051Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,053Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:56:57,065Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,065Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,066Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:56:57,091Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,091Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:56:57,130Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:56:57,142Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:57,156Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:56:57,156Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:56:57,179Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:56:57,219Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:56:57,219Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:56:57,252Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:57:03,344Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125642.803-D3BBB1FBF20965E6\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:57:03,356Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125642.803-D3BBB1FBF20965E6/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125642.803-D3BBB1FBF20965E6/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:57:03,384Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125642.803-D3BBB1FBF20965E6/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:57:03,530Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125642.803-D3BBB1FBF20965E6/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:57:04,854Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:57:05,427Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:57:05,498Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:57:05,635Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:57:05,636Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:57:05,637Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:57:05,801Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:56:42.698Z
      epoch=1
  } {}
[INFO ] 2021-06-06T12:57:12,874Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T12:57:13,010Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:57:13,018Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T12:59:20,522Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\workflows ... {}
[INFO ] 2021-06-06T12:59:20,825Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:59:25,065Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:59:30,853Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-06T12:59:30,879Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-06T12:59:30,881Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:59:32,329Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:32,358Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-06T12:59:33,130Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:33,173Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:33,189Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-06T12:59:33,835Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:33,851Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:59:34,450Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-06T12:59:35,938Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:59:35,954Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:59:35,999Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:59:36,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-06T12:59:36,000Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-06T12:59:37,894Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:37,894Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-06T12:59:38,052Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:38,052Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-06T12:59:38,142Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:38,143Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-06T12:59:38,285Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-06T12:59:38,285Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:38,558Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:38,606Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:38,607Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:38,622Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:38,682Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:38,730Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:38,730Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:38,731Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:38,762Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:38,890Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:38,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:38,938Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:39,249Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:39,265Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:39,265Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:39,265Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:39,266Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:59:39,504Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:39,504Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:59:39,534Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,114Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-06T12:59:40,114Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,207Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:40,207Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,286Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,286Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-06T12:59:40,302Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,302Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-06T12:59:40,320Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,321Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-06T12:59:40,322Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,322Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,351Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-06T12:59:40,538Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,539Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:59:40,586Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,586Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:59:40,600Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,601Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-06T12:59:40,601Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,616Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,618Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:59:40,648Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,648Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-06T12:59:40,679Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,679Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,679Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-06T12:59:40,679Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,695Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:40,712Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,712Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:40,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,713Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:59:40,759Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,759Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:59:40,759Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,776Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-06T12:59:40,776Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,777Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-06T12:59:40,779Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-06T12:59:40,779Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,780Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-06T12:59:40,792Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,792Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-06T12:59:40,806Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,806Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-06T12:59:40,806Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,806Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,806Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-06T12:59:40,837Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,838Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:59:40,838Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,838Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:59:40,838Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,838Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:59:40,840Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,840Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-06T12:59:40,841Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-06T12:59:40,841Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,841Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-06T12:59:40,842Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,842Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-06T12:59:40,882Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-06T12:59:40,898Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:40,898Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-06T12:59:40,898Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-06T12:59:40,914Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:59:40,928Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in E:\workspace\samples-kotlin\Features\queryableState-carinsurance\.gradle {}
[INFO ] 2021-06-06T12:59:40,928Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-06T12:59:40,974Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-06T12:59:51,721Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125917.307-E771801F7704BD5C\nodes\0\cordapps] {}
[INFO ] 2021-06-06T12:59:51,734Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T12:59:51,753Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T12:59:51,883Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T12:59:54,730Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T12:59:55,349Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T12:59:55,416Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T12:59:55,599Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T12:59:55,601Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T12:59:55,603Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T12:59:56,197Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:59:17.215Z
      epoch=1
  } {}
[INFO ] 2021-06-06T13:00:04,766Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T13:00:04,927Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T13:00:04,937Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T13:00:09,805Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-06T13:00:10,499Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T13:00:10,500Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:10,530Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T13:00:11,139Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:11,330Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T13:00:11,348Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T13:00:11,351Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T13:00:11,360Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:11,398Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:11,510Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=00C403CF912EED63CA511B3A7AFC4B4C85BA827F3D82ED12A849787E7627ABDE uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T13:00:11,522Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-06T13:00:12,893Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:12,915Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:12,920Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:12,921Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:12,921Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:12,964Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125917.307-E771801F7704BD5C\nodes\1\cordapps] {}
[INFO ] 2021-06-06T13:00:12,964Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T13:00:12,964Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T13:00:12,981Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T13:00:13,020Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T13:00:13,021Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T13:00:13,023Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T13:00:13,065Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T13:00:13,065Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T13:00:13,065Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T13:00:13,070Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:59:17.215Z
      epoch=1
  } {}
[INFO ] 2021-06-06T13:00:13,574Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T13:00:13,578Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:13,579Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:14,244Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:14,251Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T13:00:14,371Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T13:00:14,371Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,380Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:14,420Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,458Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T13:00:14,460Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T13:00:14,460Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T13:00:14,486Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,507Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:14,660Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=00C403CF912EED63CA511B3A7AFC4B4C85BA827F3D82ED12A849787E7627ABDE uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T13:00:14,696Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,697Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:14,699Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T13:00:14,714Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,715Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:14,729Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,730Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:14,730Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:14,730Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:14,741Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210606-125917.307-E771801F7704BD5C\nodes\2\cordapps] {}
[INFO ] 2021-06-06T13:00:14,742Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-06T13:00:14,742Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-06T13:00:14,764Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/samples-kotlin/Features/queryableState-carinsurance/workflows/build/mock-network/20210606-125917.307-E771801F7704BD5C/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-06T13:00:15,135Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T13:00:15,137Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-06T13:00:15,139Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-06T13:00:15,176Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-06T13:00:15,176Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-06T13:00:15,176Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-06T13:00:15,181Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-06T12:59:17.215Z
      epoch=1
  } {}
[INFO ] 2021-06-06T13:00:16,039Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-06T13:00:16,055Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:16,056Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:16,594Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-06T13:00:16,596Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-06T13:00:16,625Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-06T13:00:16,625Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,628Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:16,638Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,647Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-06T13:00:16,647Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-06T13:00:16,647Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-06T13:00:16,652Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,657Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:16,694Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=00C403CF912EED63CA511B3A7AFC4B4C85BA827F3D82ED12A849787E7627ABDE uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-06T13:00:16,716Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,716Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1622984410499) {}
[INFO ] 2021-06-06T13:00:16,718Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-06T13:00:16,730Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,731Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:16,742Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1622984414371) {}
[INFO ] 2021-06-06T13:00:16,744Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:16,754Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,755Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-06T13:00:16,765Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,765Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-06T13:00:16,765Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1622984416625) {}
[INFO ] 2021-06-06T13:00:16,765Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-06T13:00:17,025Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243}
[WARN ] 2021-06-06T13:00:17,025Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243}
[INFO ] 2021-06-06T13:00:17,905Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:17,905Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,416Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,646Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,705Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,765Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,765Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b7d8051c-7c4c-42aa-a40a-bf5cb56bbc93, invocation_id=6442ebbd-8352-4091-bdeb-af0d49a36410, invocation_timestamp=2021-06-06T13:00:16.804Z, origin=Only For Testing, session_id=6442ebbd-8352-4091-bdeb-af0d49a36410, session_timestamp=2021-06-06T13:00:16.804Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,791Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,796Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@3b2142cd, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@19a27adb[Permits = 0]) {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[INFO ] 2021-06-06T13:00:18,800Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T13:00:18,808Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T13:00:18,852Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] errored, dumping all transitions:

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.616Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E820F4C7C3B7FB9CE4FA86A6ADD3E815AF0D5C513BA4506C2AE0253AC40AD2A3), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665])
    SignalFlowHasStarted(flowId=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5676314292324138571), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2325686406727668943), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5676314292324138571--3767052414847839501-0-0), senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.595Z
    2021-06-06T13:00:18.598Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.623Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.598Z
    2021-06-06T13:00:18.623Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.626Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.623Z
    2021-06-06T13:00:18.626Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.639Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), maySkipCheckpoint=false, fiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.626Z
    2021-06-06T13:00:18.635Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E820F4C7C3B7FB9CE4FA86A6ADD3E815AF0D5C513BA4506C2AE0253AC40AD2A3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.643Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.635Z
    2021-06-06T13:00:18.643Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.653Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.643Z
    2021-06-06T13:00:18.653Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.668Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.653Z
    2021-06-06T13:00:18.668Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.674Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.668Z
    2021-06-06T13:00:18.674Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.676Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.674Z
    2021-06-06T13:00:18.676Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.676Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.700Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.676Z
    2021-06-06T13:00:18.697Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62
    C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.705Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5676314292324138571), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5676314292324138571--3767052414847839501-2-0), senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.705Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.701Z
    2021-06-06T13:00:18.705Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.744Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.705Z
    2021-06-06T13:00:18.744Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.749Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), maySkipCheckpoint=false, fiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.744Z
    2021-06-06T13:00:18.747Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))])
checkpoint.flowState.frozenFiber.hash: 
    C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0
    40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.750Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.790Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2325686406727668943), payload=net.corda.node.services.statemachine.EndSessionMessage@568b5391), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.750Z
    2021-06-06T13:00:18.789Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@568b5391]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2325686406727668943)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.790Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2325686406727668943)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.789Z
    2021-06-06T13:00:18.790Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@568b5391], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2325686406727668943)]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.791Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.790Z
    2021-06-06T13:00:18.791Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.811Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.791Z
    2021-06-06T13:00:18.795Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6580614083029541662, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.817Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.795Z
    2021-06-06T13:00:18.819Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[WARN ] 2021-06-06T13:00:18,852Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] error {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-06T13:00:18,854Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[WARN ] 2021-06-06T13:00:18,890Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] errored, dumping all transitions:

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.616Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E820F4C7C3B7FB9CE4FA86A6ADD3E815AF0D5C513BA4506C2AE0253AC40AD2A3), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665])
    SignalFlowHasStarted(flowId=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5676314292324138571), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2325686406727668943), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5676314292324138571--3767052414847839501-0-0), senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.595Z
    2021-06-06T13:00:18.598Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fb37665]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.623Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.598Z
    2021-06-06T13:00:18.623Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.626Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.623Z
    2021-06-06T13:00:18.626Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.639Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), maySkipCheckpoint=false, fiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.626Z
    2021-06-06T13:00:18.635Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E820F4C7C3B7FB9CE4FA86A6ADD3E815AF0D5C513BA4506C2AE0253AC40AD2A3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.643Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.635Z
    2021-06-06T13:00:18.643Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.653Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.643Z
    2021-06-06T13:00:18.653Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.668Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.653Z
    2021-06-06T13:00:18.668Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.674Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.668Z
    2021-06-06T13:00:18.674Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.676Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.674Z
    2021-06-06T13:00:18.676Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.676Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.700Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.676Z
    2021-06-06T13:00:18.697Z
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    552361359E5F1D0B48666C8F4EF722D0BB18C6EB3D6F3BE201BBB006A87CDE62
    C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.705Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5676314292324138571), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5676314292324138571--3767052414847839501-2-0), senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.705Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.701Z
    2021-06-06T13:00:18.705Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.744Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.705Z
    2021-06-06T13:00:18.744Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.749Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), maySkipCheckpoint=false, fiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2325686406727668943)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.744Z
    2021-06-06T13:00:18.747Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))])
checkpoint.flowState.frozenFiber.hash: 
    C02F261A20E9287122642EE998EB6218497E7C4310C79A48AF929981297892C0
    40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.750Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.790Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2325686406727668943), payload=net.corda.node.services.statemachine.EndSessionMessage@568b5391), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.750Z
    2021-06-06T13:00:18.789Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@568b5391]
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2325686406727668943)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.790Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2325686406727668943)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-06T13:00:18.789Z
    2021-06-06T13:00:18.790Z
checkpoint.checkpointState.sessions.SessionId(toLong=2325686406727668943): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@568b5391], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=5676314292324138571), deduplicationSeed=D-5676314292324138571--3767052414847839501)
    null
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2325686406727668943)]
    []


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.791Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.790Z
    2021-06-06T13:00:18.791Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)]


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.811Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-06T13:00:18.791Z
    2021-06-06T13:00:18.795Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6580614083029541662, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.817Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.795Z
    2021-06-06T13:00:18.819Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] ---
  Timestamp: 2021-06-06T13:00:18.882Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6580614083029541662)], sessions=[], senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f)
    CreateTransaction
    RemoveCheckpoint(id=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45])
    ReleaseSoftLocks(uuid=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ac7dd6c5-3b22-4818-b18f-be2cf9d4e748], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6580614083029541662, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Invocation, sessionId=a4f25952-a364-4176-82de-78bdbf5c9795, timestamp: 2021-06-06T13:00:18.593Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=16BB3A4CE3C5A14964E2F68E67D63F4C16DF4D6AC9400F6DE155E959B4C804DF), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@60cea133, errorState=Errored(errors=[FlowError(errorId=6580614083029541662, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@3b2142cd, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=59263db7-f3e2-45b4-b6fc-3f9c3f7ab14f, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@19a27adb[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-06T13:00:18.819Z
    2021-06-06T13:00:18.852Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2325686406727668943))]), frozenFiber=40FB54E306E56D53A99CBDAE3F3252FAA718D5CEA5BD995766677D7804815FF6)
    net.corda.node.services.statemachine.FlowState$Finished@60cea133
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bc7bb45]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
[WARN ] 2021-06-06T13:00:18,890Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ac7dd6c5-3b22-4818-b18f-be2cf9d4e748] error {fiber-id=10000002, flow-id=ac7dd6c5-3b22-4818-b18f-be2cf9d4e748, invocation_id=a4f25952-a364-4176-82de-78bdbf5c9795, invocation_timestamp=2021-06-06T13:00:18.593Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a4f25952-a364-4176-82de-78bdbf5c9795, session_timestamp=2021-06-06T13:00:18.593Z, thread-id=243, tx_id=59E8419FEC8E037F86A50E89CC4B28DC1B983EDB4AC5A805234B5AEEEEEC56B9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-06T13:00:19,292Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-06T13:00:19,735Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T13:00:19,736Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T13:00:19,753Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-06T13:00:19,938Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T13:00:19,938Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-06T13:00:19,944Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-06T13:00:20,126Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-06T13:00:20,126Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
