[INFO ] 2021-06-07T01:26:39,508Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:26:40,015Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:26:42,290Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:26:45,516Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:26:45,550Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:26:45,553Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:26:46,603Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:46,635Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:26:47,447Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:47,462Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:47,462Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:26:47,712Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:47,727Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:26:48,462Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:26:49,697Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:26:49,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:26:49,776Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:26:49,776Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:26:49,777Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:26:51,138Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:51,138Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:26:51,325Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:51,325Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:26:51,404Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:51,404Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:26:51,654Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:26:51,655Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:51,856Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:51,872Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:51,872Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:51,872Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:51,872Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:51,888Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:51,888Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:51,888Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:51,905Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:51,984Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:52,000Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:52,003Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:52,170Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:52,202Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:52,202Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:52,202Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:52,202Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:26:52,829Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:52,844Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:26:52,893Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,580Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:26:53,580Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,642Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:53,642Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,673Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,689Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:26:53,689Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,689Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:26:53,690Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,690Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:26:53,690Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,690Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:53,690Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:26:53,735Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:53,735Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:26:53,750Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:53,750Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:26:53,750Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:53,750Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:26:53,750Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:53,751Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,766Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:26:53,782Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,782Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:26:53,817Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:53,818Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,818Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:26:53,818Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,891Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:53,938Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,938Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:53,939Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:53,939Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:26:54,029Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:54,029Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:26:54,029Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:54,045Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:26:54,046Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:54,047Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:26:54,048Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:26:54,061Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,061Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:26:54,077Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,077Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:26:54,093Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,093Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:26:54,094Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,094Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,094Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:26:54,125Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,125Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:26:54,125Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,126Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:26:54,173Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:54,175Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:26:56,443Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:26:56,459Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:56,459Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:26:56,459Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:26:56,480Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:26:56,522Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:26:56,522Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:26:56,557Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:27:02,939Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-012636.349-8080712A1D6AFABD\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:27:02,953Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:27:02,973Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:27:03,231Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:27:05,408Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:27:06,362Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:27:06,480Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:27:06,730Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:27:06,731Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:27:06,731Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:27:06,923Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:26:36.167Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:27:14,208Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:27:14,390Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:27:14,399Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:27:18,857Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:27:19,290Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:27:19,290Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:19,299Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:27:19,510Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:19,610Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:27:19,630Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:27:19,633Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:27:19,647Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:19,705Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:19,899Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:27:19,917Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:27:20,630Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:20,643Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:20,646Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:20,647Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:20,647Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:20,681Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-012636.349-8080712A1D6AFABD\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:27:20,682Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:27:20,682Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:27:20,795Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:27:20,858Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:27:20,861Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:27:20,865Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:27:20,952Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:27:20,952Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:27:20,953Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:27:20,961Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:26:36.167Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:27:21,663Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:27:21,670Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:21,670Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:21,945Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:21,948Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:27:21,999Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:27:21,999Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,002Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:22,467Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,484Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:27:22,485Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:27:22,485Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:27:22,493Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,501Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:22,582Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:27:22,613Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,613Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:22,617Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:27:22,635Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,638Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:22,658Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,658Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:22,659Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:22,659Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:22,691Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-012636.349-8080712A1D6AFABD\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:27:22,692Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:27:22,693Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:27:22,805Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-012636.349-8080712A1D6AFABD/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:27:22,856Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:27:22,858Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:27:22,861Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:27:22,932Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:27:22,932Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:27:22,932Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:27:22,938Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:26:36.167Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:27:23,498Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:27:23,503Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:23,503Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:23,766Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:27:23,768Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:27:23,806Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:27:23,806Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:23,808Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:23,817Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:23,832Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:27:23,833Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:27:23,833Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:27:23,839Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:23,848Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:23,925Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:27:23,950Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:23,950Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029239290) {}
[INFO ] 2021-06-07T01:27:23,952Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:27:23,970Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:23,973Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:23,987Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029241999) {}
[INFO ] 2021-06-07T01:27:23,988Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:24,003Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:24,006Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:27:24,017Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:24,018Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:27:24,018Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029243806) {}
[INFO ] 2021-06-07T01:27:24,018Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:27:24,337Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246}
[WARN ] 2021-06-07T01:27:24,337Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246}
[INFO ] 2021-06-07T01:27:24,809Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:24,809Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:24,988Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,266Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,345Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,477Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,477Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=59e1a3f2-4c71-47ad-aa4f-0b911c58393c, invocation_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, invocation_timestamp=2021-06-07T01:27:24.075Z, origin=Only For Testing, session_id=fe78f0c6-e1cf-405a-bdb5-aa49ba870bf1, session_timestamp=2021-06-07T01:27:24.075Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,520Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,528Z [Mock network] statemachine.StaffedFlowHospital. - Flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@5145a7e1, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@3bca81a4[Permits = 0]) {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[INFO ] 2021-06-07T01:27:25,533Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-07T01:27:25,543Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:27:25,593Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] errored, dumping all transitions:

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.227Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=564569C9A038F372FF2261F6FE18F3EAB18E18338FEA7F6940CA642593A8F3A1), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62])
    SignalFlowHasStarted(flowId=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3942120072995383587), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2302742650235057285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3942120072995383587--67736240543592909-0-0), senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.197Z
    2021-06-07T01:27:25.202Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62]
    []


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.238Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.202Z
    2021-06-07T01:27:25.238Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.242Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.238Z
    2021-06-07T01:27:25.242Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.258Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), maySkipCheckpoint=false, fiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.242Z
    2021-06-07T01:27:25.253Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=564569C9A038F372FF2261F6FE18F3EAB18E18338FEA7F6940CA642593A8F3A1)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.262Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.253Z
    2021-06-07T01:27:25.261Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.276Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.261Z
    2021-06-07T01:27:25.276Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.290Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.276Z
    2021-06-07T01:27:25.290Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.298Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.290Z
    2021-06-07T01:27:25.298Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.301Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.298Z
    2021-06-07T01:27:25.301Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.301Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.336Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.301Z
    2021-06-07T01:27:25.331Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE
    DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
numberOfCommits: 
    2
    3


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.344Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3942120072995383587), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3942120072995383587--67736240543592909-2-0), senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.344Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.339Z
    2021-06-07T01:27:25.344Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.440Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.344Z
    2021-06-07T01:27:25.440Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.449Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), maySkipCheckpoint=false, fiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.440Z
    2021-06-07T01:27:25.445Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62
    59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))])
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
numberOfCommits: 
    3
    4


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.450Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.517Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2302742650235057285), payload=net.corda.node.services.statemachine.EndSessionMessage@28fef427), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.450Z
    2021-06-07T01:27:25.517Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2302742650235057285)]
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@28fef427]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.519Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2302742650235057285)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.517Z
    2021-06-07T01:27:25.518Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2302742650235057285)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@28fef427], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)
    null


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.519Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.518Z
    2021-06-07T01:27:25.519Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.549Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.519Z
    2021-06-07T01:27:25.526Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3055937337805805030, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.556Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.558Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.526Z
    2021-06-07T01:27:25.558Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[WARN ] 2021-06-07T01:27:25,593Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] error {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:27:25,595Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[WARN ] 2021-06-07T01:27:25,659Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] errored, dumping all transitions:

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.227Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=564569C9A038F372FF2261F6FE18F3EAB18E18338FEA7F6940CA642593A8F3A1), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62])
    SignalFlowHasStarted(flowId=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3942120072995383587), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2302742650235057285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3942120072995383587--67736240543592909-0-0), senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.197Z
    2021-06-07T01:27:25.202Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@403ddb62]
    []


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.238Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.202Z
    2021-06-07T01:27:25.238Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.242Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.238Z
    2021-06-07T01:27:25.242Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.258Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), maySkipCheckpoint=false, fiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.242Z
    2021-06-07T01:27:25.253Z
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=564569C9A038F372FF2261F6FE18F3EAB18E18338FEA7F6940CA642593A8F3A1)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE)
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.262Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.253Z
    2021-06-07T01:27:25.261Z
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.276Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.261Z
    2021-06-07T01:27:25.276Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.290Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.276Z
    2021-06-07T01:27:25.290Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.298Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.290Z
    2021-06-07T01:27:25.298Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.301Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.298Z
    2021-06-07T01:27:25.301Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.301Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.336Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.301Z
    2021-06-07T01:27:25.331Z
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.flowState.frozenFiber.hash: 
    CB4DB46C65579B0E1F55CCAC7034D1C25C911CBB7A6F219CC88985F6089E7EEE
    DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.checkpointState.numberOfCommits: 
    2
    3
numberOfCommits: 
    2
    3


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.344Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3942120072995383587), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3942120072995383587--67736240543592909-2-0), senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.344Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.339Z
    2021-06-07T01:27:25.344Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.440Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.344Z
    2021-06-07T01:27:25.440Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.449Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), maySkipCheckpoint=false, fiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2302742650235057285)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.440Z
    2021-06-07T01:27:25.445Z
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.flowState.frozenFiber.hash: 
    DF05A831D9ACE75736D476FA6478089D789141A74D7E7ED572FC7FF730139E62
    59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))])
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.checkpointState.numberOfCommits: 
    3
    4
numberOfCommits: 
    3
    4


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.450Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.517Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2302742650235057285), payload=net.corda.node.services.statemachine.EndSessionMessage@28fef427), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.450Z
    2021-06-07T01:27:25.517Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=2302742650235057285)]
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@28fef427]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.519Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2302742650235057285)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.517Z
    2021-06-07T01:27:25.518Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=2302742650235057285)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=2302742650235057285): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@28fef427], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=3942120072995383587), deduplicationSeed=D-3942120072995383587--67736240543592909)
    null


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.519Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.518Z
    2021-06-07T01:27:25.519Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)]


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.549Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.timestamp: 
    2021-06-07T01:27:25.519Z
    2021-06-07T01:27:25.526Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3055937337805805030, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.556Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.558Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:27:25.526Z
    2021-06-07T01:27:25.558Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] ---
  Timestamp: 2021-06-07T01:27:25.642Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3055937337805805030)], sessions=[], senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff)
    CreateTransaction
    RemoveCheckpoint(id=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47])
    ReleaseSoftLocks(uuid=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3055937337805805030, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Invocation, sessionId=47bc94db-9012-46e3-b790-458f16f1aa6e, timestamp: 2021-06-07T01:27:25.195Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=BF0206EC808B365B186954F79B8622DEF7BDE83F1967E84298588572429EA32E), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@28c55c70, errorState=Errored(errors=[FlowError(errorId=3055937337805805030, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@5145a7e1, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=6918a802-37fd-43c9-9779-575e08f4e7ff, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@3bca81a4[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.timestamp: 
    2021-06-07T01:27:25.558Z
    2021-06-07T01:27:25.594Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2302742650235057285))]), frozenFiber=59F7259BACB3433DD8C93C8261B020FD23702819540170E7AE125366034F11B7)
    net.corda.node.services.statemachine.FlowState$Finished@28c55c70
checkpoint.checkpointState.numberOfCommits: 
    4
    5
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b2cb47]
    []
 {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
[WARN ] 2021-06-07T01:27:25,659Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea] error {fiber-id=10000002, flow-id=fa08fd3e-b277-46a3-aadc-f21cb5d3c8ea, invocation_id=47bc94db-9012-46e3-b790-458f16f1aa6e, invocation_timestamp=2021-06-07T01:27:25.195Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47bc94db-9012-46e3-b790-458f16f1aa6e, session_timestamp=2021-06-07T01:27:25.195Z, thread-id=246, tx_id=3A763FE3A37A5C2A3AD9CF8E2B02CCD5DAEAE07E80938BE5C00B13AB1F78A532}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:69) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:66) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:27:26,034Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6621086a-d322-481f-8647-a13f7b68b4ff, invocation_id=33304f35-a43a-4cc6-b259-dd5f20b5eeee, invocation_timestamp=2021-06-07T01:27:26.019Z, origin=Only For Testing, session_id=33304f35-a43a-4cc6-b259-dd5f20b5eeee, session_timestamp=2021-06-07T01:27:26.019Z, thread-id=246}
[WARN ] 2021-06-07T01:27:26,036Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6621086a-d322-481f-8647-a13f7b68b4ff, invocation_id=33304f35-a43a-4cc6-b259-dd5f20b5eeee, invocation_timestamp=2021-06-07T01:27:26.019Z, origin=Only For Testing, session_id=33304f35-a43a-4cc6-b259-dd5f20b5eeee, session_timestamp=2021-06-07T01:27:26.019Z, thread-id=246}
[INFO ] 2021-06-07T01:27:26,071Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T01:27:26,176Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:27:26,177Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:27:26,195Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T01:27:26,251Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:27:26,252Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:27:26,255Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T01:27:26,292Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:27:26,292Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:32:38,714Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:32:39,328Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:32:43,012Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:32:47,250Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:32:47,283Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:32:47,284Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:32:48,619Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:48,667Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:32:49,743Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:49,770Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:49,771Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:32:50,160Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:50,204Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:32:51,390Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:32:52,849Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:32:52,880Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:32:52,959Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:32:52,960Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:32:52,960Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:32:55,085Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:55,086Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:32:55,367Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:55,368Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:32:55,443Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:55,445Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:32:55,737Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:32:55,737Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:56,031Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:56,047Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:56,047Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:56,047Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:56,064Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:56,077Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:56,077Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:56,077Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:32:56,093Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:56,154Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:56,169Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:56,176Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:56,327Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:56,363Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:56,363Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:56,365Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:56,365Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:32:57,053Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:57,054Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:32:57,108Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:57,975Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:32:57,991Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,069Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:58,069Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,115Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,130Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:32:58,130Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,130Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:32:58,130Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,130Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:32:58,131Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,131Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,146Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:32:58,208Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,208Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:32:58,223Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,223Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:32:58,223Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,226Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:32:58,226Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,240Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,240Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:32:58,254Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,254Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:32:58,286Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,286Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,286Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:32:58,286Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,316Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:58,334Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,335Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:58,335Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,335Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:32:58,411Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,428Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:32:58,428Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,442Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:32:58,442Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,458Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:32:58,458Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:32:58,458Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,458Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:32:58,473Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,473Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:32:58,493Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,493Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:32:58,494Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,494Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,507Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,537Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:32:58,538Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,538Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:32:58,553Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:32:58,553Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,554Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:32:58,645Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:32:58,645Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:33:01,837Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:33:01,853Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:33:01,853Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:33:01,853Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:33:01,876Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:33:01,929Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:33:01,929Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:33:01,999Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:33:14,161Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013235.048-E6C9FF100C547ED8\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:33:14,216Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:33:14,248Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:33:14,676Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:33:17,404Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:33:18,591Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:33:18,790Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:33:19,069Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:33:19,070Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:33:19,071Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:33:19,380Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:32:34.826Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:33:28,594Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:33:28,799Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:33:28,809Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:33:33,033Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:33:33,538Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:33:33,538Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:33,545Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:33:33,803Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:33,899Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:33:33,921Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:33:33,924Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:33:33,935Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:33,990Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:34,176Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:33:34,194Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:33:34,947Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:34,966Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:34,970Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:34,972Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:34,972Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:35,013Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013235.048-E6C9FF100C547ED8\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:33:35,015Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:33:35,015Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:33:35,138Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:33:35,206Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:33:35,209Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:33:35,214Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:33:35,306Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:33:35,306Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:33:35,307Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:33:35,316Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:32:34.826Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:33:36,073Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:33:36,081Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:36,081Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:36,451Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:36,454Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:33:36,518Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:33:36,518Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:36,523Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:37,137Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,162Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:33:37,163Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:33:37,163Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:33:37,180Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,190Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:37,303Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:33:37,348Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,348Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:37,353Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:33:37,374Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,378Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:37,402Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,402Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:37,404Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:37,404Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:37,438Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013235.048-E6C9FF100C547ED8\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:33:37,439Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:33:37,439Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:33:37,566Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013235.048-E6C9FF100C547ED8/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:33:37,633Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:33:37,636Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:33:37,640Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:33:37,731Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:33:37,731Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:33:37,731Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:33:37,740Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:32:34.826Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:33:38,537Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:33:38,543Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:38,543Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:38,873Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:33:38,876Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:33:38,926Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:33:38,926Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:38,929Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:38,954Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:38,977Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:33:38,979Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:33:38,979Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:33:38,989Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:38,999Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:39,116Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:33:39,153Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:39,153Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029613538) {}
[INFO ] 2021-06-07T01:33:39,156Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:33:39,174Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:39,176Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:39,199Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029616518) {}
[INFO ] 2021-06-07T01:33:39,203Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:39,223Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:39,227Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:33:39,245Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:39,245Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:33:39,246Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029618926) {}
[INFO ] 2021-06-07T01:33:39,246Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:33:39,724Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249}
[WARN ] 2021-06-07T01:33:39,724Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249}
[INFO ] 2021-06-07T01:33:40,532Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:40,532Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:40,781Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,070Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,158Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,285Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,285Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9deb49bc-4416-4012-a8c7-3f9f193cc7bd, invocation_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, invocation_timestamp=2021-06-07T01:33:39.317Z, origin=Only For Testing, session_id=931c8fed-df56-4f2b-957a-9a5b075ec85c, session_timestamp=2021-06-07T01:33:39.317Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,322Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,330Z [Mock network] statemachine.StaffedFlowHospital. - Flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@37700e11, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@616409bd[Permits = 0]) {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[INFO ] 2021-06-07T01:33:41,336Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:75) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:67) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-07T01:33:41,347Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:75) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:67) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:33:41,414Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] errored, dumping all transitions:

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.036Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9B24462F1B21EB46282A4DCD61C93DEFA44576C7AC4A8C4479246CABC8B7D0DB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f])
    SignalFlowHasStarted(flowId=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2737224670010307780), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6973149532313360570), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2737224670010307780-6534845791220161915-0-0), senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.007Z
    2021-06-07T01:33:41.014Z
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.046Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.014Z
    2021-06-07T01:33:41.046Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.050Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.046Z
    2021-06-07T01:33:41.050Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.063Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), maySkipCheckpoint=false, fiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.050Z
    2021-06-07T01:33:41.057Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9B24462F1B21EB46282A4DCD61C93DEFA44576C7AC4A8C4479246CABC8B7D0DB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.068Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.057Z
    2021-06-07T01:33:41.067Z
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.082Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.067Z
    2021-06-07T01:33:41.082Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.096Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.082Z
    2021-06-07T01:33:41.096Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.111Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.096Z
    2021-06-07T01:33:41.111Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.115Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.111Z
    2021-06-07T01:33:41.115Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.116Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.150Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.115Z
    2021-06-07T01:33:41.146Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7
    6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.158Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2737224670010307780), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2737224670010307780-6534845791220161915-2-0), senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.158Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.153Z
    2021-06-07T01:33:41.158Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.254Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.158Z
    2021-06-07T01:33:41.254Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.260Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), maySkipCheckpoint=false, fiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.254Z
    2021-06-07T01:33:41.257Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))])
checkpoint.flowState.frozenFiber.hash: 
    6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C
    52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.261Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.321Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6973149532313360570), payload=net.corda.node.services.statemachine.EndSessionMessage@54360ac7), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.261Z
    2021-06-07T01:33:41.321Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-6973149532313360570)]
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@54360ac7]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.322Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6973149532313360570)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-6973149532313360570)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@54360ac7], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.322Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.321Z
    2021-06-07T01:33:41.322Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.353Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.322Z
    2021-06-07T01:33:41.328Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3448625998798714452, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.360Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.364Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.328Z
    2021-06-07T01:33:41.363Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[WARN ] 2021-06-07T01:33:41,414Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] error {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:75) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:67) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:33:41,418Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[WARN ] 2021-06-07T01:33:41,490Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] errored, dumping all transitions:

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.036Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9B24462F1B21EB46282A4DCD61C93DEFA44576C7AC4A8C4479246CABC8B7D0DB), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f])
    SignalFlowHasStarted(flowId=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2737224670010307780), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6973149532313360570), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2737224670010307780-6534845791220161915-0-0), senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.007Z
    2021-06-07T01:33:41.014Z
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@312e051f]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.046Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.014Z
    2021-06-07T01:33:41.046Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.050Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.046Z
    2021-06-07T01:33:41.050Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.063Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), maySkipCheckpoint=false, fiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.050Z
    2021-06-07T01:33:41.057Z
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9B24462F1B21EB46282A4DCD61C93DEFA44576C7AC4A8C4479246CABC8B7D0DB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7)
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.progressStep: 
    null
    Starting
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.068Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.057Z
    2021-06-07T01:33:41.067Z
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.082Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.067Z
    2021-06-07T01:33:41.082Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.096Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.082Z
    2021-06-07T01:33:41.096Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.111Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.096Z
    2021-06-07T01:33:41.111Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.115Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.111Z
    2021-06-07T01:33:41.115Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.116Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.150Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.115Z
    2021-06-07T01:33:41.146Z
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    85D8BC2D9EA73F89555CA03D0389167FC0F0AA7A57D678D4514F744236286FA7
    6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C
checkpoint.flowIoRequest: 
    Receive
    Send
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.158Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2737224670010307780), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2737224670010307780-6534845791220161915-2-0), senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.158Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.153Z
    2021-06-07T01:33:41.158Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.254Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.158Z
    2021-06-07T01:33:41.254Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.260Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), maySkipCheckpoint=false, fiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6973149532313360570)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.254Z
    2021-06-07T01:33:41.257Z
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))])
checkpoint.flowState.frozenFiber.hash: 
    6D11F06C923760D415C3D7CD4B8B303E4A1E307D93C0D3061F12C012A3EC973C
    52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7
checkpoint.flowIoRequest: 
    Send
    Receive
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.261Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.321Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6973149532313360570), payload=net.corda.node.services.statemachine.EndSessionMessage@54360ac7), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.261Z
    2021-06-07T01:33:41.321Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=-6973149532313360570)]
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@54360ac7]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.322Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6973149532313360570)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=-6973149532313360570)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=-6973149532313360570): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@54360ac7], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=-2737224670010307780), deduplicationSeed=D--2737224670010307780-6534845791220161915)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.322Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.321Z
    2021-06-07T01:33:41.322Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)]


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.353Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.322Z
    2021-06-07T01:33:41.328Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3448625998798714452, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.360Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.364Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.328Z
    2021-06-07T01:33:41.363Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] ---
  Timestamp: 2021-06-07T01:33:41.451Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3448625998798714452)], sessions=[], senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778)
    CreateTransaction
    RemoveCheckpoint(id=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e])
    ReleaseSoftLocks(uuid=6d220cd2-fb1f-495b-97b4-bca30d0c15c8)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[6d220cd2-fb1f-495b-97b4-bca30d0c15c8], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3448625998798714452, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Invocation, sessionId=d6dd910c-a316-4c28-af05-601204a63e9c, timestamp: 2021-06-07T01:33:41.006Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=2FE76F2382783B129A97B9F1A323DAE48F60E460E074125128520859C00BE637), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@293b504a, errorState=Errored(errors=[FlowError(errorId=-3448625998798714452, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@37700e11, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=1731ea52-cc7b-4a4f-a06d-863909334778, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@616409bd[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:33:41.363Z
    2021-06-07T01:33:41.416Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.checkpointState.numberOfCommits: 
    4
    5
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6973149532313360570))]), frozenFiber=52D137FD9C33F0913D86D7B5245C808A4F993A3C2C39F661919D89BE00C38DD7)
    net.corda.node.services.statemachine.FlowState$Finished@293b504a
isRemoved: 
    false
    true
numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fffc51e]
    []
 {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
[WARN ] 2021-06-07T01:33:41,490Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6d220cd2-fb1f-495b-97b4-bca30d0c15c8] error {fiber-id=10000002, flow-id=6d220cd2-fb1f-495b-97b4-bca30d0c15c8, invocation_id=d6dd910c-a316-4c28-af05-601204a63e9c, invocation_timestamp=2021-06-07T01:33:41.006Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d6dd910c-a316-4c28-af05-601204a63e9c, session_timestamp=2021-06-07T01:33:41.006Z, thread-id=249, tx_id=B1CE20E578173F801201F5FCCE1ED88A0313ABA45F781726816CD011A9CFEAE2}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:75) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:67) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:33:42,038Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=c82a0a5c-8d4b-4603-850b-9e8a2fffbd74, invocation_id=1d14e074-721e-4a8f-9506-500e22ea2f7d, invocation_timestamp=2021-06-07T01:33:41.997Z, origin=Only For Testing, session_id=1d14e074-721e-4a8f-9506-500e22ea2f7d, session_timestamp=2021-06-07T01:33:41.997Z, thread-id=249}
[WARN ] 2021-06-07T01:33:42,047Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=c82a0a5c-8d4b-4603-850b-9e8a2fffbd74, invocation_id=1d14e074-721e-4a8f-9506-500e22ea2f7d, invocation_timestamp=2021-06-07T01:33:41.997Z, origin=Only For Testing, session_id=1d14e074-721e-4a8f-9506-500e22ea2f7d, session_timestamp=2021-06-07T01:33:41.997Z, thread-id=249}
[INFO ] 2021-06-07T01:33:42,154Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T01:33:42,233Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:33:42,233Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:33:42,242Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T01:33:42,309Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:33:42,309Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:33:42,311Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T01:33:42,358Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:33:42,358Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:35:18,396Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:35:18,820Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:35:21,222Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:35:24,041Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:35:24,060Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:35:24,061Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:35:24,929Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:24,975Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:35:25,790Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:25,805Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:25,806Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:35:26,121Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:26,154Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:35:27,068Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:35:28,105Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:35:28,106Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:35:28,168Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:35:28,168Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:35:28,168Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:35:29,580Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:29,581Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:35:29,779Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:29,780Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:35:29,840Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:29,841Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:35:30,026Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:35:30,027Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:30,246Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:30,261Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:30,262Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:30,262Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:30,276Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:30,292Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:30,293Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:30,293Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:30,293Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:30,356Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:30,356Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:30,356Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:30,653Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:30,669Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:30,670Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:30,670Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:30,670Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:35:31,304Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:31,304Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:35:31,349Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:31,979Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:35:31,979Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,043Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:32,044Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,075Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,075Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:35:32,075Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,075Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:35:32,076Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,076Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:35:32,076Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,076Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,096Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:35:32,139Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,139Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,155Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,187Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:35:32,216Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,216Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:35:32,249Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,265Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,266Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:35:32,267Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,299Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:32,299Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,300Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:32,301Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,301Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:35:32,439Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,440Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:35:32,440Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,455Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:35:32,455Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,471Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:35:32,471Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:35:32,487Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,487Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:35:32,502Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,502Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:35:32,517Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,517Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:35:32,517Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,517Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,517Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,549Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:35:32,550Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,550Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:35:32,550Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:35:32,550Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,564Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:35:32,719Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:32,719Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:35:35,030Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:35:35,030Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:35,046Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:35:35,046Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:35:35,052Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:35:35,109Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:35:35,110Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:35:35,147Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:35:41,706Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013516.069-7DF28D2EE7DDDAA5\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:35:41,721Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:35:41,741Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:35:42,031Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:35:43,970Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:35:44,937Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:35:45,040Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:35:45,263Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:35:45,264Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:35:45,265Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:35:45,465Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:35:15.939Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:35:54,091Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:35:54,237Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:35:54,245Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:35:57,978Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:35:58,370Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:35:58,370Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:58,379Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:35:58,594Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:58,697Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:35:58,720Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:35:58,723Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:35:58,732Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:58,778Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:35:58,940Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:35:58,956Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:35:59,615Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:59,632Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:59,636Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:35:59,637Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:35:59,637Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:35:59,672Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013516.069-7DF28D2EE7DDDAA5\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:35:59,673Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:35:59,673Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:35:59,791Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:35:59,854Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:35:59,857Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:35:59,861Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:36:00,159Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:36:00,159Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:36:00,159Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:36:00,177Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:35:15.939Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:36:00,821Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:36:00,828Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:00,828Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:01,141Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:01,145Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:36:01,192Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:36:01,192Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,194Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:01,207Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,226Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:36:01,227Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:36:01,227Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:36:01,234Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,696Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:36:01,851Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:36:01,901Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,901Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:36:01,905Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:36:01,932Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,935Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:01,958Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,958Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:36:01,960Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:01,960Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:36:01,993Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-013516.069-7DF28D2EE7DDDAA5\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:36:01,993Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:36:01,994Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:36:02,095Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-013516.069-7DF28D2EE7DDDAA5/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:36:02,149Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:36:02,151Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:36:02,156Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:36:02,221Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:36:02,221Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:36:02,221Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:36:02,228Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:35:15.939Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:36:02,748Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:36:02,752Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:02,752Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:02,994Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:36:02,997Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:36:03,039Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:36:03,040Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,043Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:03,055Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,071Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:36:03,072Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:36:03,072Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:36:03,079Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,087Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:36:03,185Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:36:03,220Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,221Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623029758370) {}
[INFO ] 2021-06-07T01:36:03,223Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:36:03,241Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,243Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:03,260Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623029761192) {}
[INFO ] 2021-06-07T01:36:03,262Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:03,278Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,280Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:36:03,292Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,292Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:36:03,294Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623029763039) {}
[INFO ] 2021-06-07T01:36:03,294Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:36:03,700Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246}
[WARN ] 2021-06-07T01:36:03,700Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246}
[INFO ] 2021-06-07T01:36:04,398Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:04,398Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:04,670Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:04,985Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,059Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,181Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,181Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c3bc10ce-a935-48cd-abed-b5db66854585, invocation_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, invocation_timestamp=2021-06-07T01:36:03.359Z, origin=Only For Testing, session_id=76a2e741-a4db-4d16-9ebd-25b199a313f5, session_timestamp=2021-06-07T01:36:03.359Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,215Z [Mock network] corda.flow. - Flow raised an error: Received session end message instead of a data session message. Mismatched send and receive?. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,222Z [Mock network] statemachine.StaffedFlowHospital. - Flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@1cf4c350, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a, reloadCheckpointAfterSuspendCount=null, numberOfCommits=4, lock=java.util.concurrent.Semaphore@6428a82d[Permits = 0]) {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[INFO ] 2021-06-07T01:36:05,226Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:76) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:68) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[INFO ] 2021-06-07T01:36:05,234Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:76) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:68) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:36:05,280Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] errored, dumping all transitions:

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.938Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1D69E7BF3A1757457FA17BDFB4A23FFB629341FF64114E2E793D25F61CE5D1BD), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243])
    SignalFlowHasStarted(flowId=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7490248867392400749), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6755487811057654086), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7490248867392400749--4633267707995664623-0-0), senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.908Z
    2021-06-07T01:36:04.914Z
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.951Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.914Z
    2021-06-07T01:36:04.951Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.955Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.951Z
    2021-06-07T01:36:04.955Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.976Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), maySkipCheckpoint=false, fiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.955Z
    2021-06-07T01:36:04.970Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1D69E7BF3A1757457FA17BDFB4A23FFB629341FF64114E2E793D25F61CE5D1BD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.981Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.970Z
    2021-06-07T01:36:04.980Z
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.996Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.980Z
    2021-06-07T01:36:04.996Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.012Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.996Z
    2021-06-07T01:36:05.012Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.017Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.012Z
    2021-06-07T01:36:05.017Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.020Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.017Z
    2021-06-07T01:36:05.020Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.020Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.052Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.020Z
    2021-06-07T01:36:05.048Z
checkpoint.flowState.frozenFiber.hash: 
    F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253
    F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.058Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7490248867392400749), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7490248867392400749--4633267707995664623-2-0), senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.059Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.055Z
    2021-06-07T01:36:05.059Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.152Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.059Z
    2021-06-07T01:36:05.152Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.160Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), maySkipCheckpoint=false, fiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.152Z
    2021-06-07T01:36:05.156Z
checkpoint.flowState.frozenFiber.hash: 
    F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152
    449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.160Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.213Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6755487811057654086), payload=net.corda.node.services.statemachine.EndSessionMessage@7482b65d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.160Z
    2021-06-07T01:36:05.213Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6755487811057654086)]
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@7482b65d]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.215Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6755487811057654086)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.213Z
    2021-06-07T01:36:05.214Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6755487811057654086)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@7482b65d], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.215Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.214Z
    2021-06-07T01:36:05.215Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.238Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.215Z
    2021-06-07T01:36:05.220Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4686344660901434221, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.243Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.245Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.220Z
    2021-06-07T01:36:05.244Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[WARN ] 2021-06-07T01:36:05,280Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] error {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:76) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:68) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:36:05,283Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[WARN ] 2021-06-07T01:36:05,332Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] errored, dumping all transitions:

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.938Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)], numberOfSuspends=0, numberOfCommits=1), flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=1D69E7BF3A1757457FA17BDFB4A23FFB629341FF64114E2E793D25F61CE5D1BD), errorState=Clean, result=null, status=RUNNABLE, progressStep=null, flowIoRequest=null, compatible=true), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243])
    SignalFlowHasStarted(flowId=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7490248867392400749), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6755487811057654086), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7490248867392400749--4633267707995664623-0-0), senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.908Z
    2021-06-07T01:36:04.914Z
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7b8b2243]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.951Z
  Event: EnterSubFlow(subFlowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.914Z
    2021-06-07T01:36:04.951Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.955Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.951Z
    2021-06-07T01:36:04.955Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.976Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), maySkipCheckpoint=false, fiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=1, numberOfCommits=2), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.955Z
    2021-06-07T01:36:04.970Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=1D69E7BF3A1757457FA17BDFB4A23FFB629341FF64114E2E793D25F61CE5D1BD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253)
checkpoint.progressStep: 
    null
    Starting
checkpoint.flowIoRequest: 
    null
    Receive
checkpoint.checkpointState.numberOfCommits: 
    1
    2
checkpoint.checkpointState.numberOfSuspends: 
    0
    1
numberOfCommits: 
    0
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.981Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.970Z
    2021-06-07T01:36:04.980Z
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:04.996Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.980Z
    2021-06-07T01:36:04.996Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.012Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:04.996Z
    2021-06-07T01:36:05.012Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.017Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.012Z
    2021-06-07T01:36:05.017Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.020Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.017Z
    2021-06-07T01:36:05.020Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.020Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.052Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=2, numberOfCommits=3), flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Send, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.020Z
    2021-06-07T01:36:05.048Z
checkpoint.flowState.frozenFiber.hash: 
    F39D557F69A38FC8E7FFA4DE11E2DD1B9E6684F7B6588AC3F32730164222F253
    F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowIoRequest: 
    Receive
    Send
checkpoint.checkpointState.numberOfCommits: 
    2
    3
checkpoint.checkpointState.numberOfSuspends: 
    1
    2
numberOfCommits: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.058Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[], sendExisting=[SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7490248867392400749), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7490248867392400749--4633267707995664623-2-0), senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a))])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.059Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.055Z
    2021-06-07T01:36:05.059Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.152Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.059Z
    2021-06-07T01:36:05.152Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.160Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), maySkipCheckpoint=false, fiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5, currentStep=Starting)
  Actions: 
    PersistCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6755487811057654086)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=4), flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5), errorState=Clean, result=null, status=RUNNABLE, progressStep=Starting, flowIoRequest=Receive, compatible=true), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.152Z
    2021-06-07T01:36:05.156Z
checkpoint.flowState.frozenFiber.hash: 
    F30C4C08933A95BEC99F7DD45294936AD7498B602CF304D96CBE59632DCE8152
    449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))])
checkpoint.flowIoRequest: 
    Send
    Receive
checkpoint.checkpointState.numberOfCommits: 
    3
    4
checkpoint.checkpointState.numberOfSuspends: 
    2
    3
numberOfCommits: 
    3
    4
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.160Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.213Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6755487811057654086), payload=net.corda.node.services.statemachine.EndSessionMessage@7482b65d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.160Z
    2021-06-07T01:36:05.213Z
checkpoint.checkpointState.sessionsToBeClosed: 
    []
    [SessionId(toLong=6755487811057654086)]
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086).receivedMessages: 
    []
    [net.corda.node.services.statemachine.EndSessionMessage@7482b65d]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.215Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6755487811057654086)])
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.213Z
    2021-06-07T01:36:05.214Z
checkpoint.checkpointState.sessionsToBeClosed: 
    [SessionId(toLong=6755487811057654086)]
    []
checkpoint.checkpointState.sessions.SessionId(toLong=6755487811057654086): 
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[net.corda.node.services.statemachine.EndSessionMessage@7482b65d], otherSideErrored=false, peerSinkSessionId=SessionId(toLong=7490248867392400749), deduplicationSeed=D-7490248867392400749--4633267707995664623)
    null
isFlowResumed: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.215Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.214Z
    2021-06-07T01:36:05.215Z
checkpoint.checkpointState.subFlowStack: 
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder$call$signTransactionFlow$1, subFlowVersion=CoreFlow(platformVersion=8), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)]


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.238Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?, rollback=true)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.215Z
    2021-06-07T01:36:05.220Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4686344660901434221, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.243Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.245Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.220Z
    2021-06-07T01:36:05.244Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] ---
  Timestamp: 2021-06-07T01:36:05.319Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4686344660901434221)], sessions=[], senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a)
    CreateTransaction
    RemoveCheckpoint(id=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], mayHavePersistentResults=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5])
    ReleaseSoftLocks(uuid=a920e2e2-5fb0-473e-a80f-43d1cf01a48f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[a920e2e2-5fb0-473e-a80f-43d1cf01a48f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4686344660901434221, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)]), lastState=StateMachineState(checkpoint=Checkpoint(checkpointState=CheckpointState(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Invocation, sessionId=e7d64ce5-4719-4c72-8cdc-7d62884be3be, timestamp: 2021-06-07T01:36:04.906Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null, arguments=[], clientId=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, sessionsToBeClosed=[], subFlowStack=[Inlined(flowClass=class net.corda.samples.carinsurance.flows.IssueInsuranceResponder, subFlowVersion=CorDappFlow(platformVersion=8, corDappName=workflows-0.1, corDappHash=A3AC60358D879E421389786D71090D72D2700270802B79E481ED8F8C08CD0CA4), isEnabledTimedFlow=false)], numberOfSuspends=3, numberOfCommits=5), flowState=net.corda.node.services.statemachine.FlowState$Finished@7f6234be, errorState=Errored(errors=[FlowError(errorId=4686344660901434221, exception=net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?)], propagatedIndex=0, propagating=true), result=null, status=FAILED, progressStep=Starting, flowIoRequest=Receive, compatible=true), flowLogic=net.corda.samples.carinsurance.flows.IssueInsuranceResponder@1cf4c350, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=412f51e3-a2ae-47b5-bcff-05fa55efb01a, reloadCheckpointAfterSuspendCount=null, numberOfCommits=5, lock=java.util.concurrent.Semaphore@6428a82d[Permits = 0]))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2021-06-07T01:36:05.244Z
    2021-06-07T01:36:05.281Z
checkpoint.status: 
    RUNNABLE
    FAILED
checkpoint.flowState: 
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6755487811057654086))]), frozenFiber=449E09D153CCFEEDB2A9694537C09F133E416162F6907333DCA60997B26132B5)
    net.corda.node.services.statemachine.FlowState$Finished@7f6234be
checkpoint.checkpointState.numberOfCommits: 
    4
    5
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5857eac5]
    []
numberOfCommits: 
    4
    5
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
[WARN ] 2021-06-07T01:36:05,332Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a920e2e2-5fb0-473e-a80f-43d1cf01a48f] error {fiber-id=10000002, flow-id=a920e2e2-5fb0-473e-a80f-43d1cf01a48f, invocation_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, invocation_timestamp=2021-06-07T01:36:04.906Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d64ce5-4719-4c72-8cdc-7d62884be3be, session_timestamp=2021-06-07T01:36:04.906Z, thread-id=246, tx_id=42E1FF71CC11834DF822C2B81238D88E54B689423A9161531D9B3EB799CA0EC9}
net.corda.core.flows.UnexpectedFlowEndException: Received session end message instead of a data session message. Mismatched send and receive?
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.pollSessionMessages(StartedFlowTransition.kt:256) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveFromSessionsTransition(StartedFlowTransition.kt:223) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.access$receiveFromSessionsTransition(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:206) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition$receiveTransition$1.invoke(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.Transition$DefaultImpls.builder(Transition.kt:24) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.builder(StartedFlowTransition.kt:23) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.receiveTransition(StartedFlowTransition.kt:198) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StartedFlowTransition.transition(StartedFlowTransition.kt:46) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.cleanTransition(DoRemainingWorkTransition.kt:33) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.DoRemainingWorkTransition.transition(DoRemainingWorkTransition.kt:22) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.TopLevelTransition.transition(TopLevelTransition.kt:53) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.transitions.StateMachine.transition(StateMachine.kt:13) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEvent(FlowStateMachineImpl.kt:182) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:220) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:574) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:351) ~[corda-core-4.6.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:261) ~[corda-core-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:417) ~[corda-node-4.6.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:414) ~[corda-core-4.6.jar:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:76) ~[main/:?]
	at net.corda.samples.carinsurance.flows.IssueInsuranceResponder.call(IssueInsurance.kt:68) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:346) ~[corda-node-4.6.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:71) ~[corda-node-4.6.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_251]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_251]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_251]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_251]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.6.jar:?]
[WARN ] 2021-06-07T01:36:05,800Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=86a78740-730d-4d78-983b-10e538336771, invocation_id=1a74c36a-d7fc-4e17-b8b0-2d42b81198b7, invocation_timestamp=2021-06-07T01:36:05.771Z, origin=Only For Testing, session_id=1a74c36a-d7fc-4e17-b8b0-2d42b81198b7, session_timestamp=2021-06-07T01:36:05.771Z, thread-id=246}
[WARN ] 2021-06-07T01:36:05,803Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=86a78740-730d-4d78-983b-10e538336771, invocation_id=1a74c36a-d7fc-4e17-b8b0-2d42b81198b7, invocation_timestamp=2021-06-07T01:36:05.771Z, origin=Only For Testing, session_id=1a74c36a-d7fc-4e17-b8b0-2d42b81198b7, session_timestamp=2021-06-07T01:36:05.771Z, thread-id=246}
[INFO ] 2021-06-07T01:36:05,859Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T01:36:05,903Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:36:05,903Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:36:05,910Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T01:36:05,945Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:36:05,945Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:36:05,947Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T01:36:05,978Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:36:05,978Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:41:57,454Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:41:57,938Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:42:00,486Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:42:02,961Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:42:02,984Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:42:02,986Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:42:03,774Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:03,805Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:42:04,488Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:04,489Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:04,489Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:42:04,755Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:04,770Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:42:05,601Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:42:06,568Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:42:06,584Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:42:06,647Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:42:06,647Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:42:06,647Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:42:07,938Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:07,938Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:42:08,112Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:08,113Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:42:08,189Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:08,189Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:42:08,364Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:42:08,365Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:08,568Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:08,584Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:08,584Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:08,585Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:08,599Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:08,615Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:08,615Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:08,615Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:08,616Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:08,676Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:08,691Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:08,691Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:08,786Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:08,806Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:08,806Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:08,806Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:08,806Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:42:09,316Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:09,316Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:42:09,348Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:09,848Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:42:09,848Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:09,910Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:09,911Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:42:09,942Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:09,942Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:42:09,958Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:09,959Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:42:10,021Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,022Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:42:10,036Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,036Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:42:10,052Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,052Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:42:10,053Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,053Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,053Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:42:10,077Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,077Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:42:10,116Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,116Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,116Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:42:10,116Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,147Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:10,148Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,148Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:10,148Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,149Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:42:10,208Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,208Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:42:10,223Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,225Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:42:10,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,238Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:42:10,239Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:42:10,240Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,240Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:42:10,254Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:42:10,270Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,271Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:42:10,271Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,271Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,271Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:42:10,300Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,301Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:42:10,315Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,315Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,316Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:42:10,361Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:10,362Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:42:12,541Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:42:12,541Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:12,541Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:42:12,541Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:42:12,562Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:42:12,588Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:42:12,589Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:42:12,637Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:42:18,796Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014154.320-C32DC9280B940950\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:42:18,810Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:42:18,829Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:42:19,100Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:42:20,854Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:42:21,892Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:42:21,997Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:42:22,190Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:42:22,190Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:42:22,191Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:42:22,398Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:41:54.135Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:42:29,852Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:42:30,038Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:42:30,049Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:42:34,424Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:42:35,047Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:42:35,048Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:35,061Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:42:35,364Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:35,473Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:42:35,495Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:42:35,498Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:42:35,509Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:35,564Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:35,767Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:42:35,782Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:42:36,576Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:36,590Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:36,594Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:36,595Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:36,595Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:36,641Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014154.320-C32DC9280B940950\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:42:36,642Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:42:36,642Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:42:36,769Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:42:36,847Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:42:36,850Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:42:36,855Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:42:36,944Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:42:36,944Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:42:36,944Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:42:36,953Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:41:54.135Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:42:37,685Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:42:37,693Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:37,693Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:37,995Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:37,999Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:42:38,054Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:42:38,054Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,058Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:38,082Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,103Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:42:38,104Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:42:38,105Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:42:38,117Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,125Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:38,217Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:42:38,833Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,833Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:38,836Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:42:38,856Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,859Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:38,881Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,881Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:38,882Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:38,882Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:38,912Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014154.320-C32DC9280B940950\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:42:38,913Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:42:38,913Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:42:39,007Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014154.320-C32DC9280B940950/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:42:39,071Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:42:39,074Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:42:39,080Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:42:39,161Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:42:39,162Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:42:39,162Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:42:39,171Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:41:54.135Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:42:39,807Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:42:39,812Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:39,812Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:40,102Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:42:40,105Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:42:40,156Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:42:40,156Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,159Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:40,172Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,195Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:42:40,197Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:42:40,197Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:42:40,204Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,215Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:40,307Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:42:40,342Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,342Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030155048) {}
[INFO ] 2021-06-07T01:42:40,346Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:42:40,362Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,365Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:40,381Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030158054) {}
[INFO ] 2021-06-07T01:42:40,383Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:40,401Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,404Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:42:40,417Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,417Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:42:40,418Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030160156) {}
[INFO ] 2021-06-07T01:42:40,418Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:42:40,808Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250}
[WARN ] 2021-06-07T01:42:40,808Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250}
[INFO ] 2021-06-07T01:42:41,331Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,331Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,527Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,813Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=650719ff-c4b9-4b4b-85f3-5dc42f3882dd, invocation_id=3347e2da-5499-4bc4-ad26-58e314b1896e, invocation_timestamp=2021-06-07T01:42:41.753Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3347e2da-5499-4bc4-ad26-58e314b1896e, session_timestamp=2021-06-07T01:42:41.753Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,887Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=650719ff-c4b9-4b4b-85f3-5dc42f3882dd, invocation_id=3347e2da-5499-4bc4-ad26-58e314b1896e, invocation_timestamp=2021-06-07T01:42:41.753Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3347e2da-5499-4bc4-ad26-58e314b1896e, session_timestamp=2021-06-07T01:42:41.753Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,982Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=650719ff-c4b9-4b4b-85f3-5dc42f3882dd, invocation_id=3347e2da-5499-4bc4-ad26-58e314b1896e, invocation_timestamp=2021-06-07T01:42:41.753Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3347e2da-5499-4bc4-ad26-58e314b1896e, session_timestamp=2021-06-07T01:42:41.753Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:41,995Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=650719ff-c4b9-4b4b-85f3-5dc42f3882dd, invocation_id=3347e2da-5499-4bc4-ad26-58e314b1896e, invocation_timestamp=2021-06-07T01:42:41.753Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3347e2da-5499-4bc4-ad26-58e314b1896e, session_timestamp=2021-06-07T01:42:41.753Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:42,057Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[INFO ] 2021-06-07T01:42:42,057Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c62c473e-7874-44a2-8e97-81f6f3bf72df, invocation_id=7fc0ed9a-33e9-4002-b964-94413acbb160, invocation_timestamp=2021-06-07T01:42:40.478Z, origin=Only For Testing, session_id=7fc0ed9a-33e9-4002-b964-94413acbb160, session_timestamp=2021-06-07T01:42:40.478Z, thread-id=250, tx_id=EC8B024A80133F14E7938B6766073711D4DE63C2FC107C7F7FE4F3C2FAEDE598}
[WARN ] 2021-06-07T01:42:42,288Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=8b09997a-6eea-4272-a443-fbfe92cf8406, invocation_id=e9b3fc1c-ef74-407e-b990-f50d3e4e0fae, invocation_timestamp=2021-06-07T01:42:42.279Z, origin=Only For Testing, session_id=e9b3fc1c-ef74-407e-b990-f50d3e4e0fae, session_timestamp=2021-06-07T01:42:42.279Z, thread-id=250}
[WARN ] 2021-06-07T01:42:42,290Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=8b09997a-6eea-4272-a443-fbfe92cf8406, invocation_id=e9b3fc1c-ef74-407e-b990-f50d3e4e0fae, invocation_timestamp=2021-06-07T01:42:42.279Z, origin=Only For Testing, session_id=e9b3fc1c-ef74-407e-b990-f50d3e4e0fae, session_timestamp=2021-06-07T01:42:42.279Z, thread-id=250}
[INFO ] 2021-06-07T01:42:42,331Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T01:42:42,380Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:42:42,381Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:42:42,386Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T01:42:42,452Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:42:42,452Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:42:42,470Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T01:42:42,517Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:42:42,517Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:43:52,503Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:43:53,292Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:43:56,825Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:44:00,926Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:44:00,961Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:44:00,963Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:44:02,426Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:02,487Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:44:03,642Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:03,672Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:03,672Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:44:04,204Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:04,251Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:44:05,520Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:44:07,160Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:44:07,191Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:44:07,318Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:44:07,319Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:44:07,319Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:44:09,880Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:09,880Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:44:10,253Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:10,254Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:44:10,362Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:10,375Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:44:10,705Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:44:10,707Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:11,155Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:11,188Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:11,189Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:11,189Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:11,203Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:11,235Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:11,235Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:11,236Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:11,266Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:11,344Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:11,366Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:11,367Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:11,577Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:11,607Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:11,607Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:11,607Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:11,610Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:44:12,345Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:12,345Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:44:12,421Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,377Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:44:13,377Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,484Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:13,485Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,531Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,531Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:44:13,549Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,561Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:44:13,562Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,562Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:44:13,562Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,563Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:13,592Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:44:13,663Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:13,663Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:44:13,701Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:13,702Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:44:13,702Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:13,702Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:44:13,702Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:13,721Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,723Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:44:13,759Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,781Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:44:13,811Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:13,814Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,814Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:44:13,815Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,864Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:13,864Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,864Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:13,866Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,866Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:44:13,986Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:13,987Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:44:13,987Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:14,002Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:44:14,002Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:14,035Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:44:14,035Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:44:14,051Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,052Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:44:14,052Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,052Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:44:14,083Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,083Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:44:14,083Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,083Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,083Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:44:14,143Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,143Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,160Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:44:14,161Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:44:14,161Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,161Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:44:14,206Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:14,206Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:44:17,203Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:44:17,219Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:17,219Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:44:17,220Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:44:17,243Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:44:17,300Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:44:17,300Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:44:17,382Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:44:27,663Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014348.454-B92B3062522726BE\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:44:27,675Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:44:27,695Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:44:27,934Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:44:29,390Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:44:30,217Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:44:30,320Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:44:30,496Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:44:30,497Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:44:30,497Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:44:30,670Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:43:48.220Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:44:37,165Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:44:37,328Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:44:37,336Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:44:41,122Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:44:41,605Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:44:41,605Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:41,638Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:44:41,992Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:42,088Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:44:42,112Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:44:42,115Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:44:42,126Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:42,174Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:42,359Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:44:42,372Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:44:43,015Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:43,030Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:43,034Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:43,035Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:43,035Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:43,069Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014348.454-B92B3062522726BE\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:44:43,070Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:44:43,070Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:44:43,181Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:44:43,243Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:44:43,245Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:44:43,250Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:44:43,326Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:44:43,326Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:44:43,326Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:44:43,337Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:43:48.220Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:44:44,010Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:44:44,018Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:44,018Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:44,305Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:44,308Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:44:44,349Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:44:44,349Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,351Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:44,363Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,380Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:44:44,381Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:44:44,381Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:44:44,388Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,398Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:44,472Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:44:44,500Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,501Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:44,503Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:44:44,935Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,938Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:44,955Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,955Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:44,956Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:44,956Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:44,983Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-014348.454-B92B3062522726BE\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:44:44,984Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:44:44,984Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:44:45,078Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-014348.454-B92B3062522726BE/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:44:45,131Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:44:45,134Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:44:45,138Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:44:45,202Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:44:45,202Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:44:45,202Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:44:45,208Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:43:48.220Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:44:45,746Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:44:45,752Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:45,752Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:46,041Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:44:46,046Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:44:46,093Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:44:46,093Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,096Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:46,113Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,131Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:44:46,132Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:44:46,132Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:44:46,139Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,149Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:46,235Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:44:46,264Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,264Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030281605) {}
[INFO ] 2021-06-07T01:44:46,267Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:44:46,283Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,285Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:46,302Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030284349) {}
[INFO ] 2021-06-07T01:44:46,305Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:46,320Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,322Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:44:46,336Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,336Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:44:46,337Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030286093) {}
[INFO ] 2021-06-07T01:44:46,337Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:44:46,650Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246}
[WARN ] 2021-06-07T01:44:46,650Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246}
[INFO ] 2021-06-07T01:44:47,084Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,084Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,263Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,563Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=a49dbf7d-c46f-4b45-89ab-d8343d2791fd, invocation_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, invocation_timestamp=2021-06-07T01:44:47.492Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, session_timestamp=2021-06-07T01:44:47.492Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,652Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=a49dbf7d-c46f-4b45-89ab-d8343d2791fd, invocation_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, invocation_timestamp=2021-06-07T01:44:47.492Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, session_timestamp=2021-06-07T01:44:47.492Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,748Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=a49dbf7d-c46f-4b45-89ab-d8343d2791fd, invocation_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, invocation_timestamp=2021-06-07T01:44:47.492Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, session_timestamp=2021-06-07T01:44:47.492Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,763Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=a49dbf7d-c46f-4b45-89ab-d8343d2791fd, invocation_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, invocation_timestamp=2021-06-07T01:44:47.492Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d8b5e6bb-4044-4e89-ad23-b294121185ed, session_timestamp=2021-06-07T01:44:47.492Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,825Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[INFO ] 2021-06-07T01:44:47,825Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4d4ebc2a-3a15-4529-9eb6-aeea24fca1d6, invocation_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, invocation_timestamp=2021-06-07T01:44:46.390Z, origin=Only For Testing, session_id=e73ef1c1-5c82-4f7b-b003-4d36efeb3aab, session_timestamp=2021-06-07T01:44:46.390Z, thread-id=246, tx_id=3EBE2D83CA065275511EB689876D83E563E8CE816E34355E82EBAAE9609BF581}
[WARN ] 2021-06-07T01:44:48,044Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=7c844f1d-fe98-41e0-b470-fed3c86c366c, invocation_id=3ab3e123-cfda-40db-9016-8c6b1eb457f5, invocation_timestamp=2021-06-07T01:44:48.036Z, origin=Only For Testing, session_id=3ab3e123-cfda-40db-9016-8c6b1eb457f5, session_timestamp=2021-06-07T01:44:48.036Z, thread-id=246}
[WARN ] 2021-06-07T01:44:48,046Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=7c844f1d-fe98-41e0-b470-fed3c86c366c, invocation_id=3ab3e123-cfda-40db-9016-8c6b1eb457f5, invocation_timestamp=2021-06-07T01:44:48.036Z, origin=Only For Testing, session_id=3ab3e123-cfda-40db-9016-8c6b1eb457f5, session_timestamp=2021-06-07T01:44:48.036Z, thread-id=246}
[INFO ] 2021-06-07T01:44:48,071Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T01:44:48,111Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:44:48,111Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:44:48,118Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T01:44:48,148Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:44:48,148Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:44:48,150Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T01:44:48,175Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T01:44:48,175Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:54:46,224Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T01:54:46,600Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:54:48,774Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:54:50,580Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T01:54:50,604Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T01:54:50,605Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:54:51,335Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:51,365Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T01:54:51,959Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:51,960Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:51,960Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T01:54:52,206Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:52,222Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:54:52,896Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T01:54:53,739Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:54:53,739Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:54:53,804Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:54:53,805Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T01:54:53,805Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T01:54:55,065Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:55,066Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T01:54:55,239Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:55,240Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T01:54:55,303Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:55,304Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T01:54:55,475Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T01:54:55,476Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:55,668Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:55,682Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:55,683Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:55,698Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:55,698Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:55,730Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:55,730Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:55,730Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:55,730Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:55,792Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:55,808Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:55,808Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:55,918Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:55,918Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:55,918Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:55,918Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:55,918Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:54:56,415Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:56,415Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:54:56,446Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:56,976Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T01:54:56,976Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,054Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:57,054Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,084Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T01:54:57,085Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,085Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,101Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T01:54:57,131Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,131Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:54:57,147Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,147Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:54:57,147Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,147Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T01:54:57,163Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,163Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,163Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:54:57,180Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,180Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T01:54:57,195Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,210Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,210Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T01:54:57,210Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,211Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:57,225Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,226Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:57,226Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,226Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:54:57,289Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,289Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:54:57,289Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,289Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T01:54:57,305Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,306Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T01:54:57,306Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T01:54:57,306Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,322Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T01:54:57,322Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,323Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T01:54:57,337Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,338Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T01:54:57,338Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,338Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,339Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,383Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:54:57,384Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,384Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T01:54:57,384Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T01:54:57,384Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,384Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T01:54:57,430Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:57,431Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T01:54:59,571Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T01:54:59,585Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:59,600Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T01:54:59,601Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T01:54:59,613Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:54:59,647Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T01:54:59,647Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T01:54:59,683Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T01:55:06,921Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-015443.970-D59104721D407D9F\nodes\0\cordapps] {}
[INFO ] 2021-06-07T01:55:06,935Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:55:06,956Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:55:07,263Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:55:09,537Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:55:10,030Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:55:10,122Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:55:10,296Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:55:10,299Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:55:10,300Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:55:10,581Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:54:43.860Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:55:19,136Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:55:19,395Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:55:19,409Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:55:24,843Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T01:55:25,469Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:55:25,469Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:25,482Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:55:25,810Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:25,942Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:55:25,970Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:55:25,973Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:55:25,983Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:26,036Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:26,252Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:55:26,282Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T01:55:27,394Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:27,409Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:27,414Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:27,415Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:27,415Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:27,457Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-015443.970-D59104721D407D9F\nodes\1\cordapps] {}
[INFO ] 2021-06-07T01:55:27,458Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:55:27,458Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:55:27,557Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:55:28,048Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:55:28,051Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:55:28,056Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:55:28,133Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:55:28,133Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:55:28,133Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:55:28,142Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:54:43.860Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:55:28,853Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:55:28,860Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:28,860Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:29,168Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:29,172Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:55:29,220Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:55:29,220Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,223Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:29,239Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,258Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:55:29,259Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:55:29,259Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:55:29,269Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,279Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:29,374Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:55:29,417Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,418Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:29,421Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:55:29,442Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,444Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:29,464Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,464Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:29,466Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:29,466Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:29,494Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-015443.970-D59104721D407D9F\nodes\2\cordapps] {}
[INFO ] 2021-06-07T01:55:29,495Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T01:55:29,495Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T01:55:29,586Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-015443.970-D59104721D407D9F/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T01:55:29,643Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T01:55:29,645Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T01:55:29,650Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T01:55:29,722Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T01:55:29,722Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T01:55:29,722Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T01:55:29,730Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T01:54:43.860Z
      epoch=1
  } {}
[INFO ] 2021-06-07T01:55:30,391Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T01:55:30,397Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:30,397Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:30,718Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T01:55:30,721Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T01:55:30,773Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T01:55:30,773Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:30,777Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:30,803Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:30,820Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T01:55:30,821Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T01:55:30,821Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T01:55:30,838Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:30,846Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:30,967Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T01:55:31,013Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:31,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623030925469) {}
[INFO ] 2021-06-07T01:55:31,017Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T01:55:31,040Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:31,043Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:31,063Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623030929220) {}
[INFO ] 2021-06-07T01:55:31,066Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:31,084Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:31,086Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T01:55:31,104Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:31,104Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T01:55:31,105Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623030930773) {}
[INFO ] 2021-06-07T01:55:31,105Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T01:55:31,465Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252}
[WARN ] 2021-06-07T01:55:31,465Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252}
[INFO ] 2021-06-07T01:55:31,946Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:31,946Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,161Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,413Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=b8bec504-561b-449b-8bb7-21c26ebb9c82, invocation_id=2186db89-f8c2-4f90-acde-82d65f1faa16, invocation_timestamp=2021-06-07T01:55:32.347Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2186db89-f8c2-4f90-acde-82d65f1faa16, session_timestamp=2021-06-07T01:55:32.347Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,485Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=b8bec504-561b-449b-8bb7-21c26ebb9c82, invocation_id=2186db89-f8c2-4f90-acde-82d65f1faa16, invocation_timestamp=2021-06-07T01:55:32.347Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2186db89-f8c2-4f90-acde-82d65f1faa16, session_timestamp=2021-06-07T01:55:32.347Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,531Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=b8bec504-561b-449b-8bb7-21c26ebb9c82, invocation_id=2186db89-f8c2-4f90-acde-82d65f1faa16, invocation_timestamp=2021-06-07T01:55:32.347Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2186db89-f8c2-4f90-acde-82d65f1faa16, session_timestamp=2021-06-07T01:55:32.347Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,544Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=b8bec504-561b-449b-8bb7-21c26ebb9c82, invocation_id=2186db89-f8c2-4f90-acde-82d65f1faa16, invocation_timestamp=2021-06-07T01:55:32.347Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2186db89-f8c2-4f90-acde-82d65f1faa16, session_timestamp=2021-06-07T01:55:32.347Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,619Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[INFO ] 2021-06-07T01:55:32,619Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=658ca1bf-115a-48f0-9b91-472b0072648c, invocation_id=8ac9f26a-81eb-4848-b791-c608ac61480e, invocation_timestamp=2021-06-07T01:55:31.173Z, origin=Only For Testing, session_id=8ac9f26a-81eb-4848-b791-c608ac61480e, session_timestamp=2021-06-07T01:55:31.173Z, thread-id=252, tx_id=7B1F056E7AF9CD50F18DBAAEBC2700E1041D2B8F893D1D8816DF9C1C364D98E0}
[WARN ] 2021-06-07T01:56:27,305Z [Mock network] vault.HibernateQueryCriteriaParser. - Overriding previous attribute [stateStatus] value CONSUMED with UNCONSUMED {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=d0a817ff-ca51-46bd-af3e-cf261d55660b, invocation_id=820746ba-4d31-49bc-b78c-dd47744496ad, invocation_timestamp=2021-06-07T01:56:04.246Z, origin=Only For Testing, session_id=820746ba-4d31-49bc-b78c-dd47744496ad, session_timestamp=2021-06-07T01:56:04.246Z, thread-id=252}
[INFO ] 2021-06-07T02:12:07,693Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T02:12:08,220Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:12:11,447Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:12:15,208Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T02:12:15,239Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:12:15,241Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:12:16,456Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:16,503Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T02:12:17,547Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:17,547Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:17,547Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T02:12:17,919Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:17,951Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:12:19,138Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T02:12:20,892Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:12:20,911Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:12:20,989Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:12:21,021Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:12:21,021Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:12:23,938Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:23,940Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T02:12:24,377Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:24,378Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T02:12:24,516Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:24,517Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T02:12:24,969Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:12:24,969Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:25,325Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:25,355Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:25,355Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:25,355Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:25,372Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:25,401Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:25,401Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:25,401Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:25,416Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:25,495Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:25,543Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:25,543Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:25,779Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:25,826Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:25,827Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:25,827Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:25,827Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:12:26,853Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:26,854Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:12:26,916Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,212Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:12:28,212Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,304Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:28,304Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,350Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,366Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T02:12:28,366Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,366Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T02:12:28,382Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,383Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T02:12:28,383Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,383Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,403Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T02:12:28,506Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,506Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:12:28,520Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,521Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:12:28,521Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,521Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:12:28,521Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,536Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,537Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:12:28,582Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,582Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T02:12:28,613Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,628Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,628Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:12:28,628Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,677Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:28,677Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,678Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:28,678Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,678Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:12:28,769Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,769Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:12:28,769Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,799Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:12:28,800Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,817Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:12:28,817Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:12:28,849Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,849Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T02:12:28,849Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,849Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T02:12:28,879Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,879Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T02:12:28,879Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,879Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,879Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T02:12:28,939Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,940Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:12:28,954Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,954Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:12:28,955Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:12:28,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,970Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:12:28,970Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:12:28,970Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:28,970Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:12:29,047Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:29,047Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T02:12:32,412Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:12:32,429Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:32,429Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T02:12:32,429Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:12:32,454Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:12:32,537Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T02:12:32,537Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:12:32,596Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T02:12:44,989Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-021204.454-B522AE0B8C80AD10\nodes\0\cordapps] {}
[INFO ] 2021-06-07T02:12:45,008Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:12:45,037Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:12:45,404Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:12:48,188Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:12:49,387Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:12:49,517Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:12:49,778Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:12:49,780Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:12:49,781Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:12:50,024Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:12:04.244Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:12:59,671Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:12:59,879Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:12:59,892Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:13:06,231Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:13:07,016Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:13:07,016Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:07,038Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:13:07,520Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:07,733Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:13:07,768Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:13:07,772Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:13:07,785Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:07,890Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:08,229Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:13:08,259Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T02:13:09,421Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:09,439Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:09,444Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:09,445Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:09,445Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:09,488Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-021204.454-B522AE0B8C80AD10\nodes\1\cordapps] {}
[INFO ] 2021-06-07T02:13:09,489Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:13:09,490Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:13:09,612Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:13:09,679Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:13:09,682Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:13:09,687Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:13:09,765Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:13:09,765Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:13:09,765Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:13:09,772Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:12:04.244Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:13:11,083Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:13:11,110Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:11,110Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:12,309Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:12,317Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:13:12,382Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:13:12,382Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,387Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:12,419Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,440Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:13:12,442Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:13:12,442Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:13:12,451Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,461Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:12,588Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:13:12,642Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,642Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:12,645Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:13:12,668Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,672Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:12,696Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,696Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:12,698Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:12,698Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:12,734Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-021204.454-B522AE0B8C80AD10\nodes\2\cordapps] {}
[INFO ] 2021-06-07T02:13:12,735Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:13:12,735Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:13:12,908Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-021204.454-B522AE0B8C80AD10/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:13:12,987Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:13:12,991Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:13:12,996Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:13:13,107Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:13:13,107Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:13:13,107Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:13:13,118Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:12:04.244Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:13:13,930Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:13:13,936Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:13,936Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:14,336Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:13:14,345Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:13:14,399Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:13:14,399Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,403Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:14,417Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,440Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:13:14,442Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:13:14,442Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:13:14,465Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,476Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:14,597Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:13:14,644Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,645Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623031987016) {}
[INFO ] 2021-06-07T02:13:14,647Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:13:14,682Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,685Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:14,719Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623031992382) {}
[INFO ] 2021-06-07T02:13:14,722Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:14,743Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,747Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:13:14,767Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,767Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:13:14,768Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623031994399) {}
[INFO ] 2021-06-07T02:13:14,769Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T02:13:15,413Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247}
[WARN ] 2021-06-07T02:13:15,414Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247}
[INFO ] 2021-06-07T02:13:16,330Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:16,330Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:16,587Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:16,998Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=745d4eff-5451-46bf-a46d-4a6472a7b301, invocation_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, invocation_timestamp=2021-06-07T02:13:16.902Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, session_timestamp=2021-06-07T02:13:16.902Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,099Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=745d4eff-5451-46bf-a46d-4a6472a7b301, invocation_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, invocation_timestamp=2021-06-07T02:13:16.902Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, session_timestamp=2021-06-07T02:13:16.902Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,215Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=745d4eff-5451-46bf-a46d-4a6472a7b301, invocation_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, invocation_timestamp=2021-06-07T02:13:16.902Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, session_timestamp=2021-06-07T02:13:16.902Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,236Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=745d4eff-5451-46bf-a46d-4a6472a7b301, invocation_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, invocation_timestamp=2021-06-07T02:13:16.902Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e7d9ce5c-65f2-4053-b50f-8f333f0365a6, session_timestamp=2021-06-07T02:13:16.902Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,318Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,318Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=56e97e95-3bbd-4c9d-8961-e6d6e19fd0f4, invocation_id=76873c83-5e55-4411-94da-0bc64d166ce1, invocation_timestamp=2021-06-07T02:13:14.880Z, origin=Only For Testing, session_id=76873c83-5e55-4411-94da-0bc64d166ce1, session_timestamp=2021-06-07T02:13:14.880Z, thread-id=247, tx_id=1E38C17E446F7CFFDC710C58886DF96CAC1D99236641C8E73B20319EDCCA5C56}
[INFO ] 2021-06-07T02:13:17,644Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T02:13:17,685Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:13:17,685Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:13:17,692Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T02:13:17,725Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:13:17,725Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:13:17,729Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T02:13:17,755Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:13:17,755Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:27:11,197Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T02:27:11,921Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:27:31,224Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:27:34,985Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T02:27:35,021Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:27:35,023Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:27:36,396Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:36,443Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T02:27:37,550Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:37,565Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:37,565Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T02:27:37,944Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:37,945Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:27:39,224Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T02:27:40,865Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:27:40,895Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:27:40,990Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:27:40,991Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:27:40,991Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:27:50,033Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:50,033Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T02:27:50,396Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:50,396Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T02:27:50,489Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:50,489Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T02:27:50,832Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:27:50,832Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:51,186Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:51,203Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:51,203Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:51,219Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:51,249Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:51,265Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:51,266Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:51,266Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:51,297Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:51,346Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:51,374Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:51,374Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:51,556Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:51,556Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:51,557Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:51,557Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:51,557Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:27:52,311Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:52,358Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:27:52,358Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,427Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:27:53,427Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,536Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:53,536Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,598Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,598Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T02:27:53,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,614Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T02:27:53,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,614Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T02:27:53,614Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,616Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:53,642Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T02:27:53,708Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:53,709Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:53,739Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,754Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:27:53,769Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,804Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T02:27:53,847Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:53,868Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,868Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:27:53,868Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,894Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:53,910Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,911Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:53,911Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:53,911Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:27:54,092Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:54,093Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:27:54,093Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:54,155Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T02:27:54,156Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,157Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,159Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T02:27:54,238Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,238Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:27:54,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,254Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:27:54,256Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,256Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:27:54,256Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,256Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:27:54,256Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:27:54,257Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,257Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:27:54,441Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:54,442Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T02:27:57,601Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:27:57,601Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:57,616Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T02:27:57,616Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:27:57,641Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:27:57,697Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T02:27:57,697Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:27:57,738Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T02:28:11,128Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-022707.040-55BF52B618888535\nodes\0\cordapps] {}
[INFO ] 2021-06-07T02:28:11,177Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:28:11,222Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:28:11,743Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:28:15,035Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:28:16,525Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:28:16,670Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:28:16,944Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:28:16,946Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:28:16,947Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:28:17,270Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:27:06.818Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:28:29,346Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:28:29,648Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:28:29,671Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:28:37,687Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:28:39,300Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:28:39,301Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:39,328Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:28:40,037Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:40,259Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:28:40,319Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:28:40,348Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:28:40,407Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:40,566Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:40,925Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:28:40,950Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T02:28:42,213Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:42,237Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:42,242Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:42,244Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:42,245Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:42,299Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-022707.040-55BF52B618888535\nodes\1\cordapps] {}
[INFO ] 2021-06-07T02:28:42,301Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:28:42,301Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:28:42,481Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:28:42,597Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:28:42,600Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:28:42,607Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:28:42,715Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:28:42,715Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:28:42,715Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:28:42,725Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:27:06.818Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:28:43,667Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:28:43,675Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:43,675Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:43,973Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:43,977Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:28:44,444Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:28:44,445Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,448Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:44,462Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,480Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:28:44,481Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:28:44,481Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:28:44,489Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,503Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:44,595Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:28:44,642Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,643Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:44,646Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:28:44,698Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,701Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:44,729Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,729Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:44,731Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:44,731Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:44,777Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-022707.040-55BF52B618888535\nodes\2\cordapps] {}
[INFO ] 2021-06-07T02:28:44,778Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:28:44,778Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:28:44,965Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-022707.040-55BF52B618888535/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:28:45,030Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:28:45,033Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:28:45,038Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:28:45,113Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:28:45,113Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:28:45,113Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:28:45,121Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:27:06.818Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:28:45,823Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:28:45,829Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:45,829Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:46,174Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:28:46,177Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:28:46,225Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:28:46,225Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,227Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:46,240Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,257Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:28:46,258Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:28:46,258Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:28:46,265Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,274Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:46,351Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:28:46,380Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,381Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623032919300) {}
[INFO ] 2021-06-07T02:28:46,384Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:28:46,403Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,406Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:46,422Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623032924444) {}
[INFO ] 2021-06-07T02:28:46,425Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:46,441Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,443Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:28:46,459Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,459Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:28:46,460Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623032926225) {}
[INFO ] 2021-06-07T02:28:46,460Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T02:28:46,814Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246}
[WARN ] 2021-06-07T02:28:46,814Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246}
[INFO ] 2021-06-07T02:28:47,296Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,296Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,476Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,768Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=5b5f20e2-a5b8-4d9e-a033-2ae10ad9cf5d, invocation_id=9d1b5731-c176-4751-8318-95076efb50b3, invocation_timestamp=2021-06-07T02:28:47.705Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9d1b5731-c176-4751-8318-95076efb50b3, session_timestamp=2021-06-07T02:28:47.705Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,854Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=5b5f20e2-a5b8-4d9e-a033-2ae10ad9cf5d, invocation_id=9d1b5731-c176-4751-8318-95076efb50b3, invocation_timestamp=2021-06-07T02:28:47.705Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9d1b5731-c176-4751-8318-95076efb50b3, session_timestamp=2021-06-07T02:28:47.705Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,930Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=5b5f20e2-a5b8-4d9e-a033-2ae10ad9cf5d, invocation_id=9d1b5731-c176-4751-8318-95076efb50b3, invocation_timestamp=2021-06-07T02:28:47.705Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9d1b5731-c176-4751-8318-95076efb50b3, session_timestamp=2021-06-07T02:28:47.705Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:47,946Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=5b5f20e2-a5b8-4d9e-a033-2ae10ad9cf5d, invocation_id=9d1b5731-c176-4751-8318-95076efb50b3, invocation_timestamp=2021-06-07T02:28:47.705Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9d1b5731-c176-4751-8318-95076efb50b3, session_timestamp=2021-06-07T02:28:47.705Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:48,009Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:48,009Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=37b17909-f532-413f-ae18-e740de57a9a0, invocation_id=34903dcb-2031-4770-940e-a58479aac3da, invocation_timestamp=2021-06-07T02:28:46.513Z, origin=Only For Testing, session_id=34903dcb-2031-4770-940e-a58479aac3da, session_timestamp=2021-06-07T02:28:46.513Z, thread-id=246, tx_id=5DB2725EA6836CBB2286A732B1411054C071BCD0C22CE57C89073712E7405C8A}
[INFO ] 2021-06-07T02:28:48,272Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T02:28:48,310Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:28:48,310Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:28:48,316Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T02:28:48,348Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:28:48,348Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:28:48,350Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T02:28:48,383Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:28:48,383Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:30:20,281Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T02:30:20,710Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:30:22,733Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:30:24,987Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T02:30:25,014Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T02:30:25,016Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:30:25,801Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:25,832Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T02:30:26,501Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:26,517Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:26,517Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T02:30:26,767Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:26,799Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:30:27,538Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T02:30:28,529Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:30:28,529Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:30:28,592Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:30:28,592Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T02:30:28,592Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T02:30:29,847Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:29,848Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T02:30:30,053Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:30,053Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T02:30:30,129Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:30,130Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T02:30:30,349Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T02:30:30,349Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:30,569Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:30,570Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:30,570Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:30,570Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:30,588Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:30,617Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:30,617Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:30,618Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:30,618Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:30,679Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:30,679Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:30,679Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:30,821Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:30,852Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:30,853Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:30,853Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:30,853Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:30:31,325Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:31,325Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:30:31,358Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:31,925Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T02:30:31,925Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:31,986Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:31,986Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,017Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T02:30:32,018Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,018Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,036Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T02:30:32,081Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,081Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:30:32,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,097Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:30:32,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,097Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T02:30:32,097Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,112Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,112Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:30:32,127Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,127Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T02:30:32,144Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,158Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,158Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T02:30:32,158Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,173Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:32,173Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,174Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:32,174Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,174Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:30:32,237Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,238Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:30:32,238Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,254Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T02:30:32,254Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,255Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T02:30:32,255Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T02:30:32,269Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,270Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T02:30:32,285Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,285Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T02:30:32,300Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,300Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T02:30:32,300Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,300Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,300Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T02:30:32,347Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,347Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:30:32,347Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,347Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:30:32,347Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,348Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:30:32,348Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,348Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T02:30:32,348Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T02:30:32,348Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,366Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T02:30:32,366Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,366Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T02:30:32,424Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T02:30:32,440Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:32,440Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T02:30:32,440Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T02:30:32,464Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:30:32,503Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T02:30:32,503Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T02:30:32,544Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T02:30:39,165Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-023018.243-53DD023A0D7941E2\nodes\0\cordapps] {}
[INFO ] 2021-06-07T02:30:39,178Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:30:39,200Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:30:39,450Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:30:41,084Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:30:42,006Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:30:42,110Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:30:42,290Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:30:42,291Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:30:42,292Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:30:42,499Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:30:18.128Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:30:52,508Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:30:52,660Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:30:52,670Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:30:57,775Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T02:30:58,360Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:30:58,360Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:30:58,387Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:30:58,823Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:30:59,013Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:30:59,073Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:30:59,081Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:30:59,139Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:30:59,275Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:30:59,672Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:30:59,756Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T02:31:01,802Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:31:01,838Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:31:01,848Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:01,850Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:31:01,850Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:01,904Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-023018.243-53DD023A0D7941E2\nodes\1\cordapps] {}
[INFO ] 2021-06-07T02:31:01,905Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:31:01,905Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:31:02,073Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:31:02,173Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:31:02,179Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:31:02,192Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:31:02,308Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:31:02,308Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:31:02,308Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:31:02,330Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:30:18.128Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:31:03,746Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:31:03,763Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:03,763Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:04,721Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:04,746Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:31:04,813Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:31:04,813Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:04,817Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:04,833Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:04,849Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:31:04,851Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:31:04,851Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:31:04,860Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:04,871Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:04,971Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:31:05,024Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:05,025Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:31:05,029Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:31:05,052Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:05,055Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:05,078Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:05,078Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:05,079Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:05,080Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:05,115Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-023018.243-53DD023A0D7941E2\nodes\2\cordapps] {}
[INFO ] 2021-06-07T02:31:05,116Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T02:31:05,116Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T02:31:05,217Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-023018.243-53DD023A0D7941E2/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T02:31:05,276Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:31:05,278Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T02:31:05,282Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T02:31:05,372Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T02:31:05,372Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T02:31:05,372Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T02:31:05,382Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T02:30:18.128Z
      epoch=1
  } {}
[INFO ] 2021-06-07T02:31:06,002Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T02:31:06,008Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:06,008Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:06,272Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T02:31:06,276Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T02:31:06,322Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T02:31:06,322Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,326Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:06,347Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,363Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T02:31:06,364Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T02:31:06,365Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T02:31:06,371Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,387Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:06,496Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T02:31:06,535Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,535Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623033058360) {}
[INFO ] 2021-06-07T02:31:06,539Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T02:31:06,561Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,564Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:06,591Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623033064813) {}
[INFO ] 2021-06-07T02:31:06,597Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:06,625Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,628Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T02:31:06,656Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,656Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T02:31:06,657Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623033066322) {}
[INFO ] 2021-06-07T02:31:06,657Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T02:31:07,177Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250}
[WARN ] 2021-06-07T02:31:07,177Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250}
[INFO ] 2021-06-07T02:31:07,762Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:07,762Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,007Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,350Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=1d08909d-c7cc-408b-8f72-59c2c691ca84, invocation_id=c986cb96-ff16-414f-9c45-e503ac899b22, invocation_timestamp=2021-06-07T02:31:08.274Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c986cb96-ff16-414f-9c45-e503ac899b22, session_timestamp=2021-06-07T02:31:08.274Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,450Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=1d08909d-c7cc-408b-8f72-59c2c691ca84, invocation_id=c986cb96-ff16-414f-9c45-e503ac899b22, invocation_timestamp=2021-06-07T02:31:08.274Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c986cb96-ff16-414f-9c45-e503ac899b22, session_timestamp=2021-06-07T02:31:08.274Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,601Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=1d08909d-c7cc-408b-8f72-59c2c691ca84, invocation_id=c986cb96-ff16-414f-9c45-e503ac899b22, invocation_timestamp=2021-06-07T02:31:08.274Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c986cb96-ff16-414f-9c45-e503ac899b22, session_timestamp=2021-06-07T02:31:08.274Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,622Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=1d08909d-c7cc-408b-8f72-59c2c691ca84, invocation_id=c986cb96-ff16-414f-9c45-e503ac899b22, invocation_timestamp=2021-06-07T02:31:08.274Z, origin=O=Mock Company 1, L=London, C=GB, session_id=c986cb96-ff16-414f-9c45-e503ac899b22, session_timestamp=2021-06-07T02:31:08.274Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,714Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:08,714Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=92312891-7270-4285-9a2c-da611077cc1a, invocation_id=541bd64f-4d79-405f-8617-cfae091a7db7, invocation_timestamp=2021-06-07T02:31:06.746Z, origin=Only For Testing, session_id=541bd64f-4d79-405f-8617-cfae091a7db7, session_timestamp=2021-06-07T02:31:06.746Z, thread-id=250, tx_id=E0F79D918CDBE97DFF42242D6EB7CEA16B40C533257CD6BACD74872C87C6AB08}
[INFO ] 2021-06-07T02:31:09,155Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T02:31:09,217Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:31:09,217Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:31:09,227Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T02:31:09,269Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:31:09,269Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T02:31:09,272Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T02:31:09,303Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T02:31:09,303Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:08:54,413Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T03:08:54,861Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:08:57,252Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:08:59,553Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T03:08:59,572Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:08:59,574Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:09:00,706Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:00,752Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T03:09:01,456Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:01,472Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:01,472Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T03:09:01,781Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:01,815Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:09:02,688Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T03:09:03,820Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:09:03,836Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:09:03,898Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:09:03,915Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:09:03,915Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:09:05,320Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:05,320Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T03:09:05,567Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:05,568Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T03:09:05,631Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:05,632Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T03:09:05,869Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:09:05,869Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:06,104Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:06,119Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:06,119Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:06,119Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:06,135Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:06,135Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:06,135Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:06,135Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:06,152Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:06,217Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:06,218Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:06,220Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:06,341Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:06,356Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:06,356Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:06,356Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:06,373Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:09:06,823Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:06,823Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:09:06,870Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,500Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:09:07,500Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,560Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:07,560Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,592Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,593Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,608Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T03:09:07,656Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,656Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:09:07,657Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,657Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:09:07,657Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,657Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:09:07,657Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,677Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,678Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:09:07,702Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,702Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T03:09:07,718Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,718Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,718Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:09:07,719Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,736Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:07,751Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,755Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:07,755Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,755Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:09:07,828Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,828Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:09:07,828Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,829Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:09:07,829Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,829Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:09:07,829Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:09:07,847Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,847Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T03:09:07,859Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,859Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T03:09:07,875Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,875Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T03:09:07,876Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,876Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,876Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T03:09:07,906Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,906Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,907Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:09:07,922Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,925Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T03:09:07,984Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:09:07,984Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:08,000Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T03:09:08,000Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:09:08,008Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:09:08,048Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T03:09:08,048Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:09:08,103Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T03:09:14,827Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-030851.719-182C6DD0F8C92D6B\nodes\0\cordapps] {}
[INFO ] 2021-06-07T03:09:14,841Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:09:14,867Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:09:15,149Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:09:16,976Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:09:17,827Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:09:17,920Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:09:18,099Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:09:18,100Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:09:18,100Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:09:18,267Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:08:51.569Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:09:24,635Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:09:24,773Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:09:24,780Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:09:28,374Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:09:28,877Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:09:28,877Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:28,888Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:09:29,188Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:29,281Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:09:29,306Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:09:29,310Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:09:29,322Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:29,374Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:29,575Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:09:29,593Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T03:09:30,316Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:30,328Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:30,332Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:30,333Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:30,333Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:30,365Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-030851.719-182C6DD0F8C92D6B\nodes\1\cordapps] {}
[INFO ] 2021-06-07T03:09:30,366Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:09:30,366Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:09:30,469Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:09:30,543Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:09:30,546Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:09:30,552Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:09:30,638Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:09:30,638Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:09:30,638Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:09:30,646Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:08:51.569Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:09:31,354Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:09:31,361Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:31,361Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:31,650Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:31,653Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:09:31,705Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:09:31,706Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:31,709Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:31,725Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:31,754Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:09:31,756Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:09:32,339Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:09:32,347Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:32,362Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:32,487Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:09:32,540Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:32,541Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:32,544Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:09:32,572Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:32,575Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:32,599Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:32,599Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:32,601Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:32,601Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:32,640Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-030851.719-182C6DD0F8C92D6B\nodes\2\cordapps] {}
[INFO ] 2021-06-07T03:09:32,641Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:09:32,641Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:09:32,782Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-030851.719-182C6DD0F8C92D6B/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:09:32,840Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:09:32,843Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:09:32,848Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:09:32,924Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:09:32,924Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:09:32,924Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:09:32,933Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:08:51.569Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:09:33,508Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:09:33,514Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:33,514Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:33,734Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:09:33,736Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:09:33,778Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:09:33,778Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:33,781Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:33,795Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:33,809Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:09:33,811Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:09:33,811Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:09:33,817Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:33,824Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:33,899Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=85B2AC4CE2F9878E2D5F9B7EAF1825C2CC2698AEA622DEB01FB58A1F4EAC64FD uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:09:33,929Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:33,929Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623035368877) {}
[INFO ] 2021-06-07T03:09:33,931Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:09:33,947Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:33,950Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:33,977Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623035371705) {}
[INFO ] 2021-06-07T03:09:33,980Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:34,001Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:34,003Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:09:34,022Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:34,022Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:09:34,023Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623035373778) {}
[INFO ] 2021-06-07T03:09:34,023Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T03:09:34,429Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244}
[WARN ] 2021-06-07T03:09:34,429Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244}
[INFO ] 2021-06-07T03:09:35,113Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,113Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,347Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,699Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=dcf9bbe6-1911-458e-bddf-631f610149c1, invocation_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, invocation_timestamp=2021-06-07T03:09:35.620Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, session_timestamp=2021-06-07T03:09:35.620Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,774Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=dcf9bbe6-1911-458e-bddf-631f610149c1, invocation_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, invocation_timestamp=2021-06-07T03:09:35.620Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, session_timestamp=2021-06-07T03:09:35.620Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,878Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=dcf9bbe6-1911-458e-bddf-631f610149c1, invocation_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, invocation_timestamp=2021-06-07T03:09:35.620Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, session_timestamp=2021-06-07T03:09:35.620Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,898Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=dcf9bbe6-1911-458e-bddf-631f610149c1, invocation_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, invocation_timestamp=2021-06-07T03:09:35.620Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f3081dd-60d9-4b8d-98a7-9fdff5385047, session_timestamp=2021-06-07T03:09:35.620Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,957Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:35,957Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=af0db177-219d-4ad6-81bb-de158e3532d8, invocation_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, invocation_timestamp=2021-06-07T03:09:34.088Z, origin=Only For Testing, session_id=4ff18a2a-ffed-4702-bbdf-5c857a5a6101, session_timestamp=2021-06-07T03:09:34.088Z, thread-id=244, tx_id=FDF3724A9FBE07D2CD885189A9B3CDF09DD3353B9E1358783535C6C8909AB297}
[INFO ] 2021-06-07T03:09:36,204Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T03:09:36,242Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:09:36,242Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:09:36,250Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T03:09:36,285Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:09:36,285Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:09:36,287Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T03:09:36,318Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:09:36,318Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:19:29,929Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T03:19:30,450Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:19:32,743Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:19:35,169Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T03:19:35,190Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:19:35,191Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:19:36,093Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:36,138Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T03:19:36,788Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:36,789Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:36,789Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T03:19:37,054Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:37,071Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:19:37,875Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T03:19:38,779Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:19:38,796Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:19:38,860Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:19:38,861Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:19:38,861Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:19:40,316Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:40,316Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T03:19:40,551Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:40,551Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T03:19:40,614Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:40,614Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T03:19:40,830Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:19:40,831Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:41,124Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:41,124Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:41,124Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:41,124Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:41,157Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:41,172Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:41,172Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:41,172Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:41,194Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:41,250Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:41,250Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:41,250Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:41,376Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:41,394Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:41,394Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:41,394Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:41,394Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:19:41,875Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:41,893Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:19:41,920Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,501Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:19:42,501Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,562Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:42,562Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,594Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,609Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T03:19:42,609Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,610Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T03:19:42,610Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,610Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T03:19:42,610Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,610Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,630Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T03:19:42,672Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,672Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:19:42,688Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,688Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:19:42,688Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,688Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:19:42,689Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,704Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,704Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:19:42,735Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,735Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T03:19:42,750Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,750Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,750Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:19:42,750Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,781Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:42,782Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,782Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:42,782Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,784Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:19:42,859Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,859Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:19:42,860Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,860Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:19:42,860Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,884Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:19:42,884Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:19:42,884Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,884Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T03:19:42,906Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,906Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T03:19:42,930Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,930Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T03:19:42,930Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,930Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,930Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T03:19:42,968Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:19:42,969Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:19:42,986Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:42,986Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:19:42,986Z [Connection worker] internal.TestCordappImpl. - Clean stale outputs {}
[INFO ] 2021-06-07T03:19:43,000Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:19:43,092Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:43,093Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T03:19:43,093Z [Connection worker] internal.TestCordappImpl. - Clean stale outputs {}
[INFO ] 2021-06-07T03:19:43,093Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T03:19:45,286Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:19:45,286Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:45,304Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T03:19:45,305Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:19:45,310Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:19:45,349Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T03:19:45,350Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:19:45,389Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T03:19:51,944Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-031927.373-63C38A6E3260CE3C\nodes\0\cordapps] {}
[INFO ] 2021-06-07T03:19:51,959Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:19:51,979Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:19:52,245Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:19:54,006Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:19:54,955Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:19:55,050Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:19:55,252Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:19:55,253Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:19:55,253Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:19:55,444Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:19:27.201Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:20:02,863Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:20:03,028Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:20:03,040Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:20:10,431Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:20:11,515Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:20:11,515Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:11,539Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:20:11,937Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:12,035Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:20:12,055Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:20:12,059Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:20:12,068Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:12,114Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:12,433Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B018F78803563277DF1BAA94A9C278972B224C1C550BEC70C2147AE9AFFA8E90 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:20:12,466Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T03:20:13,890Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:13,917Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:13,922Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:13,926Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:13,926Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:13,979Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-031927.373-63C38A6E3260CE3C\nodes\1\cordapps] {}
[INFO ] 2021-06-07T03:20:13,987Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:20:13,987Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:20:14,355Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:20:14,521Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:20:14,529Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:20:14,544Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:20:14,694Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:20:14,694Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:20:14,694Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:20:14,712Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:19:27.201Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:20:16,260Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:20:16,269Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:16,269Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:17,526Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:17,531Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:20:17,574Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:20:17,575Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,579Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:17,591Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,607Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:20:17,609Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:20:17,609Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:20:17,618Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,631Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:17,709Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B018F78803563277DF1BAA94A9C278972B224C1C550BEC70C2147AE9AFFA8E90 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:20:17,747Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,747Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:17,751Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:20:17,767Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,769Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:17,786Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,786Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:17,787Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:17,787Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:17,813Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-031927.373-63C38A6E3260CE3C\nodes\2\cordapps] {}
[INFO ] 2021-06-07T03:20:17,814Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:20:17,814Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:20:17,898Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-031927.373-63C38A6E3260CE3C/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:20:18,005Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:20:18,008Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:20:18,013Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:20:18,109Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:20:18,109Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:20:18,110Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:20:18,121Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:19:27.201Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:20:19,014Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:20:19,020Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:19,020Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:19,498Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:20:19,506Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:20:19,615Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:20:19,615Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,619Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:19,672Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,714Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:20:19,717Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:20:19,717Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:20:19,777Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,797Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:19,864Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B018F78803563277DF1BAA94A9C278972B224C1C550BEC70C2147AE9AFFA8E90 uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:20:19,908Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,909Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623036011515) {}
[INFO ] 2021-06-07T03:20:19,911Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:20:19,935Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,939Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:19,964Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623036017574) {}
[INFO ] 2021-06-07T03:20:19,967Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:19,991Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:19,995Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:20:20,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:20,014Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:20:20,015Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623036019615) {}
[INFO ] 2021-06-07T03:20:20,018Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T03:20:20,494Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250}
[WARN ] 2021-06-07T03:20:20,494Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250}
[INFO ] 2021-06-07T03:20:21,242Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:21,242Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:21,428Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:21,964Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=cfcd35f4-3083-4fa4-9cde-5cf34905b4ca, invocation_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, invocation_timestamp=2021-06-07T03:20:21.834Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, session_timestamp=2021-06-07T03:20:21.834Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,093Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=cfcd35f4-3083-4fa4-9cde-5cf34905b4ca, invocation_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, invocation_timestamp=2021-06-07T03:20:21.834Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, session_timestamp=2021-06-07T03:20:21.834Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,211Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=cfcd35f4-3083-4fa4-9cde-5cf34905b4ca, invocation_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, invocation_timestamp=2021-06-07T03:20:21.834Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, session_timestamp=2021-06-07T03:20:21.834Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,237Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=cfcd35f4-3083-4fa4-9cde-5cf34905b4ca, invocation_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, invocation_timestamp=2021-06-07T03:20:21.834Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5db0d7fd-aea8-4904-b25d-59a19988e9b6, session_timestamp=2021-06-07T03:20:21.834Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,399Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,399Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f817b3f9-005c-447e-b41c-5a19fe5dcd03, invocation_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, invocation_timestamp=2021-06-07T03:20:20.123Z, origin=Only For Testing, session_id=f5158354-b6af-4946-9ad4-ebe951acfb1a, session_timestamp=2021-06-07T03:20:20.123Z, thread-id=250, tx_id=ACFE39BA96B03E0A89650639F90649585F1962EAA8959FB786485FCB8B927DB1}
[INFO ] 2021-06-07T03:20:22,763Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T03:20:22,826Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:20:22,826Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:20:22,836Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T03:20:22,877Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:20:22,878Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:20:22,881Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T03:20:22,939Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:20:22,939Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:13,678Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T03:52:14,132Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:52:17,103Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:52:19,306Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T03:52:19,323Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T03:52:19,324Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:52:20,184Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:20,243Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T03:52:21,147Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:21,163Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:21,163Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T03:52:21,288Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:21,304Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:52:21,772Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T03:52:22,764Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:52:22,779Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:52:22,827Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:52:22,827Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T03:52:22,827Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T03:52:24,590Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:24,591Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T03:52:24,793Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:24,793Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T03:52:24,855Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:24,855Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T03:52:25,015Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T03:52:25,060Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:25,283Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:25,298Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:25,298Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:25,299Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:25,314Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:25,330Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:25,331Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:25,331Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:25,346Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:25,395Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:25,415Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:25,415Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:25,534Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:25,564Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:25,564Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:25,565Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:25,580Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:52:26,304Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:26,304Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:52:26,351Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,038Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T03:52:27,149Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,165Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:27,165Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,212Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,212Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T03:52:27,212Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,228Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T03:52:27,229Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,229Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T03:52:27,229Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,229Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,244Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T03:52:27,276Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,276Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:52:27,308Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,308Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:52:27,308Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,308Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T03:52:27,309Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,309Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,309Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:52:27,325Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,326Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T03:52:27,356Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,357Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,357Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T03:52:27,357Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,372Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:27,375Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,375Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:27,375Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,375Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:52:27,450Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,450Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:52:27,450Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,466Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T03:52:27,482Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,482Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T03:52:27,482Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T03:52:27,482Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,483Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T03:52:27,498Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,498Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T03:52:27,498Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,499Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T03:52:27,499Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,499Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,513Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,531Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,531Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,544Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,544Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,544Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,545Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T03:52:27,576Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T03:52:27,591Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:27,591Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T03:52:27,591Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T03:52:27,617Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:52:27,686Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T03:52:27,686Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T03:52:27,738Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T03:52:34,487Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-035211.210-4E030E06FD702BA0\nodes\0\cordapps] {}
[INFO ] 2021-06-07T03:52:34,507Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:52:34,536Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:52:34,875Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:52:37,036Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:37,983Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:52:38,082Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:52:38,252Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:52:38,253Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:52:38,253Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:52:38,440Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:52:11.089Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:52:45,209Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:52:45,357Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:52:45,365Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:52:48,923Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T03:52:49,469Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:52:49,470Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:49,481Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:52:49,876Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:49,978Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:52:49,999Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:52:50,003Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:52:50,014Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:50,067Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:50,299Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:52:50,315Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T03:52:51,025Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:51,037Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:51,042Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:51,043Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:51,044Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:51,075Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-035211.210-4E030E06FD702BA0\nodes\1\cordapps] {}
[INFO ] 2021-06-07T03:52:51,076Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:52:51,076Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:52:51,176Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:52:51,251Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:51,253Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:52:51,258Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:52:51,329Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:52:51,330Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:52:51,330Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:52:51,336Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:52:11.089Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:52:51,970Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:52:51,977Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:51,977Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:52,761Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:52,763Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:52:52,799Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:52:52,799Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:52,803Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:52,817Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:52,832Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:52:52,835Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:52:52,835Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:52:52,841Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:52,850Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:52,933Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:52:52,970Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:52,970Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:52,974Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:52:52,993Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:52,995Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:53,017Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:53,017Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:53,018Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:53,018Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:53,044Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-035211.210-4E030E06FD702BA0\nodes\2\cordapps] {}
[INFO ] 2021-06-07T03:52:53,045Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T03:52:53,045Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T03:52:53,127Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-035211.210-4E030E06FD702BA0/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T03:52:53,182Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:53,185Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T03:52:53,189Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T03:52:53,260Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T03:52:53,260Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T03:52:53,260Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T03:52:53,266Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T03:52:11.089Z
      epoch=1
  } {}
[INFO ] 2021-06-07T03:52:53,814Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T03:52:53,819Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:53,819Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:54,062Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T03:52:54,065Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T03:52:54,106Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T03:52:54,106Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,109Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:54,122Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,140Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T03:52:54,141Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T03:52:54,141Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T03:52:54,149Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,158Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:54,253Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T03:52:54,282Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,282Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623037969469) {}
[INFO ] 2021-06-07T03:52:54,286Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T03:52:54,304Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,306Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:54,323Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623037972799) {}
[INFO ] 2021-06-07T03:52:54,326Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:54,351Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,354Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T03:52:54,368Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,368Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T03:52:54,369Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623037974106) {}
[INFO ] 2021-06-07T03:52:54,369Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T03:52:54,719Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247}
[WARN ] 2021-06-07T03:52:54,719Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247}
[INFO ] 2021-06-07T03:52:55,207Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,207Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,376Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,672Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=464b3c0d-2074-47cb-a2d7-96ddfbb299da, invocation_id=485f9345-e278-4167-9908-3c8d91398a98, invocation_timestamp=2021-06-07T03:52:55.596Z, origin=O=Mock Company 1, L=London, C=GB, session_id=485f9345-e278-4167-9908-3c8d91398a98, session_timestamp=2021-06-07T03:52:55.596Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,743Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=464b3c0d-2074-47cb-a2d7-96ddfbb299da, invocation_id=485f9345-e278-4167-9908-3c8d91398a98, invocation_timestamp=2021-06-07T03:52:55.596Z, origin=O=Mock Company 1, L=London, C=GB, session_id=485f9345-e278-4167-9908-3c8d91398a98, session_timestamp=2021-06-07T03:52:55.596Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,829Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=464b3c0d-2074-47cb-a2d7-96ddfbb299da, invocation_id=485f9345-e278-4167-9908-3c8d91398a98, invocation_timestamp=2021-06-07T03:52:55.596Z, origin=O=Mock Company 1, L=London, C=GB, session_id=485f9345-e278-4167-9908-3c8d91398a98, session_timestamp=2021-06-07T03:52:55.596Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,857Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=464b3c0d-2074-47cb-a2d7-96ddfbb299da, invocation_id=485f9345-e278-4167-9908-3c8d91398a98, invocation_timestamp=2021-06-07T03:52:55.596Z, origin=O=Mock Company 1, L=London, C=GB, session_id=485f9345-e278-4167-9908-3c8d91398a98, session_timestamp=2021-06-07T03:52:55.596Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,916Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:55,917Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9aad66e1-872f-4869-99d7-d5c9faf90cf8, invocation_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, invocation_timestamp=2021-06-07T03:52:54.429Z, origin=Only For Testing, session_id=202e4f71-8dfc-4a20-95b0-fce0bed31f64, session_timestamp=2021-06-07T03:52:54.429Z, thread-id=247, tx_id=82F3C37B0B5830BB5A2F26EA10CD2FA816B1870B0AB715D97BC08C0E49376A9E}
[INFO ] 2021-06-07T03:52:56,130Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T03:52:56,159Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:52:56,159Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:56,164Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T03:52:56,187Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:52:56,187Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T03:52:56,189Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T03:52:56,216Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T03:52:56,216Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:25:44,638Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\workspace\corda-custom-query-tests\workflows ... {}
[INFO ] 2021-06-07T06:25:45,326Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T06:25:49,064Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T06:25:52,196Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2021-06-07T06:25:52,218Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2021-06-07T06:25:52,219Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T06:25:53,450Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:25:53,496Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2021-06-07T06:25:54,763Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:25:54,764Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:25:54,764Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2021-06-07T06:25:54,933Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:25:54,934Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T06:25:55,529Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2021-06-07T06:25:56,600Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T06:25:56,600Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T06:25:56,647Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T06:25:56,647Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2021-06-07T06:25:56,647Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2021-06-07T06:25:59,649Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:25:59,649Z [Connection worker] internal.TestCordappImpl. - Configure project :clients {}
[INFO ] 2021-06-07T06:25:59,902Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:25:59,903Z [Connection worker] internal.TestCordappImpl. - Configure project :contracts {}
[INFO ] 2021-06-07T06:25:59,979Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:25:59,980Z [Connection worker] internal.TestCordappImpl. - Configure project :workflows {}
[INFO ] 2021-06-07T06:26:00,308Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2021-06-07T06:26:00,367Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:00,680Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:00,695Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:00,695Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:00,696Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:00,726Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:00,742Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:00,742Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:00,742Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:00,773Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:00,835Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:00,856Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:00,894Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:01,019Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:01,048Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:01,049Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:01,049Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:01,079Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:compileClasspath {}
[INFO ] 2021-06-07T06:26:02,231Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:02,246Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T06:26:02,323Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,121Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:compileClasspath {}
[INFO ] 2021-06-07T06:26:03,230Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,245Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:03,245Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,291Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,291Z [Connection worker] internal.TestCordappImpl. - Task :contracts:compileJava {}
[INFO ] 2021-06-07T06:26:03,291Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,306Z [Connection worker] internal.TestCordappImpl. - Task :contracts:processResources {}
[INFO ] 2021-06-07T06:26:03,306Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,306Z [Connection worker] internal.TestCordappImpl. - Task :contracts:classes {}
[INFO ] 2021-06-07T06:26:03,306Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,306Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,322Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :contracts:runtime {}
[INFO ] 2021-06-07T06:26:03,369Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,371Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T06:26:03,388Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,389Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T06:26:03,389Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,390Z [Connection worker] internal.TestCordappImpl. - Resolve files of :contracts:runtime {}
[INFO ] 2021-06-07T06:26:03,391Z [Connection worker] internal.TestCordappImpl. - Task :contracts:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,419Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,419Z [Connection worker] internal.TestCordappImpl. - Task :contracts:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T06:26:03,462Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,463Z [Connection worker] internal.TestCordappImpl. - Task :contracts:jar {}
[INFO ] 2021-06-07T06:26:03,478Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,479Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,479Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerClasspath {}
[INFO ] 2021-06-07T06:26:03,479Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,499Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:03,525Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,526Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:03,526Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,526Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:compileClasspath {}
[INFO ] 2021-06-07T06:26:03,571Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,571Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T06:26:03,571Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,602Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:compileClasspath {}
[INFO ] 2021-06-07T06:26:03,618Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,618Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:kotlinCompilerPluginClasspath {}
[INFO ] 2021-06-07T06:26:03,618Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileKotlin {}
[INFO ] 2021-06-07T06:26:03,618Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,632Z [Connection worker] internal.TestCordappImpl. - Task :workflows:compileJava {}
[INFO ] 2021-06-07T06:26:03,635Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,636Z [Connection worker] internal.TestCordappImpl. - Task :workflows:processResources {}
[INFO ] 2021-06-07T06:26:03,670Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:classes {}
[INFO ] 2021-06-07T06:26:03,675Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,675Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,675Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,713Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,714Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,714Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,714Z [Connection worker] internal.TestCordappImpl. - Resolve files of :workflows:runtime {}
[INFO ] 2021-06-07T06:26:03,714Z [Connection worker] internal.TestCordappImpl. - Task :workflows:configureCordappFatJar {}
[INFO ] 2021-06-07T06:26:03,714Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,728Z [Connection worker] internal.TestCordappImpl. - Task :workflows:inspectClassesForKotlinIC {}
[INFO ] 2021-06-07T06:26:03,776Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:03,777Z [Connection worker] internal.TestCordappImpl. - Task :workflows:jar {}
[INFO ] 2021-06-07T06:26:06,395Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2021-06-07T06:26:06,423Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:06,424Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for project ':workflows' {}
[INFO ] 2021-06-07T06:26:06,424Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2021-06-07T06:26:06,444Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T06:26:06,485Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\workspace\corda-custom-query-tests\.gradle {}
[INFO ] 2021-06-07T06:26:06,485Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2021-06-07T06:26:06,536Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2021-06-07T06:26:12,677Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-062541.972-BE2C51176A6A48B3\nodes\0\cordapps] {}
[INFO ] 2021-06-07T06:26:12,689Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/0/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/0/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T06:26:12,711Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/0/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T06:26:12,951Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/0/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T06:26:14,444Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:26:15,372Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T06:26:15,458Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T06:26:15,654Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T06:26:15,655Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T06:26:15,656Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T06:26:15,860Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T06:25:41.851Z
      epoch=1
  } {}
[INFO ] 2021-06-07T06:26:26,049Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T06:26:26,236Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T06:26:26,251Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T06:26:32,754Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1), JPANotarySchemaV1(name=net.corda.notary.jpa.JPANotarySchema, version=1)] {}
[INFO ] 2021-06-07T06:26:33,372Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T06:26:33,372Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:33,387Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T06:26:33,773Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:33,911Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T06:26:33,943Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T06:26:33,947Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T06:26:33,980Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:34,038Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:34,293Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T06:26:34,312Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.notary.jpa.JPANotaryService {}
[INFO ] 2021-06-07T06:26:35,274Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:35,295Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:35,298Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:35,300Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:35,300Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:35,353Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-062541.972-BE2C51176A6A48B3\nodes\1\cordapps] {}
[INFO ] 2021-06-07T06:26:35,354Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/1/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/1/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T06:26:35,354Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/1/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T06:26:35,596Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/1/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T06:26:35,686Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:26:35,689Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T06:26:35,698Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T06:26:35,819Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T06:26:35,820Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T06:26:35,820Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T06:26:35,836Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T06:25:41.851Z
      epoch=1
  } {}
[INFO ] 2021-06-07T06:26:37,809Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T06:26:37,827Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:37,827Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:38,267Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:38,270Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T06:26:38,344Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T06:26:38,344Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,347Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:38,374Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,396Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T06:26:38,397Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T06:26:38,397Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T06:26:38,405Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,415Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:38,539Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T06:26:38,584Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,585Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:38,588Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T06:26:38,608Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,611Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:38,629Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,629Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:38,631Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:38,631Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:38,665Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20210607-062541.972-BE2C51176A6A48B3\nodes\2\cordapps] {}
[INFO ] 2021-06-07T06:26:38,667Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/2/cordapps/contracts-0.1.jar, rootPackageName=null), RestrictedURL(url=file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/2/cordapps/workflows-0.1.jar, rootPackageName=null) {}
[INFO ] 2021-06-07T06:26:38,667Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/2/cordapps/contracts-0.1.jar {}
[INFO ] 2021-06-07T06:26:38,785Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/workspace/corda-custom-query-tests/workflows/build/mock-network/20210607-062541.972-BE2C51176A6A48B3/nodes/2/cordapps/workflows-0.1.jar {}
[INFO ] 2021-06-07T06:26:38,853Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:26:38,857Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2021-06-07T06:26:38,862Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2021-06-07T06:26:38,959Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.BurnInsurance to initiate net.corda.samples.carinsurance.flows.BurnResponder (version 1) {}
[INFO ] 2021-06-07T06:26:38,960Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.InsuranceClaim to initiate net.corda.samples.carinsurance.flows.InsuranceClaimResponder (version 1) {}
[INFO ] 2021-06-07T06:26:38,960Z [Test worker] internal.NodeFlowManager. - Registered net.corda.samples.carinsurance.flows.IssueInsurance to initiate net.corda.samples.carinsurance.flows.IssueInsuranceResponder (version 1) {}
[INFO ] 2021-06-07T06:26:38,969Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2021-06-07T06:25:41.851Z
      epoch=1
  } {}
[INFO ] 2021-06-07T06:26:39,787Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2021-06-07T06:26:39,791Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:39,792Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:40,106Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), InsuranceSchemaV1(name=net.corda.samples.carinsurance.schema.InsuranceSchema, version=1)] {}
[INFO ] 2021-06-07T06:26:40,109Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2021-06-07T06:26:40,169Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2021-06-07T06:26:40,169Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,173Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:40,186Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,205Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2021-06-07T06:26:40,206Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2021-06-07T06:26:40,206Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2021-06-07T06:26:40,219Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,229Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:40,332Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=EB8B63CFC03E495C3F18E00221963B544ABE69371C3077A4D608AA257F53E09B uploader=app filename=Queryablestate Car Insurance {}
[INFO ] 2021-06-07T06:26:40,369Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,369Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=8, serial=1623047193372) {}
[INFO ] 2021-06-07T06:26:40,372Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2021-06-07T06:26:40,389Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,392Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:40,415Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=8, serial=1623047198344) {}
[INFO ] 2021-06-07T06:26:40,417Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:40,434Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,436Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2021-06-07T06:26:40,454Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,455Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2021-06-07T06:26:40,456Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=8, serial=1623047200169) {}
[INFO ] 2021-06-07T06:26:40,456Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2021-06-07T06:26:40,867Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248}
[WARN ] 2021-06-07T06:26:40,867Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract net.corda.samples.carinsurance.contracts.InsuranceContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248}
[INFO ] 2021-06-07T06:26:41,402Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:41,402Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:41,720Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,252Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=90bece85-a317-4c3b-bd95-c5bc348fee1d, invocation_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, invocation_timestamp=2021-06-07T06:26:42.155Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, session_timestamp=2021-06-07T06:26:42.155Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,373Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=90bece85-a317-4c3b-bd95-c5bc348fee1d, invocation_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, invocation_timestamp=2021-06-07T06:26:42.155Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, session_timestamp=2021-06-07T06:26:42.155Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,485Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=90bece85-a317-4c3b-bd95-c5bc348fee1d, invocation_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, invocation_timestamp=2021-06-07T06:26:42.155Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, session_timestamp=2021-06-07T06:26:42.155Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,502Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=90bece85-a317-4c3b-bd95-c5bc348fee1d, invocation_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, invocation_timestamp=2021-06-07T06:26:42.155Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0f97dcfd-96f1-4c94-8a84-2068480c3017, session_timestamp=2021-06-07T06:26:42.155Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,582Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,583Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3051fe67-f8dd-435b-aa53-e7c0b58513f1, invocation_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, invocation_timestamp=2021-06-07T06:26:40.528Z, origin=Only For Testing, session_id=9b2ce393-8f46-4f30-9011-56d7b11bcddd, session_timestamp=2021-06-07T06:26:40.528Z, thread-id=248, tx_id=0B9A70DA436EBC691B6D16E4DE926F5F09B23B64A396BE37FD4ECC91EB3C1ED7}
[INFO ] 2021-06-07T06:26:42,882Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2021-06-07T06:26:42,929Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T06:26:42,929Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:26:42,936Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2021-06-07T06:26:42,976Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T06:26:42,976Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2021-06-07T06:26:42,979Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2021-06-07T06:26:43,022Z [Test worker] internal.MockNodeMessagingService. - Status change to false {}
[INFO ] 2021-06-07T06:26:43,022Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
